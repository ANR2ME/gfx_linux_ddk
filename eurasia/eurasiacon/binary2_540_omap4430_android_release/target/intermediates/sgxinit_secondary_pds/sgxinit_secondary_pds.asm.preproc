#line 1 "services4/srvinit/devices/sgx/sgxinit_secondary.pds.asm"
#line 1 "/home001/myeonggyu.son/omap_ics_release_4AI.1.2_2/android/vendor/ti/GFX_Linux_DDK/eurasia//"
#line 1 "<built-in>"
#line 1 "<command-line>"
#line 1 "/home001/myeonggyu.son/omap_ics_release_4AI.1.2_2/android/vendor/ti/GFX_Linux_DDK/eurasia/eurasiacon/binary2_540_omap4430_android_release/config.h" 1
#line 1 "<command-line>" 2
#line 1 "services4/srvinit/devices/sgx/sgxinit_secondary.pds.asm"
#line 32 "services4/srvinit/devices/sgx/sgxinit_secondary.pds.asm"
#line 1 "services4/srvinit/devices/sgx/usedefs.h" 1
#line 35 "services4/srvinit/devices/sgx/usedefs.h"
#line 1 "services4/srvinit/devices/sgx/sgx_mkif.h" 1
#line 35 "services4/srvinit/devices/sgx/sgx_mkif.h"
#line 1 "include4/sgxapi.h" 1
#line 39 "include4/sgxapi.h"
#line 1 "hwdefs/sgxdefs.h" 1
#line 30 "hwdefs/sgxdefs.h"
#line 1 "hwdefs/sgxerrata.h" 1
#line 31 "hwdefs/sgxdefs.h" 2
#line 1 "hwdefs/sgxfeaturedefs.h" 1
#line 766 "hwdefs/sgxfeaturedefs.h"
#line 1 "include4/img_types.h" 1
#line 39 "include4/img_types.h"
typedef unsigned int IMG_UINT, *IMG_PUINT;
typedef signed int IMG_INT, *IMG_PINT;

typedef unsigned char IMG_UINT8, *IMG_PUINT8;
typedef unsigned char IMG_BYTE, *IMG_PBYTE;
typedef signed char IMG_INT8, *IMG_PINT8;
typedef char IMG_CHAR, *IMG_PCHAR;

typedef unsigned short IMG_UINT16, *IMG_PUINT16;
typedef signed short IMG_INT16, *IMG_PINT16;

typedef unsigned int IMG_UINT32, *IMG_PUINT32;
typedef signed int IMG_INT32, *IMG_PINT32;
#line 67 "include4/img_types.h"
  typedef unsigned long long IMG_UINT64, *IMG_PUINT64;
  typedef long long IMG_INT64, *IMG_PINT64;







typedef float IMG_FLOAT, *IMG_PFLOAT;
typedef double IMG_DOUBLE, *IMG_PDOUBLE;


typedef enum tag_img_bool
{
 IMG_FALSE = 0,
 IMG_TRUE = 1,
 IMG_FORCE_ALIGN = 0x7FFFFFFF
} IMG_BOOL, *IMG_PBOOL;

typedef void IMG_VOID, *IMG_PVOID;

typedef IMG_INT32 IMG_RESULT;






 typedef unsigned int IMG_UINTPTR_T;
 typedef IMG_UINT32 IMG_SIZE_T;


typedef IMG_PVOID IMG_HANDLE;

typedef void** IMG_HVOID, * IMG_PHVOID;




typedef IMG_UINT32 IMG_SID;

typedef IMG_UINT32 IMG_EVENTSID;





 typedef IMG_HANDLE IMG_S_HANDLE;
#line 160 "include4/img_types.h"
typedef IMG_PVOID IMG_CPU_VIRTADDR;


typedef struct _IMG_DEV_VIRTADDR
{

 IMG_UINT32 uiAddr;


} IMG_DEV_VIRTADDR;

typedef IMG_UINT32 IMG_DEVMEM_SIZE_T;


typedef struct _IMG_CPU_PHYADDR
{

 IMG_UINTPTR_T uiAddr;
} IMG_CPU_PHYADDR;


typedef struct _IMG_DEV_PHYADDR
{


 IMG_UINTPTR_T uiAddr;




} IMG_DEV_PHYADDR;


typedef struct _IMG_SYS_PHYADDR
{

 IMG_UINTPTR_T uiAddr;
} IMG_SYS_PHYADDR;

#line 1 "include4/img_defs.h" 1
#line 33 "include4/img_defs.h"
#line 1 "include4/img_types.h" 1
#line 34 "include4/img_defs.h" 2

typedef enum img_tag_TriStateSwitch
{
 IMG_ON = 0x00,
 IMG_OFF,
 IMG_IGNORE

} img_TriStateSwitch, * img_pTriStateSwitch;
#line 86 "include4/img_defs.h"
typedef char TCHAR, *PTCHAR, *PTSTR;
#line 200 "include4/img_types.h" 2
#line 767 "hwdefs/sgxfeaturedefs.h" 2

#line 1 "hwdefs/sgxcoretypes.h" 1
#line 31 "hwdefs/sgxcoretypes.h"
typedef enum
{
 SGX_CORE_ID_INVALID = 0,
 SGX_CORE_ID_520 = 1,
 SGX_CORE_ID_530 = 2,
 SGX_CORE_ID_531 = 3,
 SGX_CORE_ID_535 = 4,
 SGX_CORE_ID_540 = 5,
 SGX_CORE_ID_541 = 6,
 SGX_CORE_ID_543 = 7,
 SGX_CORE_ID_544 = 8,
 SGX_CORE_ID_545 = 9,
 SGX_CORE_ID_554 = 10
} SGX_CORE_ID_TYPE;

typedef struct _SGX_CORE_INFO
{
 SGX_CORE_ID_TYPE eID;
 IMG_UINT32 uiRev;
} SGX_CORE_INFO, *PSGX_CORE_INFO;

typedef struct _SGX_CORE_BUGS
{





 IMG_UINT32 ui32Flags;
} SGX_CORE_BUGS, *PSGX_CORE_BUGS;

typedef struct _SGX_CORE_FEATURES
{





 IMG_UINT32 ui32Flags;
 IMG_UINT32 ui32Flags2;



 IMG_UINT32 ui32NumMutexes;



 IMG_UINT32 ui32NumMonitors;



 IMG_UINT32 ui32TextureStateSize;



 IMG_UINT32 ui32IterationStateSize;



 IMG_UINT32 ui32NumUSEPipes;




 IMG_UINT32 ui32NumProgramCounterBits;



 IMG_UINT32 ui32NumInternalRegisters;




 IMG_UINT32 const* puInvalidSpecialRegistersForNonBitwiseCount;




 IMG_UINT32 const* auInvalidSpecialRegistersForNonBitwise;



 IMG_CHAR const* pszCoreName;
} SGX_CORE_FEATURES, *PSGX_CORE_FEATURES;

typedef struct _SGX_CORE_DESC
{



 SGX_CORE_ID_TYPE eCoreType;




 IMG_UINT32 ui32CoreRevision;



 SGX_CORE_BUGS sBugs;



 const SGX_CORE_FEATURES* psFeatures;
} SGX_CORE_DESC, *PSGX_CORE_DESC;
typedef SGX_CORE_DESC const* PCSGX_CORE_DESC;
#line 769 "hwdefs/sgxfeaturedefs.h" 2
#line 32 "hwdefs/sgxdefs.h" 2
#line 46 "hwdefs/sgxdefs.h"
#line 1 "hwdefs/sgx540defs.h" 1
#line 47 "hwdefs/sgxdefs.h" 2
#line 369 "hwdefs/sgxdefs.h"
#line 1 "hwdefs/sgx540usedefs.h" 1
#line 370 "hwdefs/sgxdefs.h" 2
#line 7656 "hwdefs/sgxdefs.h"
#line 1 "hwdefs/sgxusespecialbankdefs.h" 1
#line 7657 "hwdefs/sgxdefs.h" 2
#line 40 "include4/sgxapi.h" 2





#line 1 "/usr/include/unistd.h" 1 3 4
#line 26 "/usr/include/unistd.h" 3 4
#line 1 "/usr/include/features.h" 1 3 4
#line 313 "/usr/include/features.h" 3 4
#line 1 "/usr/include/bits/predefs.h" 1 3 4
#line 314 "/usr/include/features.h" 2 3 4
#line 346 "/usr/include/features.h" 3 4
#line 1 "/usr/include/sys/cdefs.h" 1 3 4
#line 353 "/usr/include/sys/cdefs.h" 3 4
#line 1 "/usr/include/bits/wordsize.h" 1 3 4
#line 354 "/usr/include/sys/cdefs.h" 2 3 4
#line 347 "/usr/include/features.h" 2 3 4
#line 378 "/usr/include/features.h" 3 4
#line 1 "/usr/include/gnu/stubs.h" 1 3 4



#line 1 "/usr/include/bits/wordsize.h" 1 3 4
#line 5 "/usr/include/gnu/stubs.h" 2 3 4


#line 1 "/usr/include/gnu/stubs-32.h" 1 3 4
#line 8 "/usr/include/gnu/stubs.h" 2 3 4
#line 379 "/usr/include/features.h" 2 3 4
#line 27 "/usr/include/unistd.h" 2 3 4


#line 203 "/usr/include/unistd.h" 3 4
#line 1 "/usr/include/bits/posix_opt.h" 1 3 4
#line 204 "/usr/include/unistd.h" 2 3 4



#line 1 "/usr/include/bits/environments.h" 1 3 4
#line 23 "/usr/include/bits/environments.h" 3 4
#line 1 "/usr/include/bits/wordsize.h" 1 3 4
#line 24 "/usr/include/bits/environments.h" 2 3 4
#line 208 "/usr/include/unistd.h" 2 3 4
#line 218 "/usr/include/unistd.h" 3 4
#line 1 "/usr/include/bits/types.h" 1 3 4
#line 28 "/usr/include/bits/types.h" 3 4
#line 1 "/usr/include/bits/wordsize.h" 1 3 4
#line 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
#line 131 "/usr/include/bits/types.h" 3 4
#line 1 "/usr/include/bits/typesizes.h" 1 3 4
#line 132 "/usr/include/bits/types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef long int __swblk_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;

__extension__ typedef int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
#line 219 "/usr/include/unistd.h" 2 3 4


typedef __ssize_t ssize_t;





#line 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
#line 211 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 3 4
typedef unsigned int size_t;
#line 228 "/usr/include/unistd.h" 2 3 4





typedef __gid_t gid_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
#line 256 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;




typedef __pid_t pid_t;






typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
#line 288 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
#line 331 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__));
#line 350 "/usr/include/unistd.h" 3 4
extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __attribute__ ((__warn_unused_result__));





extern ssize_t write (int __fd, __const void *__buf, size_t __n) __attribute__ ((__warn_unused_result__));
#line 373 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) __attribute__ ((__warn_unused_result__));






extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) __attribute__ ((__warn_unused_result__));
#line 414 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));
#line 429 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__));
#line 441 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);






extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__));






extern int usleep (__useconds_t __useconds);
#line 465 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
#line 493 "/usr/include/unistd.h" 3 4
extern int chdir (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchdir (int __fd) __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));
#line 507 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));
#line 520 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__));




extern int dup (int __fd) __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__));
#line 538 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
#line 558 "/usr/include/unistd.h" 3 4
extern int execv (__const char *__path, char *__const __argv[])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int execle (__const char *__path, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int execl (__const char *__path, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int execvp (__const char *__file, char *__const __argv[])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
#line 593 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));




extern void _exit (int __status) __attribute__ ((__noreturn__));





#line 1 "/usr/include/bits/confname.h" 1 3 4
#line 26 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS

  };
#line 605 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__));




extern __pid_t getpgrp (void) __attribute__ ((__nothrow__));
#line 641 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__));
#line 667 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__));
#line 684 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) __attribute__ ((__nothrow__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));
#line 717 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__));




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__));






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__));




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__));




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__));
#line 773 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));






extern __pid_t vfork (void) __attribute__ ((__nothrow__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int isatty (int __fd) __attribute__ ((__nothrow__));
#line 806 "/usr/include/unistd.h" 3 4
extern int link (__const char *__from, __const char *__to)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
#line 819 "/usr/include/unistd.h" 3 4
extern int symlink (__const char *__from, __const char *__to)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern ssize_t readlink (__const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
#line 842 "/usr/include/unistd.h" 3 4
extern int unlink (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
#line 851 "/usr/include/unistd.h" 3 4
extern int rmdir (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__));






extern char *getlogin (void);
#line 887 "/usr/include/unistd.h" 3 4
#line 1 "/usr/include/getopt.h" 1 3 4
#line 59 "/usr/include/getopt.h" 3 4
extern char *optarg;
#line 73 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
#line 152 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__));







  extern int getopt (int ___argc, char *const *___argv, const char *__shortopts) __asm__ ("" "__posix_getopt") __attribute__ ((__nothrow__));
#line 888 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
#line 973 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__));




extern int getpagesize (void) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__));




extern int truncate (__const char *__file, __off_t __length)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
#line 1020 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));
#line 1040 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__));
#line 1084 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) __attribute__ ((__warn_unused_result__));
#line 1115 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (__const char *__key, __const char *__salt)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__block, int __edflag) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern void swab (__const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));







extern char *ctermid (char *__s) __attribute__ ((__nothrow__));





#line 1 "/usr/include/bits/unistd.h" 1 3 4
#line 24 "/usr/include/bits/unistd.h" 3 4
extern ssize_t __read_chk (int __fd, void *__buf, size_t __nbytes,
      size_t __buflen) __attribute__ ((__warn_unused_result__));
extern ssize_t __read_alias (int __fd, void *__buf, size_t __nbytes) __asm__ ("" "read") __attribute__ ((__warn_unused_result__));

extern ssize_t __read_chk_warn (int __fd, void *__buf, size_t __nbytes, size_t __buflen) __asm__ ("" "__read_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("read called with bigger length than size of " "the destination buffer")));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
read (int __fd, void *__buf, size_t __nbytes)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __read_chk (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));

      if (__nbytes > __builtin_object_size (__buf, 0))
 return __read_chk_warn (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));
    }
  return __read_alias (__fd, __buf, __nbytes);
}


extern ssize_t __pread_chk (int __fd, void *__buf, size_t __nbytes,
       __off_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_chk (int __fd, void *__buf, size_t __nbytes,
         __off64_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_alias (int __fd, void *__buf, size_t __nbytes, __off_t __offset) __asm__ ("" "pread") __attribute__ ((__warn_unused_result__));


extern ssize_t __pread64_alias (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64") __attribute__ ((__warn_unused_result__));


extern ssize_t __pread_chk_warn (int __fd, void *__buf, size_t __nbytes, __off_t __offset, size_t __bufsize) __asm__ ("" "__pread_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread called with bigger length than size of " "the destination buffer")));

extern ssize_t __pread64_chk_warn (int __fd, void *__buf, size_t __nbytes, __off64_t __offset, size_t __bufsize) __asm__ ("" "__pread64_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread64 called with bigger length than size of " "the destination buffer")));



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread (int __fd, void *__buf, size_t __nbytes, __off_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));

      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread_chk_warn (__fd, __buf, __nbytes, __offset,
     __builtin_object_size (__buf, 0));
    }
  return __pread_alias (__fd, __buf, __nbytes, __offset);
}
#line 124 "/usr/include/bits/unistd.h" 3 4
extern ssize_t __readlink_chk (__const char *__restrict __path,
          char *__restrict __buf, size_t __len,
          size_t __buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_alias (__const char *__restrict __path, char *__restrict __buf, size_t __len) __asm__ ("" "readlink") __attribute__ ((__nothrow__))


     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_chk_warn (__const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) __asm__ ("" "__readlink_chk") __attribute__ ((__nothrow__))



     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlink called with bigger length " "than size of destination buffer")));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__nothrow__)) readlink (__const char *__restrict __path, char *__restrict __buf, size_t __len)

{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlink_chk (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if ( __len > __builtin_object_size (__buf, 2 > 1))
 return __readlink_chk_warn (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __readlink_alias (__path, __buf, __len);
}
#line 190 "/usr/include/bits/unistd.h" 3 4
extern char *__getcwd_chk (char *__buf, size_t __size, size_t __buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));
extern char *__getcwd_alias (char *__buf, size_t __size) __asm__ ("" "getcwd") __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));

extern char *__getcwd_chk_warn (char *__buf, size_t __size, size_t __buflen) __asm__ ("" "__getcwd_chk") __attribute__ ((__nothrow__))


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getcwd caller with bigger length than size of " "destination buffer")));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__)) getcwd (char *__buf, size_t __size)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size))
 return __getcwd_chk (__buf, __size, __builtin_object_size (__buf, 2 > 1));

      if (__size > __builtin_object_size (__buf, 2 > 1))
 return __getcwd_chk_warn (__buf, __size, __builtin_object_size (__buf, 2 > 1));
    }
  return __getcwd_alias (__buf, __size);
}


extern char *__getwd_chk (char *__buf, size_t buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern char *__getwd_warn (char *__buf) __asm__ ("" "getwd") __attribute__ ((__nothrow__))
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("please use getcwd instead, as getwd " "doesn't specify buffer size")));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__)) getwd (char *__buf)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    return __getwd_chk (__buf, __builtin_object_size (__buf, 2 > 1));
  return __getwd_warn (__buf);
}


extern size_t __confstr_chk (int __name, char *__buf, size_t __len,
        size_t __buflen) __attribute__ ((__nothrow__));
extern size_t __confstr_alias (int __name, char *__buf, size_t __len) __asm__ ("" "confstr") __attribute__ ((__nothrow__));

extern size_t __confstr_chk_warn (int __name, char *__buf, size_t __len, size_t __buflen) __asm__ ("" "__confstr_chk") __attribute__ ((__nothrow__))


     __attribute__((__warning__ ("confstr called with bigger length than size of destination " "buffer")));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__)) confstr (int __name, char *__buf, size_t __len)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __confstr_chk (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if (__builtin_object_size (__buf, 2 > 1) < __len)
 return __confstr_chk_warn (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __confstr_alias (__name, __buf, __len);
}


extern int __getgroups_chk (int __size, __gid_t __list[], size_t __listlen)
     __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));
extern int __getgroups_alias (int __size, __gid_t __list[]) __asm__ ("" "getgroups") __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));

extern int __getgroups_chk_warn (int __size, __gid_t __list[], size_t __listlen) __asm__ ("" "__getgroups_chk") __attribute__ ((__nothrow__))


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getgroups called with bigger group count than what " "can fit into destination buffer")));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__)) getgroups (int __size, __gid_t __list[])
{
  if (__builtin_object_size (__list, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size) || __size < 0)
 return __getgroups_chk (__size, __list, __builtin_object_size (__list, 2 > 1));

      if (__size * sizeof (__gid_t) > __builtin_object_size (__list, 2 > 1))
 return __getgroups_chk_warn (__size, __list, __builtin_object_size (__list, 2 > 1));
    }
  return __getgroups_alias (__size, __list);
}


extern int __ttyname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_alias (int __fd, char *__buf, size_t __buflen) __asm__ ("" "ttyname_r") __attribute__ ((__nothrow__))

     __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__ttyname_r_chk") __attribute__ ((__nothrow__))


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ttyname_r called with bigger buflen than " "size of destination buffer")));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__)) ttyname_r (int __fd, char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ttyname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ttyname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ttyname_r_alias (__fd, __buf, __buflen);
}
#line 334 "/usr/include/bits/unistd.h" 3 4
extern int __gethostname_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern int __gethostname_alias (char *__buf, size_t __buflen) __asm__ ("" "gethostname") __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));

extern int __gethostname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__gethostname_chk") __attribute__ ((__nothrow__))


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("gethostname called with bigger buflen than " "size of destination buffer")));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__)) gethostname (char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __gethostname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __gethostname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __gethostname_alias (__buf, __buflen);
}
#line 1151 "/usr/include/unistd.h" 2 3 4



#line 46 "include4/sgxapi.h" 2




#line 1 "include4/sgxapi_km.h" 1
#line 194 "include4/sgxapi_km.h"
typedef struct _PVRSRV_SGX_HWPERF_CB_ENTRY_
{
 IMG_UINT32 ui32FrameNo;
 IMG_UINT32 ui32PID;
 IMG_UINT32 ui32RTData;
 IMG_UINT32 ui32Type;
 IMG_UINT32 ui32Ordinal;
 IMG_UINT32 ui32Info;
 IMG_UINT32 ui32Clocksx16;

 IMG_UINT32 ui32Counters[(1)][9];
 IMG_UINT32 ui32MiscCounters[(1)][8];
} PVRSRV_SGX_HWPERF_CB_ENTRY;





typedef struct _CTL_STATUS_
{
 IMG_DEV_VIRTADDR sStatusDevAddr;
 IMG_UINT32 ui32StatusValue;
} CTL_STATUS;





typedef enum _SGX_MISC_INFO_REQUEST_
{
 SGX_MISC_INFO_REQUEST_CLOCKSPEED = 0,
 SGX_MISC_INFO_REQUEST_SGXREV,
 SGX_MISC_INFO_REQUEST_DRIVER_SGXREV,




 SGX_MISC_INFO_REQUEST_SET_HWPERF_STATUS,





 SGX_MISC_INFO_DUMP_DEBUG_INFO,
 SGX_MISC_INFO_PANIC,
 SGX_MISC_INFO_REQUEST_SPM,
 SGX_MISC_INFO_REQUEST_ACTIVEPOWER,
 SGX_MISC_INFO_REQUEST_LOCKUPS,
 SGX_MISC_INFO_REQUEST_FORCE_I16 = 0x7fff
} SGX_MISC_INFO_REQUEST;







typedef struct _PVRSRV_SGX_MISCINFO_FEATURES
{
 IMG_UINT32 ui32CoreRev;
 IMG_UINT32 ui32CoreID;
 IMG_UINT32 ui32DDKVersion;
 IMG_UINT32 ui32DDKBuild;
 IMG_UINT32 ui32CoreIdSW;
 IMG_UINT32 ui32CoreRevSW;
 IMG_UINT32 ui32BuildOptions;







} PVRSRV_SGX_MISCINFO_FEATURES;





typedef struct _PVRSRV_SGX_MISCINFO_LOCKUPS
{
 IMG_UINT32 ui32HostDetectedLockups;
 IMG_UINT32 ui32uKernelDetectedLockups;
} PVRSRV_SGX_MISCINFO_LOCKUPS;





typedef struct _PVRSRV_SGX_MISCINFO_ACTIVEPOWER
{
 IMG_UINT32 ui32NumActivePowerEvents;
} PVRSRV_SGX_MISCINFO_ACTIVEPOWER;





typedef struct _PVRSRV_SGX_MISCINFO_SPM
{
 IMG_HANDLE hRTDataSet;
 IMG_UINT32 ui32NumOutOfMemSignals;
 IMG_UINT32 ui32NumSPMRenders;
} PVRSRV_SGX_MISCINFO_SPM;
#line 338 "include4/sgxapi_km.h"
typedef struct _PVRSRV_SGX_MISCINFO_SET_HWPERF_STATUS
{

 IMG_UINT32 ui32NewHWPerfStatus;
#line 350 "include4/sgxapi_km.h"
 IMG_UINT32 ui32PerfGroup;

} PVRSRV_SGX_MISCINFO_SET_HWPERF_STATUS;






typedef struct _SGX_MISC_INFO_
{
 SGX_MISC_INFO_REQUEST eRequest;
 IMG_UINT32 ui32Padding;





 union
 {
  IMG_UINT32 reserved;
  PVRSRV_SGX_MISCINFO_FEATURES sSGXFeatures;
  IMG_UINT32 ui32SGXClockSpeed;
  PVRSRV_SGX_MISCINFO_ACTIVEPOWER sActivePower;
  PVRSRV_SGX_MISCINFO_LOCKUPS sLockups;
  PVRSRV_SGX_MISCINFO_SPM sSPM;



  PVRSRV_SGX_MISCINFO_SET_HWPERF_STATUS sSetHWPerfStatus;
 } uData;
} SGX_MISC_INFO;
#line 397 "include4/sgxapi_km.h"
typedef struct _SGX_KICKTA_DUMPBITMAP_
{
 IMG_DEV_VIRTADDR sDevBaseAddr;
 IMG_UINT32 ui32Flags;
 IMG_UINT32 ui32Width;
 IMG_UINT32 ui32Height;
 IMG_UINT32 ui32Stride;
 IMG_UINT32 ui32PDUMPFormat;
 IMG_UINT32 ui32BytesPP;
 IMG_CHAR pszName[256];
} SGX_KICKTA_DUMPBITMAP, *PSGX_KICKTA_DUMPBITMAP;







typedef struct _PVRSRV_SGX_PDUMP_CONTEXT_
{

 IMG_UINT32 ui32CacheControl;

} PVRSRV_SGX_PDUMP_CONTEXT;



typedef struct _SGX_KICKTA_DUMP_ROFF_
{
 IMG_HANDLE hKernelMemInfo;
 IMG_UINT32 uiAllocIndex;
 IMG_UINT32 ui32Offset;
 IMG_UINT32 ui32Value;
 IMG_PCHAR pszName;
} SGX_KICKTA_DUMP_ROFF, *PSGX_KICKTA_DUMP_ROFF;





typedef struct _SGX_KICKTA_DUMP_BUFFER_

{
 IMG_UINT32 ui32SpaceUsed;
 IMG_UINT32 ui32Start;
 IMG_UINT32 ui32End;
 IMG_UINT32 ui32BufferSize;
 IMG_UINT32 ui32BackEndLength;
 IMG_UINT32 uiAllocIndex;
 IMG_HANDLE hKernelMemInfo;
 IMG_PVOID pvLinAddr;

 IMG_HANDLE hCtrlKernelMemInfo;

 IMG_DEV_VIRTADDR sCtrlDevVAddr;


 IMG_PCHAR pszName;



} SGX_KICKTA_DUMP_BUFFER, *PSGX_KICKTA_DUMP_BUFFER;
#line 51 "include4/sgxapi.h" 2

#line 1 "include4/sgxapiperf.h" 1
#line 41 "include4/sgxapiperf.h"
#line 1 "include4/services.h" 1
#line 41 "include4/services.h"
#line 1 "include4/servicesext.h" 1
#line 51 "include4/servicesext.h"
typedef enum _PVRSRV_ERROR_
{
 PVRSRV_OK = 0,
 PVRSRV_ERROR_OUT_OF_MEMORY,
 PVRSRV_ERROR_TOO_FEW_BUFFERS,
 PVRSRV_ERROR_INVALID_PARAMS,
 PVRSRV_ERROR_INIT_FAILURE,
 PVRSRV_ERROR_CANT_REGISTER_CALLBACK,
 PVRSRV_ERROR_INVALID_DEVICE,
 PVRSRV_ERROR_NOT_OWNER,
 PVRSRV_ERROR_BAD_MAPPING,
 PVRSRV_ERROR_TIMEOUT,
 PVRSRV_ERROR_FLIP_CHAIN_EXISTS,
 PVRSRV_ERROR_INVALID_SWAPINTERVAL,
 PVRSRV_ERROR_SCENE_INVALID,
 PVRSRV_ERROR_STREAM_ERROR,
 PVRSRV_ERROR_FAILED_DEPENDENCIES,
 PVRSRV_ERROR_CMD_NOT_PROCESSED,
 PVRSRV_ERROR_CMD_TOO_BIG,
 PVRSRV_ERROR_DEVICE_REGISTER_FAILED,
 PVRSRV_ERROR_TOOMANYBUFFERS,
 PVRSRV_ERROR_NOT_SUPPORTED,
 PVRSRV_ERROR_PROCESSING_BLOCKED,

 PVRSRV_ERROR_CANNOT_FLUSH_QUEUE,
 PVRSRV_ERROR_CANNOT_GET_QUEUE_SPACE,
 PVRSRV_ERROR_CANNOT_GET_RENDERDETAILS,
 PVRSRV_ERROR_RETRY,

 PVRSRV_ERROR_DDK_VERSION_MISMATCH,
 PVRSRV_ERROR_BUILD_MISMATCH,
 PVRSRV_ERROR_CORE_REVISION_MISMATCH,

 PVRSRV_ERROR_UPLOAD_TOO_BIG,

 PVRSRV_ERROR_INVALID_FLAGS,
 PVRSRV_ERROR_FAILED_TO_REGISTER_PROCESS,

 PVRSRV_ERROR_UNABLE_TO_LOAD_LIBRARY,
 PVRSRV_ERROR_UNABLE_GET_FUNC_ADDR,
 PVRSRV_ERROR_UNLOAD_LIBRARY_FAILED,

 PVRSRV_ERROR_BRIDGE_CALL_FAILED,
 PVRSRV_ERROR_IOCTL_CALL_FAILED,

    PVRSRV_ERROR_MMU_CONTEXT_NOT_FOUND,
 PVRSRV_ERROR_BUFFER_DEVICE_NOT_FOUND,
 PVRSRV_ERROR_BUFFER_DEVICE_ALREADY_PRESENT,

 PVRSRV_ERROR_PCI_DEVICE_NOT_FOUND,
 PVRSRV_ERROR_PCI_CALL_FAILED,
 PVRSRV_ERROR_PCI_REGION_TOO_SMALL,
 PVRSRV_ERROR_PCI_REGION_UNAVAILABLE,
 PVRSRV_ERROR_BAD_REGION_SIZE_MISMATCH,

 PVRSRV_ERROR_REGISTER_BASE_NOT_SET,

    PVRSRV_ERROR_BM_BAD_SHAREMEM_HANDLE,

 PVRSRV_ERROR_FAILED_TO_ALLOC_USER_MEM,
 PVRSRV_ERROR_FAILED_TO_ALLOC_VP_MEMORY,
 PVRSRV_ERROR_FAILED_TO_MAP_SHARED_PBDESC,
 PVRSRV_ERROR_FAILED_TO_GET_PHYS_ADDR,

 PVRSRV_ERROR_FAILED_TO_ALLOC_VIRT_MEMORY,
 PVRSRV_ERROR_FAILED_TO_COPY_VIRT_MEMORY,

 PVRSRV_ERROR_FAILED_TO_ALLOC_PAGES,
 PVRSRV_ERROR_FAILED_TO_FREE_PAGES,
 PVRSRV_ERROR_FAILED_TO_COPY_PAGES,
 PVRSRV_ERROR_UNABLE_TO_LOCK_PAGES,
 PVRSRV_ERROR_UNABLE_TO_UNLOCK_PAGES,
 PVRSRV_ERROR_STILL_MAPPED,
 PVRSRV_ERROR_MAPPING_NOT_FOUND,
 PVRSRV_ERROR_PHYS_ADDRESS_EXCEEDS_32BIT,
 PVRSRV_ERROR_FAILED_TO_MAP_PAGE_TABLE,

 PVRSRV_ERROR_INVALID_SEGMENT_BLOCK,
 PVRSRV_ERROR_INVALID_SGXDEVDATA,
 PVRSRV_ERROR_INVALID_DEVINFO,
 PVRSRV_ERROR_INVALID_MEMINFO,
 PVRSRV_ERROR_INVALID_MISCINFO,
 PVRSRV_ERROR_UNKNOWN_IOCTL,
 PVRSRV_ERROR_INVALID_CONTEXT,
 PVRSRV_ERROR_UNABLE_TO_DESTROY_CONTEXT,
 PVRSRV_ERROR_INVALID_HEAP,
 PVRSRV_ERROR_INVALID_KERNELINFO,
 PVRSRV_ERROR_UNKNOWN_POWER_STATE,
 PVRSRV_ERROR_INVALID_HANDLE_TYPE,
 PVRSRV_ERROR_INVALID_WRAP_TYPE,
 PVRSRV_ERROR_INVALID_PHYS_ADDR,
 PVRSRV_ERROR_INVALID_CPU_ADDR,
 PVRSRV_ERROR_INVALID_HEAPINFO,
 PVRSRV_ERROR_INVALID_PERPROC,
 PVRSRV_ERROR_FAILED_TO_RETRIEVE_HEAPINFO,
 PVRSRV_ERROR_INVALID_MAP_REQUEST,
 PVRSRV_ERROR_INVALID_UNMAP_REQUEST,
 PVRSRV_ERROR_UNABLE_TO_FIND_MAPPING_HEAP,
 PVRSRV_ERROR_MAPPING_STILL_IN_USE,

 PVRSRV_ERROR_EXCEEDED_HW_LIMITS,
 PVRSRV_ERROR_NO_STAGING_BUFFER_ALLOCATED,

 PVRSRV_ERROR_UNABLE_TO_CREATE_PERPROC_AREA,
 PVRSRV_ERROR_UNABLE_TO_CREATE_EVENT,
 PVRSRV_ERROR_UNABLE_TO_ENABLE_EVENT,
 PVRSRV_ERROR_UNABLE_TO_REGISTER_EVENT,
 PVRSRV_ERROR_UNABLE_TO_DESTROY_EVENT,
 PVRSRV_ERROR_UNABLE_TO_CREATE_THREAD,
 PVRSRV_ERROR_UNABLE_TO_CLOSE_THREAD,
 PVRSRV_ERROR_THREAD_READ_ERROR,
 PVRSRV_ERROR_UNABLE_TO_REGISTER_ISR_HANDLER,
 PVRSRV_ERROR_UNABLE_TO_INSTALL_ISR,
 PVRSRV_ERROR_UNABLE_TO_UNINSTALL_ISR,
 PVRSRV_ERROR_ISR_ALREADY_INSTALLED,
 PVRSRV_ERROR_ISR_NOT_INSTALLED,
 PVRSRV_ERROR_UNABLE_TO_INITIALISE_INTERRUPT,
 PVRSRV_ERROR_UNABLE_TO_RETRIEVE_INFO,
 PVRSRV_ERROR_UNABLE_TO_DO_BACKWARDS_BLIT,
 PVRSRV_ERROR_UNABLE_TO_CLOSE_SERVICES,
 PVRSRV_ERROR_UNABLE_TO_REGISTER_CONTEXT,
 PVRSRV_ERROR_UNABLE_TO_REGISTER_RESOURCE,
 PVRSRV_ERROR_UNABLE_TO_CLOSE_HANDLE,

 PVRSRV_ERROR_INVALID_CCB_COMMAND,

 PVRSRV_ERROR_UNABLE_TO_LOCK_RESOURCE,
 PVRSRV_ERROR_INVALID_LOCK_ID,
 PVRSRV_ERROR_RESOURCE_NOT_LOCKED,

 PVRSRV_ERROR_FLIP_FAILED,
 PVRSRV_ERROR_UNBLANK_DISPLAY_FAILED,

 PVRSRV_ERROR_TIMEOUT_POLLING_FOR_VALUE,

 PVRSRV_ERROR_CREATE_RENDER_CONTEXT_FAILED,
 PVRSRV_ERROR_UNKNOWN_PRIMARY_FRAG,
 PVRSRV_ERROR_UNEXPECTED_SECONDARY_FRAG,
 PVRSRV_ERROR_UNEXPECTED_PRIMARY_FRAG,

 PVRSRV_ERROR_UNABLE_TO_INSERT_FENCE_ID,

 PVRSRV_ERROR_BLIT_SETUP_FAILED,

 PVRSRV_ERROR_PDUMP_NOT_AVAILABLE,
 PVRSRV_ERROR_PDUMP_BUFFER_FULL,
 PVRSRV_ERROR_PDUMP_BUF_OVERFLOW,
 PVRSRV_ERROR_PDUMP_NOT_ACTIVE,
 PVRSRV_ERROR_INCOMPLETE_LINE_OVERLAPS_PAGES,

 PVRSRV_ERROR_MUTEX_DESTROY_FAILED,
 PVRSRV_ERROR_MUTEX_INTERRUPTIBLE_ERROR,

 PVRSRV_ERROR_INSUFFICIENT_SCRIPT_SPACE,
 PVRSRV_ERROR_INSUFFICIENT_SPACE_FOR_COMMAND,

 PVRSRV_ERROR_PROCESS_NOT_INITIALISED,
 PVRSRV_ERROR_PROCESS_NOT_FOUND,
 PVRSRV_ERROR_SRV_CONNECT_FAILED,
 PVRSRV_ERROR_SRV_DISCONNECT_FAILED,
 PVRSRV_ERROR_DEINT_PHASE_FAILED,
 PVRSRV_ERROR_INIT2_PHASE_FAILED,

 PVRSRV_ERROR_UNABLE_TO_FIND_RESOURCE,

 PVRSRV_ERROR_NO_DC_DEVICES_FOUND,
 PVRSRV_ERROR_UNABLE_TO_OPEN_DC_DEVICE,
 PVRSRV_ERROR_UNABLE_TO_REMOVE_DEVICE,
 PVRSRV_ERROR_NO_DEVICEDATA_FOUND,
 PVRSRV_ERROR_NO_DEVICENODE_FOUND,
 PVRSRV_ERROR_NO_CLIENTNODE_FOUND,
 PVRSRV_ERROR_FAILED_TO_PROCESS_QUEUE,

 PVRSRV_ERROR_UNABLE_TO_INIT_TASK,
 PVRSRV_ERROR_UNABLE_TO_SCHEDULE_TASK,
 PVRSRV_ERROR_UNABLE_TO_KILL_TASK,

 PVRSRV_ERROR_UNABLE_TO_ENABLE_TIMER,
 PVRSRV_ERROR_UNABLE_TO_DISABLE_TIMER,
 PVRSRV_ERROR_UNABLE_TO_REMOVE_TIMER,

 PVRSRV_ERROR_UNKNOWN_PIXEL_FORMAT,
 PVRSRV_ERROR_UNKNOWN_SCRIPT_OPERATION,

 PVRSRV_ERROR_HANDLE_INDEX_OUT_OF_RANGE,
 PVRSRV_ERROR_HANDLE_NOT_ALLOCATED,
 PVRSRV_ERROR_HANDLE_TYPE_MISMATCH,
 PVRSRV_ERROR_UNABLE_TO_ADD_HANDLE,
 PVRSRV_ERROR_HANDLE_NOT_SHAREABLE,
 PVRSRV_ERROR_HANDLE_NOT_FOUND,
 PVRSRV_ERROR_INVALID_SUBHANDLE,
 PVRSRV_ERROR_HANDLE_BATCH_IN_USE,
 PVRSRV_ERROR_HANDLE_BATCH_COMMIT_FAILURE,

 PVRSRV_ERROR_UNABLE_TO_CREATE_HASH_TABLE,
 PVRSRV_ERROR_INSERT_HASH_TABLE_DATA_FAILED,

 PVRSRV_ERROR_UNSUPPORTED_BACKING_STORE,
 PVRSRV_ERROR_UNABLE_TO_DESTROY_BM_HEAP,

 PVRSRV_ERROR_UNKNOWN_INIT_SERVER_STATE,

 PVRSRV_ERROR_NO_FREE_DEVICEIDS_AVALIABLE,
 PVRSRV_ERROR_INVALID_DEVICEID,
 PVRSRV_ERROR_DEVICEID_NOT_FOUND,

 PVRSRV_ERROR_MEMORY_TEST_FAILED,
 PVRSRV_ERROR_CPUPADDR_TEST_FAILED,
 PVRSRV_ERROR_COPY_TEST_FAILED,

 PVRSRV_ERROR_SEMAPHORE_NOT_INITIALISED,

 PVRSRV_ERROR_UNABLE_TO_RELEASE_CLOCK,
 PVRSRV_ERROR_CLOCK_REQUEST_FAILED,
 PVRSRV_ERROR_DISABLE_CLOCK_FAILURE,
 PVRSRV_ERROR_UNABLE_TO_SET_CLOCK_RATE,
 PVRSRV_ERROR_UNABLE_TO_ROUND_CLOCK_RATE,
 PVRSRV_ERROR_UNABLE_TO_ENABLE_CLOCK,
 PVRSRV_ERROR_UNABLE_TO_GET_CLOCK,
 PVRSRV_ERROR_UNABLE_TO_GET_PARENT_CLOCK,
 PVRSRV_ERROR_UNABLE_TO_GET_SYSTEM_CLOCK,

 PVRSRV_ERROR_UNKNOWN_SGL_ERROR,

 PVRSRV_ERROR_SYSTEM_POWER_CHANGE_FAILURE,
 PVRSRV_ERROR_DEVICE_POWER_CHANGE_FAILURE,

 PVRSRV_ERROR_BAD_SYNC_STATE,

 PVRSRV_ERROR_CACHEOP_FAILED,

 PVRSRV_ERROR_FORCE_I32 = 0x7fffffff

} PVRSRV_ERROR;






typedef enum _PVRSRV_DEVICE_CLASS_
{
 PVRSRV_DEVICE_CLASS_3D = 0 ,
 PVRSRV_DEVICE_CLASS_DISPLAY = 1 ,
 PVRSRV_DEVICE_CLASS_BUFFER = 2 ,
 PVRSRV_DEVICE_CLASS_VIDEO = 3 ,

 PVRSRV_DEVICE_CLASS_FORCE_I32 = 0x7fffffff

} PVRSRV_DEVICE_CLASS;






typedef enum _PVRSRV_SYS_POWER_STATE_
{
 PVRSRV_SYS_POWER_STATE_Unspecified = -1,
 PVRSRV_SYS_POWER_STATE_D0 = 0,
 PVRSRV_SYS_POWER_STATE_D1 = 1,
 PVRSRV_SYS_POWER_STATE_D2 = 2,
 PVRSRV_SYS_POWER_STATE_D3 = 3,
 PVRSRV_SYS_POWER_STATE_D4 = 4,

 PVRSRV_SYS_POWER_STATE_FORCE_I32 = 0x7fffffff

} PVRSRV_SYS_POWER_STATE, *PPVRSRV_SYS_POWER_STATE;


typedef enum _PVRSRV_DEV_POWER_STATE_
{
 PVRSRV_DEV_POWER_STATE_DEFAULT = -1,
 PVRSRV_DEV_POWER_STATE_ON = 0,
 PVRSRV_DEV_POWER_STATE_IDLE = 1,
 PVRSRV_DEV_POWER_STATE_OFF = 2,

 PVRSRV_DEV_POWER_STATE_FORCE_I32 = 0x7fffffff

} PVRSRV_DEV_POWER_STATE, *PPVRSRV_DEV_POWER_STATE;



typedef PVRSRV_ERROR (*PFN_PRE_POWER) (IMG_HANDLE hDevHandle,
            PVRSRV_DEV_POWER_STATE eNewPowerState,
            PVRSRV_DEV_POWER_STATE eCurrentPowerState);
typedef PVRSRV_ERROR (*PFN_POST_POWER) (IMG_HANDLE hDevHandle,
          PVRSRV_DEV_POWER_STATE eNewPowerState,
          PVRSRV_DEV_POWER_STATE eCurrentPowerState);


typedef PVRSRV_ERROR (*PFN_PRE_CLOCKSPEED_CHANGE) (IMG_HANDLE hDevHandle,
               IMG_BOOL bIdleDevice,
               PVRSRV_DEV_POWER_STATE eCurrentPowerState);
typedef PVRSRV_ERROR (*PFN_POST_CLOCKSPEED_CHANGE) (IMG_HANDLE hDevHandle,
             IMG_BOOL bIdleDevice,
             PVRSRV_DEV_POWER_STATE eCurrentPowerState);
#line 360 "include4/servicesext.h"
typedef enum _PVRSRV_PIXEL_FORMAT_ {

 PVRSRV_PIXEL_FORMAT_UNKNOWN = 0,
 PVRSRV_PIXEL_FORMAT_RGB565 = 1,
 PVRSRV_PIXEL_FORMAT_RGB555 = 2,
 PVRSRV_PIXEL_FORMAT_RGB888 = 3,
 PVRSRV_PIXEL_FORMAT_BGR888 = 4,
 PVRSRV_PIXEL_FORMAT_GREY_SCALE = 8,
 PVRSRV_PIXEL_FORMAT_PAL12 = 13,
 PVRSRV_PIXEL_FORMAT_PAL8 = 14,
 PVRSRV_PIXEL_FORMAT_PAL4 = 15,
 PVRSRV_PIXEL_FORMAT_PAL2 = 16,
 PVRSRV_PIXEL_FORMAT_PAL1 = 17,
 PVRSRV_PIXEL_FORMAT_ARGB1555 = 18,
 PVRSRV_PIXEL_FORMAT_ARGB4444 = 19,
 PVRSRV_PIXEL_FORMAT_ARGB8888 = 20,
 PVRSRV_PIXEL_FORMAT_ABGR8888 = 21,
 PVRSRV_PIXEL_FORMAT_YV12 = 22,
 PVRSRV_PIXEL_FORMAT_I420 = 23,
    PVRSRV_PIXEL_FORMAT_IMC2 = 25,
 PVRSRV_PIXEL_FORMAT_XRGB8888 = 26,
 PVRSRV_PIXEL_FORMAT_XBGR8888 = 27,
 PVRSRV_PIXEL_FORMAT_BGRA8888 = 28,
 PVRSRV_PIXEL_FORMAT_XRGB4444 = 29,
 PVRSRV_PIXEL_FORMAT_ARGB8332 = 30,
 PVRSRV_PIXEL_FORMAT_A2RGB10 = 31,
 PVRSRV_PIXEL_FORMAT_A2BGR10 = 32,
 PVRSRV_PIXEL_FORMAT_P8 = 33,
 PVRSRV_PIXEL_FORMAT_L8 = 34,
 PVRSRV_PIXEL_FORMAT_A8L8 = 35,
 PVRSRV_PIXEL_FORMAT_A4L4 = 36,
 PVRSRV_PIXEL_FORMAT_L16 = 37,
 PVRSRV_PIXEL_FORMAT_L6V5U5 = 38,
 PVRSRV_PIXEL_FORMAT_V8U8 = 39,
 PVRSRV_PIXEL_FORMAT_V16U16 = 40,
 PVRSRV_PIXEL_FORMAT_QWVU8888 = 41,
 PVRSRV_PIXEL_FORMAT_XLVU8888 = 42,
 PVRSRV_PIXEL_FORMAT_QWVU16 = 43,
 PVRSRV_PIXEL_FORMAT_D16 = 44,
 PVRSRV_PIXEL_FORMAT_D24S8 = 45,
 PVRSRV_PIXEL_FORMAT_D24X8 = 46,


 PVRSRV_PIXEL_FORMAT_ABGR16 = 47,
 PVRSRV_PIXEL_FORMAT_ABGR16F = 48,
 PVRSRV_PIXEL_FORMAT_ABGR32 = 49,
 PVRSRV_PIXEL_FORMAT_ABGR32F = 50,
 PVRSRV_PIXEL_FORMAT_B10GR11 = 51,
 PVRSRV_PIXEL_FORMAT_GR88 = 52,
 PVRSRV_PIXEL_FORMAT_BGR32 = 53,
 PVRSRV_PIXEL_FORMAT_GR32 = 54,
 PVRSRV_PIXEL_FORMAT_E5BGR9 = 55,


 PVRSRV_PIXEL_FORMAT_RESERVED1 = 56,
 PVRSRV_PIXEL_FORMAT_RESERVED2 = 57,
 PVRSRV_PIXEL_FORMAT_RESERVED3 = 58,
 PVRSRV_PIXEL_FORMAT_RESERVED4 = 59,
 PVRSRV_PIXEL_FORMAT_RESERVED5 = 60,


 PVRSRV_PIXEL_FORMAT_R8G8_B8G8 = 61,
 PVRSRV_PIXEL_FORMAT_G8R8_G8B8 = 62,


 PVRSRV_PIXEL_FORMAT_NV11 = 63,
 PVRSRV_PIXEL_FORMAT_NV12 = 64,


 PVRSRV_PIXEL_FORMAT_YUY2 = 65,
 PVRSRV_PIXEL_FORMAT_YUV420 = 66,
 PVRSRV_PIXEL_FORMAT_YUV444 = 67,
 PVRSRV_PIXEL_FORMAT_VUY444 = 68,
 PVRSRV_PIXEL_FORMAT_YUYV = 69,
 PVRSRV_PIXEL_FORMAT_YVYU = 70,
 PVRSRV_PIXEL_FORMAT_UYVY = 71,
 PVRSRV_PIXEL_FORMAT_VYUY = 72,

 PVRSRV_PIXEL_FORMAT_FOURCC_ORG_UYVY = 73,
 PVRSRV_PIXEL_FORMAT_FOURCC_ORG_YUYV = 74,
 PVRSRV_PIXEL_FORMAT_FOURCC_ORG_YVYU = 75,
 PVRSRV_PIXEL_FORMAT_FOURCC_ORG_VYUY = 76,
 PVRSRV_PIXEL_FORMAT_FOURCC_ORG_AYUV = 77,


 PVRSRV_PIXEL_FORMAT_A32B32G32R32 = 78,
 PVRSRV_PIXEL_FORMAT_A32B32G32R32F = 79,
 PVRSRV_PIXEL_FORMAT_A32B32G32R32_UINT = 80,
 PVRSRV_PIXEL_FORMAT_A32B32G32R32_SINT = 81,


 PVRSRV_PIXEL_FORMAT_B32G32R32 = 82,
 PVRSRV_PIXEL_FORMAT_B32G32R32F = 83,
 PVRSRV_PIXEL_FORMAT_B32G32R32_UINT = 84,
 PVRSRV_PIXEL_FORMAT_B32G32R32_SINT = 85,


 PVRSRV_PIXEL_FORMAT_G32R32 = 86,
 PVRSRV_PIXEL_FORMAT_G32R32F = 87,
 PVRSRV_PIXEL_FORMAT_G32R32_UINT = 88,
 PVRSRV_PIXEL_FORMAT_G32R32_SINT = 89,


 PVRSRV_PIXEL_FORMAT_D32F = 90,
 PVRSRV_PIXEL_FORMAT_R32 = 91,
 PVRSRV_PIXEL_FORMAT_R32F = 92,
 PVRSRV_PIXEL_FORMAT_R32_UINT = 93,
 PVRSRV_PIXEL_FORMAT_R32_SINT = 94,


 PVRSRV_PIXEL_FORMAT_A16B16G16R16 = 95,
 PVRSRV_PIXEL_FORMAT_A16B16G16R16F = 96,
 PVRSRV_PIXEL_FORMAT_A16B16G16R16_SINT = 97,
 PVRSRV_PIXEL_FORMAT_A16B16G16R16_SNORM = 98,
 PVRSRV_PIXEL_FORMAT_A16B16G16R16_UINT = 99,
 PVRSRV_PIXEL_FORMAT_A16B16G16R16_UNORM = 100,


 PVRSRV_PIXEL_FORMAT_G16R16 = 101,
 PVRSRV_PIXEL_FORMAT_G16R16F = 102,
 PVRSRV_PIXEL_FORMAT_G16R16_UINT = 103,
 PVRSRV_PIXEL_FORMAT_G16R16_UNORM = 104,
 PVRSRV_PIXEL_FORMAT_G16R16_SINT = 105,
 PVRSRV_PIXEL_FORMAT_G16R16_SNORM = 106,


 PVRSRV_PIXEL_FORMAT_R16 = 107,
 PVRSRV_PIXEL_FORMAT_R16F = 108,
 PVRSRV_PIXEL_FORMAT_R16_UINT = 109,
 PVRSRV_PIXEL_FORMAT_R16_UNORM = 110,
 PVRSRV_PIXEL_FORMAT_R16_SINT = 111,
 PVRSRV_PIXEL_FORMAT_R16_SNORM = 112,


 PVRSRV_PIXEL_FORMAT_X8R8G8B8 = 113,
 PVRSRV_PIXEL_FORMAT_X8R8G8B8_UNORM = 114,
 PVRSRV_PIXEL_FORMAT_X8R8G8B8_UNORM_SRGB = 115,

 PVRSRV_PIXEL_FORMAT_A8R8G8B8 = 116,
 PVRSRV_PIXEL_FORMAT_A8R8G8B8_UNORM = 117,
 PVRSRV_PIXEL_FORMAT_A8R8G8B8_UNORM_SRGB = 118,

 PVRSRV_PIXEL_FORMAT_A8B8G8R8 = 119,
 PVRSRV_PIXEL_FORMAT_A8B8G8R8_UINT = 120,
 PVRSRV_PIXEL_FORMAT_A8B8G8R8_UNORM = 121,
 PVRSRV_PIXEL_FORMAT_A8B8G8R8_UNORM_SRGB = 122,
 PVRSRV_PIXEL_FORMAT_A8B8G8R8_SINT = 123,
 PVRSRV_PIXEL_FORMAT_A8B8G8R8_SNORM = 124,


 PVRSRV_PIXEL_FORMAT_G8R8 = 125,
 PVRSRV_PIXEL_FORMAT_G8R8_UINT = 126,
 PVRSRV_PIXEL_FORMAT_G8R8_UNORM = 127,
 PVRSRV_PIXEL_FORMAT_G8R8_SINT = 128,
 PVRSRV_PIXEL_FORMAT_G8R8_SNORM = 129,


 PVRSRV_PIXEL_FORMAT_A8 = 130,
 PVRSRV_PIXEL_FORMAT_R8 = 131,
 PVRSRV_PIXEL_FORMAT_R8_UINT = 132,
 PVRSRV_PIXEL_FORMAT_R8_UNORM = 133,
 PVRSRV_PIXEL_FORMAT_R8_SINT = 134,
 PVRSRV_PIXEL_FORMAT_R8_SNORM = 135,


 PVRSRV_PIXEL_FORMAT_A2B10G10R10 = 136,
 PVRSRV_PIXEL_FORMAT_A2B10G10R10_UNORM = 137,
 PVRSRV_PIXEL_FORMAT_A2B10G10R10_UINT = 138,


 PVRSRV_PIXEL_FORMAT_B10G11R11 = 139,
 PVRSRV_PIXEL_FORMAT_B10G11R11F = 140,


 PVRSRV_PIXEL_FORMAT_X24G8R32 = 141,
 PVRSRV_PIXEL_FORMAT_G8R24 = 142,
 PVRSRV_PIXEL_FORMAT_X8R24 = 143,
 PVRSRV_PIXEL_FORMAT_E5B9G9R9 = 144,
 PVRSRV_PIXEL_FORMAT_R1 = 145,

 PVRSRV_PIXEL_FORMAT_RESERVED6 = 146,
 PVRSRV_PIXEL_FORMAT_RESERVED7 = 147,
 PVRSRV_PIXEL_FORMAT_RESERVED8 = 148,
 PVRSRV_PIXEL_FORMAT_RESERVED9 = 149,
 PVRSRV_PIXEL_FORMAT_RESERVED10 = 150,
 PVRSRV_PIXEL_FORMAT_RESERVED11 = 151,
 PVRSRV_PIXEL_FORMAT_RESERVED12 = 152,
 PVRSRV_PIXEL_FORMAT_RESERVED13 = 153,
 PVRSRV_PIXEL_FORMAT_RESERVED14 = 154,
 PVRSRV_PIXEL_FORMAT_RESERVED15 = 155,
 PVRSRV_PIXEL_FORMAT_RESERVED16 = 156,
 PVRSRV_PIXEL_FORMAT_RESERVED17 = 157,
 PVRSRV_PIXEL_FORMAT_RESERVED18 = 158,
 PVRSRV_PIXEL_FORMAT_RESERVED19 = 159,
 PVRSRV_PIXEL_FORMAT_RESERVED20 = 160,


 PVRSRV_PIXEL_FORMAT_UBYTE4 = 161,
 PVRSRV_PIXEL_FORMAT_SHORT4 = 162,
 PVRSRV_PIXEL_FORMAT_SHORT4N = 163,
 PVRSRV_PIXEL_FORMAT_USHORT4N = 164,
 PVRSRV_PIXEL_FORMAT_SHORT2N = 165,
 PVRSRV_PIXEL_FORMAT_SHORT2 = 166,
 PVRSRV_PIXEL_FORMAT_USHORT2N = 167,
 PVRSRV_PIXEL_FORMAT_UDEC3 = 168,
 PVRSRV_PIXEL_FORMAT_DEC3N = 169,
 PVRSRV_PIXEL_FORMAT_F16_2 = 170,
 PVRSRV_PIXEL_FORMAT_F16_4 = 171,


 PVRSRV_PIXEL_FORMAT_L_F16 = 172,
 PVRSRV_PIXEL_FORMAT_L_F16_REP = 173,
 PVRSRV_PIXEL_FORMAT_L_F16_A_F16 = 174,
 PVRSRV_PIXEL_FORMAT_A_F16 = 175,
 PVRSRV_PIXEL_FORMAT_B16G16R16F = 176,

 PVRSRV_PIXEL_FORMAT_L_F32 = 177,
 PVRSRV_PIXEL_FORMAT_A_F32 = 178,
 PVRSRV_PIXEL_FORMAT_L_F32_A_F32 = 179,


 PVRSRV_PIXEL_FORMAT_PVRTC2 = 180,
 PVRSRV_PIXEL_FORMAT_PVRTC4 = 181,
 PVRSRV_PIXEL_FORMAT_PVRTCII2 = 182,
 PVRSRV_PIXEL_FORMAT_PVRTCII4 = 183,
 PVRSRV_PIXEL_FORMAT_PVRTCIII = 184,
 PVRSRV_PIXEL_FORMAT_PVRO8 = 185,
 PVRSRV_PIXEL_FORMAT_PVRO88 = 186,
 PVRSRV_PIXEL_FORMAT_PT1 = 187,
 PVRSRV_PIXEL_FORMAT_PT2 = 188,
 PVRSRV_PIXEL_FORMAT_PT4 = 189,
 PVRSRV_PIXEL_FORMAT_PT8 = 190,
 PVRSRV_PIXEL_FORMAT_PTW = 191,
 PVRSRV_PIXEL_FORMAT_PTB = 192,
 PVRSRV_PIXEL_FORMAT_MONO8 = 193,
 PVRSRV_PIXEL_FORMAT_MONO16 = 194,


 PVRSRV_PIXEL_FORMAT_C0_YUYV = 195,
 PVRSRV_PIXEL_FORMAT_C0_UYVY = 196,
 PVRSRV_PIXEL_FORMAT_C0_YVYU = 197,
 PVRSRV_PIXEL_FORMAT_C0_VYUY = 198,
 PVRSRV_PIXEL_FORMAT_C1_YUYV = 199,
 PVRSRV_PIXEL_FORMAT_C1_UYVY = 200,
 PVRSRV_PIXEL_FORMAT_C1_YVYU = 201,
 PVRSRV_PIXEL_FORMAT_C1_VYUY = 202,


 PVRSRV_PIXEL_FORMAT_C0_YUV420_2P_UV = 203,
 PVRSRV_PIXEL_FORMAT_C0_YUV420_2P_VU = 204,
 PVRSRV_PIXEL_FORMAT_C0_YUV420_3P = 205,
 PVRSRV_PIXEL_FORMAT_C1_YUV420_2P_UV = 206,
 PVRSRV_PIXEL_FORMAT_C1_YUV420_2P_VU = 207,
 PVRSRV_PIXEL_FORMAT_C1_YUV420_3P = 208,

 PVRSRV_PIXEL_FORMAT_A2B10G10R10F = 209,
 PVRSRV_PIXEL_FORMAT_B8G8R8_SINT = 210,
 PVRSRV_PIXEL_FORMAT_PVRF32SIGNMASK = 211,

 PVRSRV_PIXEL_FORMAT_ABGR4444 = 212,
 PVRSRV_PIXEL_FORMAT_ABGR1555 = 213,
 PVRSRV_PIXEL_FORMAT_BGR565 = 214,


 PVRSRV_PIXEL_FORMAT_C0_4KYUV420_2P_UV = 215,
 PVRSRV_PIXEL_FORMAT_C0_4KYUV420_2P_VU = 216,
 PVRSRV_PIXEL_FORMAT_C1_4KYUV420_2P_UV = 217,
 PVRSRV_PIXEL_FORMAT_C1_4KYUV420_2P_VU = 218,
 PVRSRV_PIXEL_FORMAT_P208 = 219,
 PVRSRV_PIXEL_FORMAT_A8P8 = 220,

 PVRSRV_PIXEL_FORMAT_A4 = 221,
 PVRSRV_PIXEL_FORMAT_AYUV8888 = 222,
 PVRSRV_PIXEL_FORMAT_RAW256 = 223,
 PVRSRV_PIXEL_FORMAT_RAW512 = 224,
 PVRSRV_PIXEL_FORMAT_RAW1024 = 225,

 PVRSRV_PIXEL_FORMAT_FORCE_I32 = 0x7fffffff

} PVRSRV_PIXEL_FORMAT;





typedef enum _PVRSRV_ALPHA_FORMAT_ {
 PVRSRV_ALPHA_FORMAT_UNKNOWN = 0x00000000,
 PVRSRV_ALPHA_FORMAT_PRE = 0x00000001,
 PVRSRV_ALPHA_FORMAT_NONPRE = 0x00000002,
 PVRSRV_ALPHA_FORMAT_MASK = 0x0000000F,
} PVRSRV_ALPHA_FORMAT;





typedef enum _PVRSRV_COLOURSPACE_FORMAT_ {
 PVRSRV_COLOURSPACE_FORMAT_UNKNOWN = 0x00000000,
 PVRSRV_COLOURSPACE_FORMAT_LINEAR = 0x00010000,
 PVRSRV_COLOURSPACE_FORMAT_NONLINEAR = 0x00020000,
 PVRSRV_COLOURSPACE_FORMAT_MASK = 0x000F0000,
} PVRSRV_COLOURSPACE_FORMAT;






typedef enum _PVRSRV_ROTATION_ {
 PVRSRV_ROTATE_0 = 0,
 PVRSRV_ROTATE_90 = 1,
 PVRSRV_ROTATE_180 = 2,
 PVRSRV_ROTATE_270 = 3,
 PVRSRV_FLIP_Y

} PVRSRV_ROTATION;
#line 695 "include4/servicesext.h"
typedef struct _PVRSRV_SYNC_DATA_
{

 IMG_UINT32 ui32WriteOpsPending;
 volatile IMG_UINT32 ui32WriteOpsComplete;


 IMG_UINT32 ui32ReadOpsPending;
 volatile IMG_UINT32 ui32ReadOpsComplete;


 IMG_UINT32 ui32ReadOps2Pending;
 volatile IMG_UINT32 ui32ReadOps2Complete;


 IMG_UINT32 ui32LastOpDumpVal;
 IMG_UINT32 ui32LastReadOpDumpVal;

} PVRSRV_SYNC_DATA;




typedef struct _PVRSRV_CLIENT_SYNC_INFO_
{

 PVRSRV_SYNC_DATA *psSyncData;






 IMG_DEV_VIRTADDR sWriteOpsCompleteDevVAddr;


 IMG_DEV_VIRTADDR sReadOpsCompleteDevVAddr;


 IMG_DEV_VIRTADDR sReadOps2CompleteDevVAddr;
#line 743 "include4/servicesext.h"
 IMG_HANDLE hMappingInfo;


 IMG_HANDLE hKernelSyncInfo;


} PVRSRV_CLIENT_SYNC_INFO, *PPVRSRV_CLIENT_SYNC_INFO;





typedef struct PVRSRV_RESOURCE_TAG
{
 volatile IMG_UINT32 ui32Lock;
 IMG_UINT32 ui32ID;
}PVRSRV_RESOURCE;
typedef PVRSRV_RESOURCE PVRSRV_RES_HANDLE;



typedef IMG_VOID (*PFN_CMD_COMPLETE) (IMG_HANDLE);
typedef IMG_VOID (**PPFN_CMD_COMPLETE) (IMG_HANDLE);


typedef IMG_BOOL (*PFN_CMD_PROC) (IMG_HANDLE, IMG_UINT32, IMG_VOID*);
typedef IMG_BOOL (**PPFN_CMD_PROC) (IMG_HANDLE, IMG_UINT32, IMG_VOID*);





typedef struct _IMG_RECT_
{
 IMG_INT32 x0;
 IMG_INT32 y0;
 IMG_INT32 x1;
 IMG_INT32 y1;
}IMG_RECT;

typedef struct _IMG_RECT_16_
{
 IMG_INT16 x0;
 IMG_INT16 y0;
 IMG_INT16 x1;
 IMG_INT16 y1;
}IMG_RECT_16;



typedef PVRSRV_ERROR (*PFN_GET_BUFFER_ADDR)(IMG_HANDLE,
           IMG_HANDLE,
           IMG_SYS_PHYADDR**,
           IMG_SIZE_T*,
           IMG_VOID**,
           IMG_HANDLE*,
           IMG_BOOL*,
           IMG_UINT32*);





typedef struct DISPLAY_DIMS_TAG
{
 IMG_UINT32 ui32ByteStride;
 IMG_UINT32 ui32Width;
 IMG_UINT32 ui32Height;
} DISPLAY_DIMS;





typedef struct DISPLAY_FORMAT_TAG
{

 PVRSRV_PIXEL_FORMAT pixelformat;
} DISPLAY_FORMAT;




typedef struct DISPLAY_SURF_ATTRIBUTES_TAG
{

 PVRSRV_PIXEL_FORMAT pixelformat;

 DISPLAY_DIMS sDims;
} DISPLAY_SURF_ATTRIBUTES;





typedef struct DISPLAY_MODE_INFO_TAG
{

 PVRSRV_PIXEL_FORMAT pixelformat;

 DISPLAY_DIMS sDims;

 IMG_UINT32 ui32RefreshHZ;

 IMG_UINT32 ui32OEMFlags;
} DISPLAY_MODE_INFO;
#line 857 "include4/servicesext.h"
typedef struct DISPLAY_INFO_TAG
{

 IMG_UINT32 ui32MaxSwapChains;

 IMG_UINT32 ui32MaxSwapChainBuffers;

 IMG_UINT32 ui32MinSwapInterval;

 IMG_UINT32 ui32MaxSwapInterval;

 IMG_UINT32 ui32PhysicalWidthmm;
 IMG_UINT32 ui32PhysicalHeightmm;

 IMG_CHAR szDisplayName[(50)];





} DISPLAY_INFO;

typedef struct ACCESS_INFO_TAG
{
 IMG_UINT32 ui32Size;
 IMG_UINT32 ui32FBPhysBaseAddress;
 IMG_UINT32 ui32FBMemAvailable;
 IMG_UINT32 ui32SysPhysBaseAddress;
 IMG_UINT32 ui32SysSize;
 IMG_UINT32 ui32DevIRQ;
}ACCESS_INFO;
#line 909 "include4/servicesext.h"
typedef struct _PVRSRV_REGISTRY_INFO_
{
    IMG_UINT32 ui32DevCookie;
    IMG_PCHAR pszKey;
    IMG_PCHAR pszValue;
    IMG_PCHAR pszBuf;
    IMG_UINT32 ui32BufSize;
} PVRSRV_REGISTRY_INFO, *PPVRSRV_REGISTRY_INFO;


PVRSRV_ERROR PVRSRVReadRegistryString (PPVRSRV_REGISTRY_INFO psRegInfo);
PVRSRV_ERROR PVRSRVWriteRegistryString (PPVRSRV_REGISTRY_INFO psRegInfo);
#line 932 "include4/servicesext.h"
typedef struct BUFFER_INFO_TAG
{
 IMG_UINT32 ui32BufferCount;
 IMG_UINT32 ui32BufferDeviceID;
 PVRSRV_PIXEL_FORMAT pixelformat;
 IMG_UINT32 ui32ByteStride;
 IMG_UINT32 ui32Width;
 IMG_UINT32 ui32Height;
 IMG_UINT32 ui32Flags;
 IMG_CHAR szDeviceName[(50)];
} BUFFER_INFO;

typedef enum _OVERLAY_DEINTERLACE_MODE_
{
 WEAVE=0x0,
 BOB_ODD,
 BOB_EVEN,
 BOB_EVEN_NONINTERLEAVED
} OVERLAY_DEINTERLACE_MODE;
#line 42 "include4/services.h" 2
#line 1 "include4/pdumpdefs.h" 1
#line 35 "include4/pdumpdefs.h"
typedef enum _PDUMP_PIXEL_FORMAT_
{
 PVRSRV_PDUMP_PIXEL_FORMAT_UNSUPPORTED = 0,
 PVRSRV_PDUMP_PIXEL_FORMAT_RGB8 = 1,
 PVRSRV_PDUMP_PIXEL_FORMAT_RGB332 = 2,
 PVRSRV_PDUMP_PIXEL_FORMAT_KRGB555 = 3,
 PVRSRV_PDUMP_PIXEL_FORMAT_RGB565 = 4,
 PVRSRV_PDUMP_PIXEL_FORMAT_ARGB4444 = 5,
 PVRSRV_PDUMP_PIXEL_FORMAT_ARGB1555 = 6,
 PVRSRV_PDUMP_PIXEL_FORMAT_RGB888 = 7,
 PVRSRV_PDUMP_PIXEL_FORMAT_ARGB8888 = 8,
 PVRSRV_PDUMP_PIXEL_FORMAT_YUV8 = 9,
 PVRSRV_PDUMP_PIXEL_FORMAT_AYUV4444 = 10,
 PVRSRV_PDUMP_PIXEL_FORMAT_VY0UY1_8888 = 11,
 PVRSRV_PDUMP_PIXEL_FORMAT_UY0VY1_8888 = 12,
 PVRSRV_PDUMP_PIXEL_FORMAT_Y0UY1V_8888 = 13,
 PVRSRV_PDUMP_PIXEL_FORMAT_Y0VY1U_8888 = 14,
 PVRSRV_PDUMP_PIXEL_FORMAT_YUV888 = 15,
 PVRSRV_PDUMP_PIXEL_FORMAT_UYVY10101010 = 16,
 PVRSRV_PDUMP_PIXEL_FORMAT_VYAUYA8888 = 17,
 PVRSRV_PDUMP_PIXEL_FORMAT_AYUV8888 = 18,
 PVRSRV_PDUMP_PIXEL_FORMAT_AYUV2101010 = 19,
 PVRSRV_PDUMP_PIXEL_FORMAT_YUV101010 = 20,
 PVRSRV_PDUMP_PIXEL_FORMAT_PL12Y8 = 21,
 PVRSRV_PDUMP_PIXEL_FORMAT_YUV_IMC2 = 22,
 PVRSRV_PDUMP_PIXEL_FORMAT_YUV_YV12 = 23,
 PVRSRV_PDUMP_PIXEL_FORMAT_YUV_PL8 = 24,
 PVRSRV_PDUMP_PIXEL_FORMAT_YUV_PL12 = 25,
 PVRSRV_PDUMP_PIXEL_FORMAT_422PL12YUV8 = 26,
 PVRSRV_PDUMP_PIXEL_FORMAT_420PL12YUV8 = 27,
 PVRSRV_PDUMP_PIXEL_FORMAT_PL12Y10 = 28,
 PVRSRV_PDUMP_PIXEL_FORMAT_422PL12YUV10 = 29,
 PVRSRV_PDUMP_PIXEL_FORMAT_420PL12YUV10 = 30,
 PVRSRV_PDUMP_PIXEL_FORMAT_ABGR8888 = 31,
 PVRSRV_PDUMP_PIXEL_FORMAT_BGRA8888 = 32,
 PVRSRV_PDUMP_PIXEL_FORMAT_ARGB8332 = 33,
 PVRSRV_PDUMP_PIXEL_FORMAT_RGB555 = 34,
 PVRSRV_PDUMP_PIXEL_FORMAT_F16 = 35,
 PVRSRV_PDUMP_PIXEL_FORMAT_F32 = 36,
 PVRSRV_PDUMP_PIXEL_FORMAT_L16 = 37,
 PVRSRV_PDUMP_PIXEL_FORMAT_L32 = 38,
 PVRSRV_PDUMP_PIXEL_FORMAT_RGBA8888 = 39,
 PVRSRV_PDUMP_PIXEL_FORMAT_ABGR4444 = 40,
 PVRSRV_PDUMP_PIXEL_FORMAT_RGBA4444 = 41,
 PVRSRV_PDUMP_PIXEL_FORMAT_BGRA4444 = 42,
 PVRSRV_PDUMP_PIXEL_FORMAT_ABGR1555 = 43,
 PVRSRV_PDUMP_PIXEL_FORMAT_RGBA5551 = 44,
 PVRSRV_PDUMP_PIXEL_FORMAT_BGRA5551 = 45,
 PVRSRV_PDUMP_PIXEL_FORMAT_BGR565 = 46,
 PVRSRV_PDUMP_PIXEL_FORMAT_A8 = 47,

 PVRSRV_PDUMP_PIXEL_FORMAT_FORCE_I32 = 0x7fffffff

} PDUMP_PIXEL_FORMAT;

typedef enum _PDUMP_MEM_FORMAT_
{
 PVRSRV_PDUMP_MEM_FORMAT_STRIDE = 0,
 PVRSRV_PDUMP_MEM_FORMAT_RESERVED = 1,
 PVRSRV_PDUMP_MEM_FORMAT_TILED = 8,
 PVRSRV_PDUMP_MEM_FORMAT_TWIDDLED = 9,
 PVRSRV_PDUMP_MEM_FORMAT_HYBRID = 10,

 PVRSRV_PDUMP_MEM_FORMAT_FORCE_I32 = 0x7fffffff
} PDUMP_MEM_FORMAT;

typedef enum _PDUMP_POLL_OPERATOR
{
 PDUMP_POLL_OPERATOR_EQUAL = 0,
 PDUMP_POLL_OPERATOR_LESS = 1,
 PDUMP_POLL_OPERATOR_LESSEQUAL = 2,
 PDUMP_POLL_OPERATOR_GREATER = 3,
 PDUMP_POLL_OPERATOR_GREATEREQUAL = 4,
 PDUMP_POLL_OPERATOR_NOTEQUAL = 5,
} PDUMP_POLL_OPERATOR;
#line 43 "include4/services.h" 2
#line 203 "include4/services.h"
typedef enum _PVRSRV_DEVICE_TYPE_
{
 PVRSRV_DEVICE_TYPE_UNKNOWN = 0 ,
 PVRSRV_DEVICE_TYPE_MBX1 = 1 ,
 PVRSRV_DEVICE_TYPE_MBX1_LITE = 2 ,

 PVRSRV_DEVICE_TYPE_M24VA = 3,
 PVRSRV_DEVICE_TYPE_MVDA2 = 4,
 PVRSRV_DEVICE_TYPE_MVED1 = 5,
 PVRSRV_DEVICE_TYPE_MSVDX = 6,

 PVRSRV_DEVICE_TYPE_SGX = 7,

 PVRSRV_DEVICE_TYPE_VGX = 8,


 PVRSRV_DEVICE_TYPE_EXT = 9,

    PVRSRV_DEVICE_TYPE_LAST = 9,

 PVRSRV_DEVICE_TYPE_FORCE_I32 = 0x7fffffff

} PVRSRV_DEVICE_TYPE;
#line 238 "include4/services.h"
typedef enum
{
 IMG_EGL = 0x00000001,
 IMG_OPENGLES1 = 0x00000002,
 IMG_OPENGLES2 = 0x00000003,
 IMG_D3DM = 0x00000004,
 IMG_SRV_UM = 0x00000005,
 IMG_OPENVG = 0x00000006,
 IMG_SRVCLIENT = 0x00000007,
 IMG_VISTAKMD = 0x00000008,
 IMG_VISTA3DNODE = 0x00000009,
 IMG_VISTAMVIDEONODE = 0x0000000A,
 IMG_VISTAVPBNODE = 0x0000000B,
 IMG_OPENGL = 0x0000000C,
 IMG_D3D = 0x0000000D,

 IMG_ANDROID_HAL = 0x0000000E,


 IMG_OPENCL = 0x0000000F,


} IMG_MODULE_ID;
#line 269 "include4/services.h"
typedef enum
{
 IMG_STRING_TYPE = 1,
 IMG_FLOAT_TYPE ,
 IMG_UINT_TYPE ,
 IMG_INT_TYPE ,
 IMG_FLAG_TYPE
}IMG_DATA_TYPE;
#line 286 "include4/services.h"
typedef struct _PVRSRV_DEV_DATA_ *PPVRSRV_DEV_DATA;





typedef struct _PVRSRV_DEVICE_IDENTIFIER_
{
 PVRSRV_DEVICE_TYPE eDeviceType;
 PVRSRV_DEVICE_CLASS eDeviceClass;
 IMG_UINT32 ui32DeviceIndex;
 IMG_CHAR *pszPDumpDevName;
 IMG_CHAR *pszPDumpRegName;

} PVRSRV_DEVICE_IDENTIFIER;






typedef struct _PVRSRV_CLIENT_DEV_DATA_
{
 IMG_UINT32 ui32NumDevices;
 PVRSRV_DEVICE_IDENTIFIER asDevID[16];
 PVRSRV_ERROR (*apfnDevConnect[16])(PPVRSRV_DEV_DATA);
 PVRSRV_ERROR (*apfnDumpTrace[16])(PPVRSRV_DEV_DATA);

} PVRSRV_CLIENT_DEV_DATA;






typedef struct _PVRSRV_CONNECTION_
{
 IMG_HANDLE hServices;
 IMG_UINT32 ui32ProcessID;
 PVRSRV_CLIENT_DEV_DATA sClientDevData;
 IMG_UINT32 ui32SrvFlags;
}PVRSRV_CONNECTION;







typedef struct _PVRSRV_DEV_DATA_
{
 const PVRSRV_CONNECTION *psConnection;



 IMG_HANDLE hDevCookie;


} PVRSRV_DEV_DATA;





typedef struct _PVRSRV_MEMUPDATE_
{
 IMG_UINT32 ui32UpdateAddr;
 IMG_UINT32 ui32UpdateVal;
} PVRSRV_MEMUPDATE;





typedef struct _PVRSRV_HWREG_
{
 IMG_UINT32 ui32RegAddr;
 IMG_UINT32 ui32RegVal;
} PVRSRV_HWREG;





typedef struct _PVRSRV_MEMBLK_
{
 IMG_DEV_VIRTADDR sDevVirtAddr;
 IMG_HANDLE hOSMemHandle;
 IMG_HANDLE hOSWrapMem;
 IMG_HANDLE hBuffer;
 IMG_HANDLE hResItem;
 IMG_SYS_PHYADDR *psIntSysPAddr;

} PVRSRV_MEMBLK;
#line 389 "include4/services.h"
typedef struct _PVRSRV_KERNEL_MEM_INFO_ *PPVRSRV_KERNEL_MEM_INFO;

typedef struct _PVRSRV_CLIENT_MEM_INFO_
{

 IMG_PVOID pvLinAddr;


 IMG_PVOID pvLinAddrKM;


 IMG_DEV_VIRTADDR sDevVAddr;







 IMG_CPU_PHYADDR sCpuPAddr;


 IMG_UINT32 ui32Flags;





 IMG_UINT32 ui32ClientFlags;


 IMG_SIZE_T uAllocSize;



 struct _PVRSRV_CLIENT_SYNC_INFO_ *psClientSyncInfo;
#line 437 "include4/services.h"
 IMG_HANDLE hMappingInfo;


 IMG_HANDLE hKernelMemInfo;


 IMG_HANDLE hResItem;





 IMG_UINT64 ui64Stamp;
#line 460 "include4/services.h"
 struct _PVRSRV_CLIENT_MEM_INFO_ *psNext;

} PVRSRV_CLIENT_MEM_INFO, *PPVRSRV_CLIENT_MEM_INFO;







typedef struct _PVRSRV_HEAP_INFO_
{
 IMG_UINT32 ui32HeapID;



 IMG_HANDLE hDevMemHeap;

 IMG_DEV_VIRTADDR sDevVAddrBase;
 IMG_UINT32 ui32HeapByteSize;
 IMG_UINT32 ui32Attribs;
 IMG_UINT32 ui32XTileStride;
}PVRSRV_HEAP_INFO;







typedef struct _PVRSRV_EVENTOBJECT_
{

 IMG_CHAR szName[(50)];




 IMG_HANDLE hOSEventKM;


} PVRSRV_EVENTOBJECT;




typedef enum
{
 PVRSRV_MISC_INFO_CPUCACHEOP_NONE = 0,
 PVRSRV_MISC_INFO_CPUCACHEOP_CLEAN,
 PVRSRV_MISC_INFO_CPUCACHEOP_FLUSH
} PVRSRV_MISC_INFO_CPUCACHEOP_TYPE;





typedef struct _PVRSRV_MISC_INFO_
{
 IMG_UINT32 ui32StateRequest;
 IMG_UINT32 ui32StatePresent;


 IMG_VOID *pvSOCTimerRegisterKM;
 IMG_VOID *pvSOCTimerRegisterUM;




 IMG_HANDLE hSOCTimerRegisterOSMemHandle;
 IMG_HANDLE hSOCTimerRegisterMappingInfo;



 IMG_VOID *pvSOCClockGateRegs;
 IMG_UINT32 ui32SOCClockGateRegsSize;


 IMG_CHAR *pszMemoryStr;
 IMG_UINT32 ui32MemoryStrLen;


 PVRSRV_EVENTOBJECT sGlobalEventObject;



 IMG_HANDLE hOSGlobalEvent;



 IMG_UINT32 aui32DDKVersion[4];


 struct
 {

  IMG_BOOL bDeferOp;


  PVRSRV_MISC_INFO_CPUCACHEOP_TYPE eCacheOpType;






  union
  {

   PVRSRV_CLIENT_MEM_INFO *psClientMemInfo;


   struct _PVRSRV_KERNEL_MEM_INFO_ *psKernelMemInfo;
  } u;



  IMG_VOID *pvBaseVAddr;


  IMG_UINT32 ui32Length;

  IMG_BYTE *pbRowStart;
  IMG_BYTE *pbRowEnd;
  IMG_BYTE *pbRowThresh;
  IMG_BOOL bStridedCacheOp;
  IMG_UINT32 ui32Stride;
 } sCacheOpCtl;


 struct
 {





  union
  {

   PVRSRV_CLIENT_MEM_INFO *psClientMemInfo;


   struct _PVRSRV_KERNEL_MEM_INFO_ *psKernelMemInfo;
  } u;



  IMG_UINT32 ui32RefCount;
 } sGetRefCountCtl;
} PVRSRV_MISC_INFO;





typedef struct _PVRSRV_SYNC_TOKEN_
{



 struct
 {



  IMG_HANDLE hKernelSyncInfo;

  IMG_UINT32 ui32ReadOpsPendingSnapshot;
  IMG_UINT32 ui32WriteOpsPendingSnapshot;
  IMG_UINT32 ui32ReadOps2PendingSnapshot;
 } sPrivate;
} PVRSRV_SYNC_TOKEN;





typedef enum _PVRSRV_CLIENT_EVENT_
{
 PVRSRV_CLIENT_EVENT_HWTIMEOUT = 0,
} PVRSRV_CLIENT_EVENT;

typedef IMG_VOID (*PFN_QUEUE_COMMAND_COMPLETE)(IMG_HANDLE hCallbackData);


PVRSRV_ERROR PVRSRVClientEvent(const PVRSRV_CLIENT_EVENT eEvent,
           PVRSRV_DEV_DATA *psDevData,
           IMG_PVOID pvData);





PVRSRV_ERROR PVRSRVConnect(PVRSRV_CONNECTION **ppsConnection, IMG_UINT32 ui32SrvFlags);


PVRSRV_ERROR PVRSRVDisconnect(const PVRSRV_CONNECTION *psConnection);


PVRSRV_ERROR PVRSRVEnumerateDevices(const PVRSRV_CONNECTION *psConnection,
             IMG_UINT32 *puiNumDevices,
             PVRSRV_DEVICE_IDENTIFIER *puiDevIDs);

PVRSRV_ERROR PVRSRVAcquireDeviceData(const PVRSRV_CONNECTION *psConnection,
             IMG_UINT32 uiDevIndex,
             PVRSRV_DEV_DATA *psDevData,
             PVRSRV_DEVICE_TYPE eDeviceType);

PVRSRV_ERROR PVRSRVGetMiscInfo (const PVRSRV_CONNECTION *psConnection, PVRSRV_MISC_INFO *psMiscInfo);


PVRSRV_ERROR PVRSRVReleaseMiscInfo (const PVRSRV_CONNECTION *psConnection, PVRSRV_MISC_INFO *psMiscInfo);



IMG_UINT32 ReadHWReg(IMG_PVOID pvLinRegBaseAddr, IMG_UINT32 ui32Offset);


IMG_VOID WriteHWReg(IMG_PVOID pvLinRegBaseAddr, IMG_UINT32 ui32Offset, IMG_UINT32 ui32Value);

 IMG_VOID WriteHWRegs(IMG_PVOID pvLinRegBaseAddr, IMG_UINT32 ui32Count, PVRSRV_HWREG *psHWRegs);



PVRSRV_ERROR PVRSRVPollForValue ( const PVRSRV_CONNECTION *psConnection,



       IMG_HANDLE hOSEvent,

       volatile IMG_UINT32 *pui32LinMemAddr,
       IMG_UINT32 ui32Value,
       IMG_UINT32 ui32Mask,
       IMG_UINT32 ui32Waitus,
       IMG_UINT32 ui32Tries);



PVRSRV_ERROR PVRSRVCreateDeviceMemContext(const PVRSRV_DEV_DATA *psDevData,



           IMG_HANDLE *phDevMemContext,

           IMG_UINT32 *pui32SharedHeapCount,
           PVRSRV_HEAP_INFO *psHeapInfo);


PVRSRV_ERROR PVRSRVDestroyDeviceMemContext(const PVRSRV_DEV_DATA *psDevData,



           IMG_HANDLE hDevMemContext

 );


PVRSRV_ERROR PVRSRVGetDeviceMemHeapInfo(const PVRSRV_DEV_DATA *psDevData,



           IMG_HANDLE hDevMemContext,

           IMG_UINT32 *pui32SharedHeapCount,
           PVRSRV_HEAP_INFO *psHeapInfo);
#line 738 "include4/services.h"

PVRSRV_ERROR PVRSRVAllocDeviceMem2(const PVRSRV_DEV_DATA *psDevData,



         IMG_HANDLE hDevMemHeap,

         IMG_UINT32 ui32Attribs,
         IMG_SIZE_T ui32Size,
         IMG_SIZE_T ui32Alignment,
         IMG_PVOID pvPrivData,
         IMG_UINT32 ui32PrivDataLength,
         PVRSRV_CLIENT_MEM_INFO **ppsMemInfo);


PVRSRV_ERROR PVRSRVAllocDeviceMem(const PVRSRV_DEV_DATA *psDevData,



         IMG_HANDLE hDevMemHeap,

         IMG_UINT32 ui32Attribs,
         IMG_SIZE_T ui32Size,
         IMG_SIZE_T ui32Alignment,
         PVRSRV_CLIENT_MEM_INFO **ppsMemInfo);


PVRSRV_ERROR PVRSRVFreeDeviceMem(const PVRSRV_DEV_DATA *psDevData,
        PVRSRV_CLIENT_MEM_INFO *psMemInfo);


PVRSRV_ERROR PVRSRVExportDeviceMem(const PVRSRV_DEV_DATA *psDevData,
            PVRSRV_CLIENT_MEM_INFO *psMemInfo,



            IMG_HANDLE *phMemInfo

 );


PVRSRV_ERROR PVRSRVReserveDeviceVirtualMem(const PVRSRV_DEV_DATA *psDevData,



           IMG_HANDLE hDevMemHeap,

           IMG_DEV_VIRTADDR *psDevVAddr,
           IMG_SIZE_T ui32Size,
           IMG_SIZE_T ui32Alignment,
           PVRSRV_CLIENT_MEM_INFO **ppsMemInfo);

PVRSRV_ERROR PVRSRVFreeDeviceVirtualMem(const PVRSRV_DEV_DATA *psDevData,
             PVRSRV_CLIENT_MEM_INFO *psMemInfo);


PVRSRV_ERROR PVRSRVMapDeviceMemory (const PVRSRV_DEV_DATA *psDevData,




         IMG_HANDLE hKernelMemInfo,
         IMG_HANDLE hDstDevMemHeap,

         PVRSRV_CLIENT_MEM_INFO **ppsDstMemInfo);


PVRSRV_ERROR PVRSRVUnmapDeviceMemory (const PVRSRV_DEV_DATA *psDevData,
          PVRSRV_CLIENT_MEM_INFO *psMemInfo);


PVRSRV_ERROR PVRSRVMapExtMemory (const PVRSRV_DEV_DATA *psDevData,
         PVRSRV_CLIENT_MEM_INFO *psMemInfo,
         IMG_SYS_PHYADDR *psSysPAddr,
         IMG_UINT32 ui32Flags);

PVRSRV_ERROR PVRSRVUnmapExtMemory (const PVRSRV_DEV_DATA *psDevData,
         PVRSRV_CLIENT_MEM_INFO *psMemInfo,
         IMG_UINT32 ui32Flags);


PVRSRV_ERROR PVRSRVWrapExtMemory(const PVRSRV_DEV_DATA *psDevData,



            IMG_HANDLE hDevMemContext,

            IMG_SIZE_T ui32ByteSize,
            IMG_SIZE_T ui32PageOffset,
            IMG_BOOL bPhysContig,
            IMG_SYS_PHYADDR *psSysPAddr,
            IMG_VOID *pvLinAddr,
            IMG_UINT32 ui32Flags,
            PVRSRV_CLIENT_MEM_INFO **ppsMemInfo);

PVRSRV_ERROR PVRSRVUnwrapExtMemory (const PVRSRV_DEV_DATA *psDevData,
            PVRSRV_CLIENT_MEM_INFO *psMemInfo);

PVRSRV_ERROR PVRSRVChangeDeviceMemoryAttributes(const PVRSRV_DEV_DATA *psDevData,
            PVRSRV_CLIENT_MEM_INFO *psClientMemInfo,
            IMG_UINT32 ui32Attribs);


PVRSRV_ERROR PVRSRVMapDeviceClassMemory (const PVRSRV_DEV_DATA *psDevData,




          IMG_HANDLE hDevMemContext,
          IMG_HANDLE hDeviceClassBuffer,

          PVRSRV_CLIENT_MEM_INFO **ppsMemInfo);

PVRSRV_ERROR PVRSRVUnmapDeviceClassMemory (const PVRSRV_DEV_DATA *psDevData,
          PVRSRV_CLIENT_MEM_INFO *psMemInfo);


PVRSRV_ERROR PVRSRVMapPhysToUserSpace(const PVRSRV_DEV_DATA *psDevData,
           IMG_SYS_PHYADDR sSysPhysAddr,
           IMG_UINT32 uiSizeInBytes,
           IMG_PVOID *ppvUserAddr,
           IMG_UINT32 *puiActualSize,
           IMG_PVOID *ppvProcess);


PVRSRV_ERROR PVRSRVUnmapPhysToUserSpace(const PVRSRV_DEV_DATA *psDevData,
          IMG_PVOID pvUserAddr,
          IMG_PVOID pvProcess);



PVRSRV_ERROR PVRSRVExportDeviceMem2(const PVRSRV_DEV_DATA *psDevData,
             PVRSRV_CLIENT_MEM_INFO *psMemInfo,
             IMG_INT *iFd);


PVRSRV_ERROR PVRSRVMapDeviceMemory2(const PVRSRV_DEV_DATA *psDevData,
             IMG_INT iFd,



             IMG_HANDLE hDstDevMemHeap,

             PVRSRV_CLIENT_MEM_INFO **ppsDstMemInfo);
#line 904 "include4/services.h"
typedef enum _PVRSRV_SYNCVAL_MODE_
{
 PVRSRV_SYNCVAL_READ = IMG_TRUE,
 PVRSRV_SYNCVAL_WRITE = IMG_FALSE,

} PVRSRV_SYNCVAL_MODE, *PPVRSRV_SYNCVAL_MODE;

typedef IMG_UINT32 PVRSRV_SYNCVAL;

 PVRSRV_ERROR PVRSRVWaitForOpsComplete(PPVRSRV_CLIENT_MEM_INFO psMemInfo,
 PVRSRV_SYNCVAL_MODE eMode, PVRSRV_SYNCVAL OpRequired);

 PVRSRV_ERROR PVRSRVWaitForAllOpsComplete(PPVRSRV_CLIENT_MEM_INFO psMemInfo,
 PVRSRV_SYNCVAL_MODE eMode);

 IMG_BOOL PVRSRVTestOpsComplete(PPVRSRV_CLIENT_MEM_INFO psMemInfo,
 PVRSRV_SYNCVAL_MODE eMode, PVRSRV_SYNCVAL OpRequired);

 IMG_BOOL PVRSRVTestAllOpsComplete(PPVRSRV_CLIENT_MEM_INFO psMemInfo,
 PVRSRV_SYNCVAL_MODE eMode);

 IMG_BOOL PVRSRVTestOpsNotComplete(PPVRSRV_CLIENT_MEM_INFO psMemInfo,
 PVRSRV_SYNCVAL_MODE eMode, PVRSRV_SYNCVAL OpRequired);

 IMG_BOOL PVRSRVTestAllOpsNotComplete(PPVRSRV_CLIENT_MEM_INFO psMemInfo,
 PVRSRV_SYNCVAL_MODE eMode);

 PVRSRV_SYNCVAL PVRSRVGetPendingOpSyncVal(PPVRSRV_CLIENT_MEM_INFO psMemInfo,
 PVRSRV_SYNCVAL_MODE eMode);






PVRSRV_ERROR PVRSRVEnumerateDeviceClass(const PVRSRV_CONNECTION *psConnection,
             PVRSRV_DEVICE_CLASS DeviceClass,
             IMG_UINT32 *pui32DevCount,
             IMG_UINT32 *pui32DevID);





IMG_HANDLE PVRSRVOpenDCDevice(const PVRSRV_DEV_DATA *psDevData,
           IMG_UINT32 ui32DeviceID);


PVRSRV_ERROR PVRSRVCloseDCDevice(const PVRSRV_CONNECTION *psConnection, IMG_HANDLE hDevice);


PVRSRV_ERROR PVRSRVEnumDCFormats (IMG_HANDLE hDevice,
           IMG_UINT32 *pui32Count,
           DISPLAY_FORMAT *psFormat);


PVRSRV_ERROR PVRSRVEnumDCDims (IMG_HANDLE hDevice,
          IMG_UINT32 *pui32Count,
          DISPLAY_FORMAT *psFormat,
          DISPLAY_DIMS *psDims);


PVRSRV_ERROR PVRSRVGetDCSystemBuffer(IMG_HANDLE hDevice,



          IMG_HANDLE *phBuffer

 );


PVRSRV_ERROR PVRSRVGetDCInfo(IMG_HANDLE hDevice,
          DISPLAY_INFO* psDisplayInfo);


PVRSRV_ERROR PVRSRVCreateDCSwapChain (IMG_HANDLE hDevice,
             IMG_UINT32 ui32Flags,
             DISPLAY_SURF_ATTRIBUTES *psDstSurfAttrib,
             DISPLAY_SURF_ATTRIBUTES *psSrcSurfAttrib,
             IMG_UINT32 ui32BufferCount,
             IMG_UINT32 ui32OEMFlags,
             IMG_UINT32 *pui32SwapChainID,



             IMG_HANDLE *phSwapChain

 );


PVRSRV_ERROR PVRSRVDestroyDCSwapChain (IMG_HANDLE hDevice,



           IMG_HANDLE hSwapChain

 );


PVRSRV_ERROR PVRSRVSetDCDstRect (IMG_HANDLE hDevice,



          IMG_HANDLE hSwapChain,

          IMG_RECT *psDstRect);


PVRSRV_ERROR PVRSRVSetDCSrcRect (IMG_HANDLE hDevice,



          IMG_HANDLE hSwapChain,

          IMG_RECT *psSrcRect);


PVRSRV_ERROR PVRSRVSetDCDstColourKey (IMG_HANDLE hDevice,



           IMG_HANDLE hSwapChain,

           IMG_UINT32 ui32CKColour);


PVRSRV_ERROR PVRSRVSetDCSrcColourKey (IMG_HANDLE hDevice,



           IMG_HANDLE hSwapChain,

           IMG_UINT32 ui32CKColour);


PVRSRV_ERROR PVRSRVGetDCBuffers(IMG_HANDLE hDevice,




         IMG_HANDLE hSwapChain,
         IMG_HANDLE *phBuffer

 );


PVRSRV_ERROR PVRSRVGetDCBuffers2(IMG_HANDLE hDevice,




             IMG_HANDLE hSwapChain,
             IMG_HANDLE *phBuffer,

             IMG_SYS_PHYADDR *psPhyAddr);


PVRSRV_ERROR PVRSRVSwapToDCBuffer (IMG_HANDLE hDevice,



          IMG_HANDLE hBuffer,

          IMG_UINT32 ui32ClipRectCount,
          IMG_RECT *psClipRect,
          IMG_UINT32 ui32SwapInterval,



          IMG_HANDLE hPrivateTag

 );


PVRSRV_ERROR PVRSRVSwapToDCBuffer2 (IMG_HANDLE hDevice,



          IMG_HANDLE hBuffer,

          IMG_UINT32 ui32SwapInterval,
          PVRSRV_CLIENT_MEM_INFO **ppsMemInfos,
          IMG_UINT32 ui32NumMemInfos,
          IMG_PVOID pvPrivData,
          IMG_UINT32 ui32PrivDataLength);


PVRSRV_ERROR PVRSRVSwapToDCSystem (IMG_HANDLE hDevice,



          IMG_HANDLE hSwapChain

 );





IMG_HANDLE PVRSRVOpenBCDevice(const PVRSRV_DEV_DATA *psDevData,
           IMG_UINT32 ui32DeviceID);


PVRSRV_ERROR PVRSRVCloseBCDevice(const PVRSRV_CONNECTION *psConnection,
            IMG_HANDLE hDevice);


PVRSRV_ERROR PVRSRVGetBCBufferInfo(IMG_HANDLE hDevice,
            BUFFER_INFO *psBuffer);


PVRSRV_ERROR PVRSRVGetBCBuffer(IMG_HANDLE hDevice,
            IMG_UINT32 ui32BufferIndex,



            IMG_HANDLE *phBuffer

 );






PVRSRV_ERROR PVRSRVPDumpInit(const PVRSRV_CONNECTION *psConnection);


PVRSRV_ERROR PVRSRVPDumpStartInitPhase(const PVRSRV_CONNECTION *psConnection);


PVRSRV_ERROR PVRSRVPDumpStopInitPhase(const PVRSRV_CONNECTION *psConnection);


PVRSRV_ERROR PVRSRVPDumpMemPol(const PVRSRV_CONNECTION *psConnection,



            PVRSRV_CLIENT_MEM_INFO *psMemInfo,

            IMG_UINT32 ui32Offset,
            IMG_UINT32 ui32Value,
            IMG_UINT32 ui32Mask,
            PDUMP_POLL_OPERATOR eOperator,
            IMG_UINT32 ui32Flags);


PVRSRV_ERROR PVRSRVPDumpSyncPol(const PVRSRV_CONNECTION *psConnection,



            PVRSRV_CLIENT_SYNC_INFO *psClientSyncInfo,

            IMG_BOOL bIsRead,
            IMG_UINT32 ui32Value,
            IMG_UINT32 ui32Mask);


PVRSRV_ERROR PVRSRVPDumpSyncPol2(const PVRSRV_CONNECTION *psConnection,



            PVRSRV_CLIENT_SYNC_INFO *psClientSyncInfo,

            IMG_BOOL bIsRead);


PVRSRV_ERROR PVRSRVPDumpMem(const PVRSRV_CONNECTION *psConnection,
         IMG_PVOID pvAltLinAddr,
         PVRSRV_CLIENT_MEM_INFO *psMemInfo,
         IMG_UINT32 ui32Offset,
         IMG_UINT32 ui32Bytes,
         IMG_UINT32 ui32Flags);


PVRSRV_ERROR PVRSRVPDumpSync(const PVRSRV_CONNECTION *psConnection,
          IMG_PVOID pvAltLinAddr,
          PVRSRV_CLIENT_SYNC_INFO *psClientSyncInfo,
          IMG_UINT32 ui32Offset,
          IMG_UINT32 ui32Bytes);


PVRSRV_ERROR PVRSRVPDumpReg(const PVRSRV_DEV_DATA *psDevData,
           IMG_CHAR *pszRegRegion,
           IMG_UINT32 ui32RegAddr,
           IMG_UINT32 ui32RegValue,
           IMG_UINT32 ui32Flags);


PVRSRV_ERROR PVRSRVPDumpRegPolWithFlags(const PVRSRV_DEV_DATA *psDevData,
              IMG_CHAR *pszRegRegion,
              IMG_UINT32 ui32RegAddr,
              IMG_UINT32 ui32RegValue,
              IMG_UINT32 ui32Mask,
              IMG_UINT32 ui32Flags);

PVRSRV_ERROR PVRSRVPDumpRegPol(const PVRSRV_DEV_DATA *psDevData,
           IMG_CHAR *pszRegRegion,
           IMG_UINT32 ui32RegAddr,
           IMG_UINT32 ui32RegValue,
           IMG_UINT32 ui32Mask);


PVRSRV_ERROR PVRSRVPDumpPDReg(const PVRSRV_CONNECTION *psConnection,
           IMG_UINT32 ui32RegAddr,
           IMG_UINT32 ui32RegValue);

PVRSRV_ERROR PVRSRVPDumpPDDevPAddr(const PVRSRV_CONNECTION *psConnection,
            PVRSRV_CLIENT_MEM_INFO *psMemInfo,
            IMG_UINT32 ui32Offset,
            IMG_DEV_PHYADDR sPDDevPAddr);



PVRSRV_ERROR PVRSRVPDumpMemPages(const PVRSRV_DEV_DATA *psDevData,



                 IMG_HANDLE hKernelMemInfo,

                 IMG_DEV_PHYADDR *pPages,
                 IMG_UINT32 ui32NumPages,
                    IMG_DEV_VIRTADDR sDevVAddr,
                 IMG_UINT32 ui32Start,
                 IMG_UINT32 ui32Length,
                 IMG_UINT32 ui32Flags);



PVRSRV_ERROR PVRSRVPDumpSetFrame(const PVRSRV_CONNECTION *psConnection,
             IMG_UINT32 ui32Frame);


PVRSRV_ERROR PVRSRVPDumpComment(const PVRSRV_CONNECTION *psConnection,
            const IMG_CHAR *pszComment,
            IMG_BOOL bContinuous);


PVRSRV_ERROR PVRSRVPDumpCommentf(const PVRSRV_CONNECTION *psConnection,
             IMG_BOOL bContinuous,
             const IMG_CHAR *pszFormat, ...)

             __attribute__((format(printf,3,4)))

;


PVRSRV_ERROR PVRSRVPDumpCommentWithFlagsf(const PVRSRV_CONNECTION *psConnection,
                IMG_UINT32 ui32Flags,
                const IMG_CHAR *pszFormat, ...)

                __attribute__((format(printf,3,4)))

;


PVRSRV_ERROR PVRSRVPDumpDriverInfo(const PVRSRV_CONNECTION *psConnection,
             IMG_CHAR *pszString,
            IMG_BOOL bContinuous);


PVRSRV_ERROR PVRSRVPDumpIsCapturing(const PVRSRV_CONNECTION *psConnection,
             IMG_BOOL *pbIsCapturing);


PVRSRV_ERROR PVRSRVPDumpBitmap(const PVRSRV_DEV_DATA *psDevData,
            IMG_CHAR *pszFileName,
           IMG_UINT32 ui32FileOffset,
           IMG_UINT32 ui32Width,
           IMG_UINT32 ui32Height,
           IMG_UINT32 ui32StrideInBytes,
           IMG_DEV_VIRTADDR sDevBaseAddr,



           IMG_HANDLE hDevMemContext,

           IMG_UINT32 ui32Size,
           PDUMP_PIXEL_FORMAT ePixelFormat,
           PDUMP_MEM_FORMAT eMemFormat,
           IMG_UINT32 ui32PDumpFlags);


PVRSRV_ERROR PVRSRVPDumpRegRead(const PVRSRV_DEV_DATA *psDevData,
           const IMG_CHAR *pszRegRegion,
            const IMG_CHAR *pszFileName,
           IMG_UINT32 ui32FileOffset,
           IMG_UINT32 ui32Address,
           IMG_UINT32 ui32Size,
           IMG_UINT32 ui32PDumpFlags);



IMG_BOOL PVRSRVPDumpIsCapturingTest(const PVRSRV_CONNECTION *psConnection);


PVRSRV_ERROR PVRSRVPDumpCycleCountRegRead(const PVRSRV_DEV_DATA *psDevData,
              IMG_UINT32 ui32RegOffset,
              IMG_BOOL bLastFrame);

 IMG_HANDLE PVRSRVLoadLibrary(const IMG_CHAR *pszLibraryName);
 PVRSRV_ERROR PVRSRVUnloadLibrary(IMG_HANDLE hExtDrv);
 PVRSRV_ERROR PVRSRVGetLibFuncAddr(IMG_HANDLE hExtDrv, const IMG_CHAR *pszFunctionName, IMG_VOID **ppvFuncAddr);

 IMG_UINT32 PVRSRVClockus (void);
 IMG_VOID PVRSRVWaitus (IMG_UINT32 ui32Timeus);
 IMG_VOID PVRSRVReleaseThreadQuanta (void);
 IMG_UINT32 PVRSRVGetCurrentProcessID(void);
 IMG_CHAR * PVRSRVSetLocale(const IMG_CHAR *pszLocale);





 IMG_VOID PVRSRVCreateAppHintState(IMG_MODULE_ID eModuleID,
              const IMG_CHAR *pszAppName,
              IMG_VOID **ppvState);
 IMG_VOID PVRSRVFreeAppHintState(IMG_MODULE_ID eModuleID,
           IMG_VOID *pvHintState);

 IMG_BOOL PVRSRVGetAppHint(IMG_VOID *pvHintState,
              const IMG_CHAR *pszHintName,
              IMG_DATA_TYPE eDataType,
              const IMG_VOID *pvDefault,
              IMG_VOID *pvReturn);






 IMG_PVOID PVRSRVAllocUserModeMem (IMG_SIZE_T ui32Size);
 IMG_PVOID PVRSRVCallocUserModeMem (IMG_SIZE_T ui32Size);
 IMG_PVOID PVRSRVReallocUserModeMem (IMG_PVOID pvBase, IMG_SIZE_T uNewSize);
 IMG_VOID PVRSRVFreeUserModeMem (IMG_PVOID pvMem);
 IMG_VOID PVRSRVMemCopy(IMG_VOID *pvDst, const IMG_VOID *pvSrc, IMG_SIZE_T ui32Size);
 IMG_VOID PVRSRVMemSet(IMG_VOID *pvDest, IMG_UINT8 ui8Value, IMG_SIZE_T ui32Size);

struct _PVRSRV_MUTEX_OPAQUE_STRUCT_;
typedef struct _PVRSRV_MUTEX_OPAQUE_STRUCT_ *PVRSRV_MUTEX_HANDLE;



 PVRSRV_ERROR PVRSRVCreateMutex(PVRSRV_MUTEX_HANDLE *phMutex);
 PVRSRV_ERROR PVRSRVDestroyMutex(PVRSRV_MUTEX_HANDLE hMutex);
 IMG_VOID PVRSRVLockMutex(PVRSRV_MUTEX_HANDLE hMutex);
 IMG_VOID PVRSRVUnlockMutex(PVRSRV_MUTEX_HANDLE hMutex);


 IMG_VOID PVRSRVLockProcessGlobalMutex(void);
 IMG_VOID PVRSRVUnlockProcessGlobalMutex(void);


struct _PVRSRV_SEMAPHORE_OPAQUE_STRUCT_;
typedef struct _PVRSRV_SEMAPHORE_OPAQUE_STRUCT_ *PVRSRV_SEMAPHORE_HANDLE;
#line 1369 "include4/services.h"
static __inline PVRSRV_ERROR PVRSRVCreateSemaphore(PVRSRV_SEMAPHORE_HANDLE *phSemaphore, IMG_INT iInitialCount)
{
 (iInitialCount) = (iInitialCount);
 *phSemaphore = 0;
 return PVRSRV_OK;
}




static __inline PVRSRV_ERROR PVRSRVDestroySemaphore(PVRSRV_SEMAPHORE_HANDLE hSemaphore)
{
 (hSemaphore) = (hSemaphore);
 return PVRSRV_OK;
}




static __inline PVRSRV_ERROR PVRSRVWaitSemaphore(PVRSRV_SEMAPHORE_HANDLE hSemaphore, IMG_UINT64 ui64TimeoutMicroSeconds)
{
 (hSemaphore) = (hSemaphore);
 (ui64TimeoutMicroSeconds) = (ui64TimeoutMicroSeconds);
 return PVRSRV_ERROR_INVALID_PARAMS;
}




static __inline IMG_VOID PVRSRVPostSemaphore(PVRSRV_SEMAPHORE_HANDLE hSemaphore, IMG_INT iPostCount)
{
 (hSemaphore) = (hSemaphore);
 (iPostCount) = (iPostCount);
}
#line 1423 "include4/services.h"
 PVRSRV_ERROR PVRSRVEventObjectWait(const PVRSRV_CONNECTION *psConnection,



         IMG_HANDLE hOSEvent

 );
#line 1439 "include4/services.h"

PVRSRV_ERROR PVRSRVCreateSyncInfoModObj(const PVRSRV_CONNECTION *psConnection,



              IMG_HANDLE *phKernelSyncInfoModObj

 );
#line 1456 "include4/services.h"

PVRSRV_ERROR PVRSRVDestroySyncInfoModObj(const PVRSRV_CONNECTION *psConnection,



               IMG_HANDLE hKernelSyncInfoModObj

 );
#line 1495 "include4/services.h"

PVRSRV_ERROR PVRSRVModifyPendingSyncOps(const PVRSRV_CONNECTION *psConnection,



               IMG_HANDLE hKernelSyncInfoModObj,

               PVRSRV_CLIENT_SYNC_INFO *psSyncInfo,
               IMG_UINT32 ui32ModifyFlags,
               IMG_UINT32 *pui32ReadOpsPending,
               IMG_UINT32 *pui32WriteOpsPending);
#line 1520 "include4/services.h"

PVRSRV_ERROR PVRSRVModifyCompleteSyncOps(const PVRSRV_CONNECTION *psConnection,



               IMG_HANDLE hKernelSyncInfoModObj

 );
#line 1550 "include4/services.h"

PVRSRV_ERROR PVRSRVSyncOpsTakeToken(const PVRSRV_CONNECTION *psConnection,



             const PVRSRV_CLIENT_SYNC_INFO *psSyncInfo,

             PVRSRV_SYNC_TOKEN *psSyncToken);
#line 1574 "include4/services.h"

PVRSRV_ERROR PVRSRVSyncOpsFlushToToken(const PVRSRV_CONNECTION *psConnection,



             const PVRSRV_CLIENT_SYNC_INFO *psSyncInfo,

             const PVRSRV_SYNC_TOKEN *psSyncToken,
             IMG_BOOL bWait);
#line 1601 "include4/services.h"

PVRSRV_ERROR PVRSRVSyncOpsFlushToModObj(const PVRSRV_CONNECTION *psConnection,



              IMG_HANDLE hKernelSyncInfoModObj,

              IMG_BOOL bWait);
#line 1623 "include4/services.h"

PVRSRV_ERROR PVRSRVSyncOpsFlushToDelta(const PVRSRV_CONNECTION *psConnection,
             PVRSRV_CLIENT_SYNC_INFO *psClientSyncInfo,
             IMG_UINT32 ui32Delta,
             IMG_BOOL bWait);
#line 1642 "include4/services.h"

PVRSRV_ERROR PVRSRVAllocSyncInfo(const PVRSRV_DEV_DATA *psDevData,
             PVRSRV_CLIENT_SYNC_INFO **ppsSyncInfo);
#line 1656 "include4/services.h"

PVRSRV_ERROR PVRSRVFreeSyncInfo(const PVRSRV_DEV_DATA *psDevData,
            PVRSRV_CLIENT_SYNC_INFO *psSyncInfo);
#line 1668 "include4/services.h"

const IMG_CHAR *PVRSRVGetErrorString(PVRSRV_ERROR eError);
#line 42 "include4/sgxapiperf.h" 2
#line 50 "include4/sgxapiperf.h"

PVRSRV_ERROR SGXReadHWPerfCB(PVRSRV_DEV_DATA *psDevData,
            IMG_UINT32 ui32ArraySize,
            PVRSRV_SGX_HWPERF_CB_ENTRY *psHWPerfCBData,
            IMG_UINT32 *pui32DataCount,
            IMG_UINT32 *pui32ClockSpeed,
            IMG_UINT32 *pui32HostTimeStamp);
#line 53 "include4/sgxapi.h" 2
#line 70 "include4/sgxapi.h"
typedef struct _SGXISRINFO
{
 IMG_HANDLE hDevCookie;
 IMG_UINT32 ui32Flags;
 IMG_BOOL bInterruptProcessed;

} SGXISRINFO, *PSGXISRINFO;
#line 113 "include4/sgxapi.h"
typedef enum _SGX_CONTEXT_PRIORITY_
{
 SGX_CONTEXT_PRIORITY_LOW = 0,
 SGX_CONTEXT_PRIORITY_MEDIUM = 1,
 SGX_CONTEXT_PRIORITY_HIGH = 2,
 SGX_CONTEXT_PRIORITY_FORCE_I32 = 0x7fffffff
} SGX_CONTEXT_PRIORITY;

typedef struct _SGX_CREATERENDERCONTEXT_
{
 IMG_UINT32 ui32Flags;





 IMG_HANDLE hDevCookie;
 IMG_HANDLE hDevMemContext;
 IMG_HANDLE hOSEvent;

 IMG_UINT32 ui32PBSize;
 IMG_UINT32 ui32PBSizeLimit;
 IMG_UINT32 ui32VisTestResultBufferSize;
 IMG_UINT32 ui32MaxSACount;
 IMG_BOOL bPerContextPB;
} SGX_CREATERENDERCONTEXT, *PSGX_CREATERENDERCONTEXT;



typedef enum _SGX_SCALING_
{
 SGX_SCALING_NONE = 0,
 SGX_DOWNSCALING,
 SGX_UPSCALING,
 SGX_SCALING_FORCE_I32 = 0x7FFFFFFF
} SGX_SCALING;

typedef struct _SGX_ADDRENDTARG_
{
 IMG_UINT32 ui32Flags;
 IMG_UINT32 ui32RendersPerFrame;
 IMG_HANDLE hRenderContext;



 IMG_HANDLE hDevCookie;

 IMG_UINT32 ui32NumPixelsX;
 IMG_UINT32 ui32NumPixelsY;
 IMG_UINT16 ui16MSAASamplesInX;
 IMG_UINT16 ui16MSAASamplesInY;
 SGX_SCALING eForceScalingInX;
 SGX_SCALING eForceScalingInY;
 IMG_UINT32 ui32BGObjUCoord;
 PVRSRV_ROTATION eRotation;
 IMG_UINT16 ui16NumRTsInArray;
} SGX_ADDRENDTARG, *PSGX_ADDRENDTARG;
#line 215 "include4/sgxapi.h"
typedef struct _PVRSRV_SGX_CLIENT_INFO_
{
 IMG_UINT32 ui32ProcessID;
 IMG_VOID *pvProcess;
 PVRSRV_MISC_INFO sMiscInfo;

 IMG_UINT32 ui32EVMConfig;
 IMG_UINT32 ui32ClientKickFlags;
 IMG_UINT32 ui32NumUSETemporaryRegisters;
 IMG_UINT32 ui32NumUSEAttributeRegisters;

 IMG_DEV_VIRTADDR uPDSExecBase;

 IMG_DEV_VIRTADDR uUSEExecBase;

} PVRSRV_SGX_CLIENT_INFO;






typedef struct _PVRSRV_SGX_INTERNALDEV_INFO
{
 IMG_UINT32 ui32Flags;
 IMG_BOOL bPDSTimerEnable;



 IMG_HANDLE hHostCtlKernelMemInfoHandle;

 IMG_DEV_VIRTADDR sDummyStencilLoadDevVaddr;
 IMG_DEV_VIRTADDR sDummyStencilStoreDevVAddr;
 IMG_BOOL bForcePTOff;
 IMG_UINT32 ui32RegFlags;
}PVRSRV_SGX_INTERNALDEV_INFO;
#line 266 "include4/sgxapi.h"
typedef struct _SGX_KICKTA_COMMON_
{
 IMG_UINT32 ui32Frame;
 IMG_UINT32 ui32KickFlags;
 IMG_DEV_VIRTADDR sVisTestResultMem;
 IMG_UINT32 ui32VisTestCount;
#line 282 "include4/sgxapi.h"
 IMG_UINT32 ui32ISPBGObjDepth;
 IMG_UINT32 ui32ISPBGObj;
 IMG_UINT32 ui32ISPIPFMisc;
#line 299 "include4/sgxapi.h"
 IMG_UINT32 ui32ISPPerpendicular;
 IMG_UINT32 ui32ISPCullValue;







 IMG_DEV_VIRTADDR sISPZLoadBase;
 IMG_DEV_VIRTADDR sISPStencilLoadBase;
 IMG_DEV_VIRTADDR sISPZStoreBase;
 IMG_DEV_VIRTADDR sISPStencilStoreBase;





 IMG_BOOL bSeperateStencilLoadStore;
 IMG_UINT32 ui32ZLSCtl;
 IMG_UINT32 ui32ISPValidId;
 IMG_UINT32 ui32ISPDBias;




 IMG_UINT32 ui32ISPSceneBGObj;

 IMG_UINT32 ui32EDMPixelPDSAddr;
 IMG_UINT32 ui32EDMPixelPDSDataSize;
 IMG_UINT32 ui32EDMPixelPDSInfo;

 IMG_UINT32 ui32PixelBE;
#line 354 "include4/sgxapi.h"
 IMG_UINT32 ui32Filter0Left;

 IMG_UINT32 ui32Filter0Centre;

 IMG_UINT32 ui32Filter0Right;
 IMG_UINT32 ui32Filter0Extra;
 IMG_UINT32 ui32Filter1Left;

 IMG_UINT32 ui32Filter1Centre;

 IMG_UINT32 ui32Filter1Right;
 IMG_UINT32 ui32Filter1Extra;
 IMG_UINT32 ui32Filter2Left;
 IMG_UINT32 ui32Filter2Right;
 IMG_UINT32 ui32Filter2Extra;
 IMG_UINT32 ui32FilterTable;

 IMG_UINT32 ui32USEStoreRange;
 IMG_UINT32 ui32USELoadRedirect;
#line 385 "include4/sgxapi.h"
 IMG_DEV_VIRTADDR sTABufferCtlStreamBase;



 IMG_DEV_VIRTADDR sTABufferCtlStreamTerminate;

 IMG_UINT32 ui32MTECtrl;

 IMG_UINT32 aui32SpecObject[3];

 IMG_UINT32 ui32NumTAStatusVals;
 IMG_UINT32 ui32Num3DStatusVals;
 IMG_UINT32 ui32NumSrcSyncs;


} SGX_KICKTA_COMMON;
#line 413 "include4/sgxapi.h"
typedef struct _SGX_STATUS_UPDATE_
{
 CTL_STATUS sCtlStatus;



 IMG_HANDLE hKernelMemInfo;

} SGX_STATUS_UPDATE;

typedef struct _SGX_KICKTA_
{
 SGX_KICKTA_COMMON sKickTACommon;

 PVRSRV_CLIENT_SYNC_INFO **ppsRenderSurfSyncInfo;
 IMG_DEV_VIRTADDR sPixEventUpdateDevAddr;
 IMG_UINT32 *psPixEventUpdateList;
 IMG_UINT32 *psHWBgObjPrimPDSUpdateList;
#line 442 "include4/sgxapi.h"
 PVRSRV_CLIENT_SYNC_INFO *apsSrcSurfSyncInfo[8];



 SGX_STATUS_UPDATE asTAStatusUpdate[32];
 SGX_STATUS_UPDATE as3DStatusUpdate[4];





 IMG_HANDLE hTQContext;
 IMG_HANDLE hRenderContext;
 IMG_HANDLE hRTDataSet;






} SGX_KICKTA;

typedef struct _SGX_KICKTA_OUTPUT_
{
 IMG_BOOL bSPMOutOfMemEvent;
 IMG_UINT32 ui32NumPBPagesFree;
 IMG_UINT32 ui32MaxZTileX;
 IMG_UINT32 ui32MaxZTileY;

 PVRSRV_HWREG *psZLSReg;
 IMG_PUINT32 pui32VDMBaseRegVal;

} SGX_KICKTA_OUTPUT;
#line 570 "include4/sgxapi.h"
typedef enum _SGXTQ_FILTERTYPE_
{
 SGXTQ_FILTERTYPE_POINT = 0,
 SGXTQ_FILTERTYPE_LINEAR,
 SGXTQ_FILTERTYPE_ANISOTROPIC
} SGXTQ_FILTERTYPE;


typedef enum _SGXTQ_COLOURKEY_
{
 SGXTQ_COLOURKEY_NONE = 0,
 SGXTQ_COLOURKEY_SOURCE,
 SGXTQ_COLOURKEY_DEST,
 SGXTQ_COLOURKEY_SOURCE_PASS
} SGXTQ_COLOURKEY;


typedef enum _SGXTQ_COPYORDER_
{
 SGXTQ_COPYORDER_AUTO = 0,
 SGXTQ_COPYORDER_TL2BR,
 SGXTQ_COPYORDER_TR2BL,
 SGXTQ_COPYORDER_BR2TL,
 SGXTQ_COPYORDER_BL2TR
} SGXTQ_COPYORDER;


typedef enum _SGXTQ_ROTATION_
{
 SGXTQ_ROTATION_NONE = 0,
 SGXTQ_ROTATION_90,
 SGXTQ_ROTATION_180,
 SGXTQ_ROTATION_270
} SGXTQ_ROTATION;


typedef enum _SGXTQ_ALPHA_
{
 SGXTQ_ALPHA_NONE = 0,
 SGXTQ_ALPHA_SOURCE,
 SGXTQ_ALPHA_PREMUL_SOURCE,
 SGXTQ_ALPHA_GLOBAL,
 SGXTQ_ALPHA_PREMUL_SOURCE_WITH_GLOBAL
} SGXTQ_ALPHA;

typedef enum _SGXTQ_MEMLAYOUT_
{
 SGXTQ_MEMLAYOUT_2D = 0,
 SGXTQ_MEMLAYOUT_3D,
 SGXTQ_MEMLAYOUT_CEM,
 SGXTQ_MEMLAYOUT_STRIDE,
 SGXTQ_MEMLAYOUT_TILED,
 SGXTQ_MEMLAYOUT_OUT_LINEAR,
 SGXTQ_MEMLAYOUT_OUT_TILED,
 SGXTQ_MEMLAYOUT_OUT_TWIDDLED
} SGXTQ_MEMLAYOUT;


typedef enum _SGXTQ_BLITTYPE_
{
 SGXTQ_BLIT = 1,



 SGXTQ_MIPGEN,
 SGXTQ_VIDEO_BLIT,
 SGXTQ_FILL,
 SGXTQ_BUFFERBLT,
 SGXTQ_CUSTOM,
 SGXTQ_FULL_CUSTOM,
 SGXTQ_TEXTURE_UPLOAD,
 SGXTQ_CLIP_BLIT,
 SGXTQ_CUSTOMSHADER_BLIT,
 SGXTQ_COLOURLUT_BLIT,
 SGXTQ_CLEAR_TYPE_BLEND,
 SGXTQ_TATLAS_BLIT,
 SGXTQ_ARGB2NV12_BLIT,

} SGXTQ_BLITTYPE;




typedef struct _SGXTQ_TQSURFACE_
{







 IMG_DEV_VIRTADDR sDevVAddr;



 IMG_UINT32 ui32Width;
 IMG_UINT32 ui32Height;
 IMG_INT32 i32StrideInBytes;
 PVRSRV_PIXEL_FORMAT eFormat;
 SGXTQ_MEMLAYOUT eMemLayout;
 IMG_UINT32 ui32ChunkStride;
 PVRSRV_CLIENT_SYNC_INFO *psSyncInfo;



 IMG_UINT32 ui32ChromaPlaneOffset[2];
} SGXTQ_SURFACE;
#line 691 "include4/sgxapi.h"
typedef struct _SGXTQ_BLITOP_
{
 SGXTQ_FILTERTYPE eFilter;
 IMG_UINT32 ui32ColourKey;
 IMG_UINT32 ui32ColourKeyMask;
 IMG_BOOL bEnableGamma;
 SGXTQ_COLOURKEY eColourKey;
 SGXTQ_ROTATION eRotation;
 SGXTQ_COPYORDER eCopyOrder;
 SGXTQ_ALPHA eAlpha;
 IMG_BYTE byGlobalAlpha;
 IMG_BYTE byCustomRop3;



 IMG_DEV_VIRTADDR sUSEExecAddr;
 IMG_UINT32 UseParams[2];
 IMG_UINT32 uiNumTemporaryRegisters;
 IMG_BOOL bEnablePattern;
    IMG_BOOL bSingleSource;
} SGXTQ_BLITOP;

typedef struct _SGXTQ_MIPGENOP_
{
 SGXTQ_FILTERTYPE eFilter;
 IMG_UINT32 ui32Levels;
} SGXTQ_MIPGENOP;

typedef struct _SGXTQ_FILLOP_
{
 IMG_UINT32 ui32Colour;
 IMG_BYTE byCustomRop3;



} SGXTQ_FILLOP;

typedef struct _SGXTQ_BUFFERBLTOP_
{
 IMG_UINT32 ui32Bytes;
} SGXTQ_BUFFERBLTOP;
#line 747 "include4/sgxapi.h"
typedef struct _SGXTQ_CUSTOMOP_
{



 IMG_DEV_VIRTADDR sDevVAddrUSECode;
 IMG_DEV_VIRTADDR sDevVAddrPDSPrimCode;
 IMG_UINT32 ui32PDSPrimDataSize;
 IMG_DEV_VIRTADDR sDevVAddrPDSSecCode;
 IMG_UINT32 ui32PDSSecDataSize;
 IMG_UINT32 ui32PDSPrimNumAttr;
 IMG_UINT32 ui32PDSSecNumAttr;
 IMG_UINT32 ui32NumTempRegs;

 IMG_UINT32 aui32PBEState[6];

 IMG_BOOL bLoadFIRCoefficients;
 IMG_UINT32 ui32FIRHFilterTable;
 IMG_UINT32 ui32FIRHFilterLeft0;
 IMG_UINT32 ui32FIRHFilterRight0;
 IMG_UINT32 ui32FIRHFilterExtra0;
 IMG_UINT32 ui32FIRHFilterLeft1;
 IMG_UINT32 ui32FIRHFilterRight1;
 IMG_UINT32 ui32FIRHFilterExtra1;
 IMG_UINT32 ui32FIRHFilterLeft2;
 IMG_UINT32 ui32FIRHFilterRight2;
 IMG_UINT32 ui32FIRHFilterExtra2;

 IMG_UINT32 ui32FIRHFilterCentre0;
 IMG_UINT32 ui32FIRHFilterCentre1;





 IMG_UINT32 ui32NumPatches;
 PVRSRV_MEMUPDATE asMemUpdates[5];
} SGXTQ_CUSTOMOP;

typedef struct _SGXTQ_FULLCUSTOMOP_
{



 IMG_DEV_VIRTADDR sDevVAddrVertexData;
 IMG_UINT32 ui32StateSize;
 IMG_UINT32 ui32BIFBase;


 IMG_RECT sRenderBox;
 IMG_UINT32 aui32PBEState[6];

 IMG_UINT32 ui32ISPBgObjReg;
 IMG_UINT32 ui32ISPBgObjTagReg;
 IMG_UINT32 ui32ISPRenderReg;
 IMG_UINT32 ui32ISPRgnBaseReg;
#line 836 "include4/sgxapi.h"
 IMG_BOOL bLoadFIRCoefficients;
 IMG_UINT32 ui32FIRHFilterTable;
 IMG_UINT32 ui32FIRHFilterLeft0;
 IMG_UINT32 ui32FIRHFilterRight0;
 IMG_UINT32 ui32FIRHFilterExtra0;
 IMG_UINT32 ui32FIRHFilterLeft1;
 IMG_UINT32 ui32FIRHFilterRight1;
 IMG_UINT32 ui32FIRHFilterExtra1;
 IMG_UINT32 ui32FIRHFilterLeft2;
 IMG_UINT32 ui32FIRHFilterRight2;
 IMG_UINT32 ui32FIRHFilterExtra2;

 IMG_UINT32 ui32FIRHFilterCentre0;
 IMG_UINT32 ui32FIRHFilterCentre1;





 IMG_UINT32 ui32NumPatches;
 PVRSRV_MEMUPDATE asMemUpdates[5];
} SGXTQ_FULLCUSTOMOP;

typedef struct _SGXTQ_TEXTURE_UPLOADOP_
{
 IMG_PBYTE pbySrcLinAddr;
 IMG_UINT32 ui32BytesPP;
} SGXTQ_TEXTURE_UPLOADOP;
#line 875 "include4/sgxapi.h"
typedef struct _SGXTQ_CUSTOMSHADEROP_
{
 IMG_DEV_VIRTADDR sUSEExecAddr;
 IMG_UINT32 ui32NumPAs;
 IMG_UINT32 ui32NumSAs;
 IMG_UINT32 UseParams[2];
 IMG_UINT32 ui32NumTempRegs;


 IMG_BOOL bUseDMAForSAs;
 IMG_DEV_VIRTADDR sDevVAddrDMASrc;
 IMG_UINT32 ui32LineOffset;


 SGXTQ_ROTATION eRotation;


 SGXTQ_FILTERTYPE aeFilter[3];
} SGXTQ_CUSTOMSHADEROP;

typedef struct _SGXTQ_COLOURLUTOP_
{
 PVRSRV_PIXEL_FORMAT eLUTPxFmt;
 IMG_UINT32 ui32KeySizeInBits;
 IMG_DEV_VIRTADDR sLUTDevVAddr;
} SGXTQ_COLOURLUTOP;

typedef struct _SGXTQ_CLIPBLITOP_
{
 IMG_RECT * psRects;
 IMG_UINT32 ui32RectNum;



 IMG_BOOL bUseSrcRectsForTexCoords;
} SGXTQ_CLIPBLITOP;

typedef struct _SGXTQ_VPBCOEFFS_
{

 IMG_INT16 i16YR;
 IMG_INT16 i16UR;
 IMG_INT16 i16VR;

 IMG_INT16 i16ConstR;
 IMG_INT16 i16ShiftR;


 IMG_INT16 i16YG;
 IMG_INT16 i16UG;
 IMG_INT16 i16VG;

 IMG_INT16 i16ConstG;
 IMG_INT16 i16ShiftG;


 IMG_INT16 i16YB;
 IMG_INT16 i16UB;
 IMG_INT16 i16VB;

 IMG_INT16 i16ConstB;
 IMG_INT16 i16ShiftB;
} SGXTQ_VPBCOEFFS;


typedef struct _SGXTQ_VPBLITOP_
{

 IMG_BOOL bCoeffsGiven;
 SGXTQ_VPBCOEFFS sCoeffs;


 IMG_BOOL bSeparatePlanes;

 IMG_DEV_VIRTADDR asPlaneDevVAddr[2];
} SGXTQ_VPBLITOP;



typedef struct _SGX_TRANSFERCONTEXTCREATE_
{




 IMG_HANDLE hDevMemContext;
 IMG_HANDLE hOSEvent;




} SGX_TRANSFERCONTEXTCREATE;
#line 992 "include4/sgxapi.h"
typedef struct _SGXTQ_CLEARTYPEBLEND_
{
 IMG_UINT32 ui32GammaSurfaceIndex;
 IMG_UINT32 ui32Colour;
 IMG_UINT32 ui32Colour2;
 IMG_UINT32 ui32Gamma;
 IMG_UINT32 ui32GammaSurfacePitch;
} SGXTQ_CLEARTYPEBLEND;


typedef struct _SGXTQ_TATLASBLITOP_
{
 SGXTQ_ALPHA eAlpha;
 IMG_UINT32 ui32NumMappings;
 IMG_RECT * psSrcRects;
 IMG_RECT * psDstRects;
} SGXTQ_TATLASBLITOP;


typedef struct _SGXTQ_ARGB2NV12OP_
{
 IMG_DEV_VIRTADDR sUVDevVAddr;
} SGXTQ_ARGB2NV12OP;


typedef struct _SGX_QUEUETRANSFER_
{
 IMG_UINT32 ui32Flags;
 SGXTQ_BLITTYPE eType;

 union {
  SGXTQ_BLITOP sBlit;
  SGXTQ_MIPGENOP sMipGen;
  SGXTQ_BUFFERBLTOP sBufBlt;
  SGXTQ_CUSTOMOP sCustom;
  SGXTQ_FULLCUSTOMOP sFullCustom;
  SGXTQ_FILLOP sFill;
  SGXTQ_TEXTURE_UPLOADOP sTextureUpload;



  SGXTQ_CUSTOMSHADEROP sCustomShader;
  SGXTQ_COLOURLUTOP sColourLUT;
  SGXTQ_CLIPBLITOP sClipBlit;
  SGXTQ_VPBLITOP sVPBlit;
  SGXTQ_CLEARTYPEBLEND sClearTypeBlend;
  SGXTQ_TATLASBLITOP sTAtlas;
  SGXTQ_ARGB2NV12OP sARGB2NV12;
 } Details;

 IMG_UINT32 ui32NumSources;
 SGXTQ_SURFACE asSources[3];

 IMG_UINT32 ui32NumDest;
 SGXTQ_SURFACE asDests[1];
#line 1055 "include4/sgxapi.h"
 IMG_UINT32 ui32NumSrcRects;
 IMG_RECT asSrcRects[3];


 IMG_UINT32 ui32NumDestRects;
 IMG_RECT asDestRects[1];
#line 1073 "include4/sgxapi.h"
 IMG_BOOL bPDumpContinuous;

 IMG_UINT32 ui32NumStatusValues;
 PVRSRV_MEMUPDATE asMemUpdates[2];
} SGX_QUEUETRANSFER;

typedef struct _SGX_SUBMITTRANSFER_
{
 IMG_UINT32 ui32NumStatusValues;
 PVRSRV_MEMUPDATE asMemUpdates[2];

 IMG_HANDLE hTransferSubmit;







} SGX_SUBMITTRANSFER;
#line 1102 "include4/sgxapi.h"

PVRSRV_ERROR SGXGetClientInfo(PVRSRV_DEV_DATA *psDevData,
             PVRSRV_SGX_CLIENT_INFO *psSGXInfo);


PVRSRV_ERROR SGXReleaseClientInfo(PVRSRV_DEV_DATA *psDevData,
              PVRSRV_SGX_CLIENT_INFO *psSGXInfo);


PVRSRV_ERROR SGXGetInternalDevInfo(const PVRSRV_DEV_DATA *psDevData,
            PVRSRV_SGX_INTERNALDEV_INFO *psSGXInternalDevInfo);



PVRSRV_ERROR SGXScheduleProcessQueues(PVRSRV_DEV_DATA *psDevData);


PVRSRV_ERROR SGXKickTA(PVRSRV_DEV_DATA *psDevData,
         SGX_KICKTA *psKickTA,
         SGX_KICKTA_OUTPUT *psKickTAOutput,
         IMG_PVOID pvKickTAPDUMP,
         IMG_PVOID pvKickSubmit);








PVRSRV_ERROR SGXCreateRenderContext(PVRSRV_DEV_DATA *psDevData,
             PSGX_CREATERENDERCONTEXT psCreateRenderContext,
             IMG_HANDLE *phRenderContext,
             PPVRSRV_CLIENT_MEM_INFO *psVisTestResultMemInfo);


PVRSRV_ERROR SGXDestroyRenderContext(PVRSRV_DEV_DATA *psDevData,
              IMG_HANDLE hRenderContext,
              PVRSRV_CLIENT_MEM_INFO *psVisTestResultMemInfo,
              IMG_BOOL bForceCleanup);


PVRSRV_ERROR SGXAddRenderTarget(PVRSRV_DEV_DATA *psDevData,
            SGX_ADDRENDTARG *psAddRTInfo,
            IMG_HANDLE *phRTDataSet);


PVRSRV_ERROR SGXRemoveRenderTarget(PVRSRV_DEV_DATA *psDevData,
            IMG_HANDLE hRenderContext,
            IMG_HANDLE hRTDataSet);



PVRSRV_ERROR SGXSetContextPriority(PVRSRV_DEV_DATA *psDevData,
         SGX_CONTEXT_PRIORITY *pePriority,
         IMG_HANDLE hRenderContext,
         IMG_HANDLE hTransferContext);


PVRSRV_ERROR SGXGetPhysPageAddr(PVRSRV_DEV_DATA *psDevData,
            IMG_HANDLE hDevMemHeap,
            IMG_DEV_VIRTADDR sDevVAddr,
            IMG_DEV_PHYADDR *pDevPAddr,
            IMG_CPU_PHYADDR *pCpuPAddr);



PVRSRV_ERROR SGXGetMMUPDAddr(PVRSRV_DEV_DATA *psDevData,
            IMG_HANDLE hDevMemContext,
            IMG_DEV_PHYADDR *psPDDevPAddr);


PVRSRV_ERROR SGXGetMiscInfo(PVRSRV_DEV_DATA *psDevData,
           SGX_MISC_INFO *psData);



PVRSRV_ERROR SGXCreateTransferContext(PVRSRV_DEV_DATA *psDevData,
               IMG_UINT32 ui32RequestedSBSize,
               SGX_TRANSFERCONTEXTCREATE *psCreateTransfer,
               IMG_HANDLE *phTransferContext);

PVRSRV_ERROR SGXDestroyTransferContext(IMG_HANDLE hTransferContext,
             IMG_BOOL bForceCleanup);


PVRSRV_ERROR SGXQueueTransfer(IMG_HANDLE hTransferContext,
            SGX_QUEUETRANSFER *psQueueTransfer);
#line 1198 "include4/sgxapi.h"

PVRSRV_ERROR SGX2DQueryBlitsComplete(PVRSRV_DEV_DATA *psDevData,
              PVRSRV_CLIENT_SYNC_INFO *psSyncInfo,
              IMG_BOOL bWaitForComplete);
#line 36 "services4/srvinit/devices/sgx/sgx_mkif.h" 2
#line 1 "services4/include/sgx_mkif_km.h" 1
#line 37 "services4/include/sgx_mkif_km.h"
#line 1 "services4/include/servicesint.h" 1
#line 42 "services4/include/servicesint.h"
#line 1 "include4/services.h" 1
#line 43 "services4/include/servicesint.h" 2
#line 1 "services4/system/omap4/sysinfo.h" 1
#line 44 "services4/include/servicesint.h" 2
#line 61 "services4/include/servicesint.h"
typedef enum _PVRSRV_MEMTYPE_
{
 PVRSRV_MEMTYPE_UNKNOWN = 0,
 PVRSRV_MEMTYPE_DEVICE = 1,
 PVRSRV_MEMTYPE_DEVICECLASS = 2,
 PVRSRV_MEMTYPE_WRAPPED = 3,
 PVRSRV_MEMTYPE_MAPPED = 4,
} PVRSRV_MEMTYPE;




typedef struct _PVRSRV_KERNEL_MEM_INFO_
{

 IMG_PVOID pvLinAddrKM;


 IMG_DEV_VIRTADDR sDevVAddr;


 IMG_UINT32 ui32Flags;


 IMG_SIZE_T uAllocSize;


 PVRSRV_MEMBLK sMemBlk;


 IMG_PVOID pvSysBackupBuffer;


 IMG_UINT32 ui32RefCount;


 IMG_BOOL bPendingFree;





 IMG_UINT64 ui64Stamp;







 struct _PVRSRV_KERNEL_SYNC_INFO_ *psKernelSyncInfo;

 PVRSRV_MEMTYPE memType;
#line 123 "services4/include/servicesint.h"
 struct {



  IMG_BOOL bInUse;



  IMG_HANDLE hDevCookieInt;



  IMG_UINT32 ui32ShareIndex;




  IMG_UINT32 ui32OrigReqAttribs;
  IMG_UINT32 ui32OrigReqSize;
  IMG_UINT32 ui32OrigReqAlignment;
 } sShareMemWorkaround;
} PVRSRV_KERNEL_MEM_INFO;





typedef struct _PVRSRV_KERNEL_SYNC_INFO_
{

 PVRSRV_SYNC_DATA *psSyncData;


 IMG_DEV_VIRTADDR sWriteOpsCompleteDevVAddr;


 IMG_DEV_VIRTADDR sReadOpsCompleteDevVAddr;


 IMG_DEV_VIRTADDR sReadOps2CompleteDevVAddr;


 PVRSRV_KERNEL_MEM_INFO *psSyncDataMemInfoKM;




 IMG_UINT32 ui32RefCount;


 IMG_HANDLE hResItem;


 IMG_UINT32 ui32UID;
} PVRSRV_KERNEL_SYNC_INFO;






typedef struct _PVRSRV_DEVICE_SYNC_OBJECT_
{

 IMG_UINT32 ui32ReadOpsPendingVal;
 IMG_DEV_VIRTADDR sReadOpsCompleteDevVAddr;
 IMG_UINT32 ui32WriteOpsPendingVal;
 IMG_DEV_VIRTADDR sWriteOpsCompleteDevVAddr;
 IMG_UINT32 ui32ReadOps2PendingVal;
 IMG_DEV_VIRTADDR sReadOps2CompleteDevVAddr;
} PVRSRV_DEVICE_SYNC_OBJECT;






typedef struct _PVRSRV_SYNC_OBJECT
{
 PVRSRV_KERNEL_SYNC_INFO *psKernelSyncInfoKM;
 IMG_UINT32 ui32WriteOpsPending;
 IMG_UINT32 ui32ReadOpsPending;
 IMG_UINT32 ui32ReadOps2Pending;

}PVRSRV_SYNC_OBJECT, *PPVRSRV_SYNC_OBJECT;





typedef struct _PVRSRV_COMMAND
{
 IMG_SIZE_T uCmdSize;
 IMG_UINT32 ui32DevIndex;
 IMG_UINT32 CommandType;
 IMG_UINT32 ui32DstSyncCount;
 IMG_UINT32 ui32SrcSyncCount;
 PVRSRV_SYNC_OBJECT *psDstSync;

 PVRSRV_SYNC_OBJECT *psSrcSync;

 IMG_SIZE_T uDataSize;

 IMG_UINT32 ui32ProcessID;
 IMG_VOID *pvData;

 PFN_QUEUE_COMMAND_COMPLETE pfnCommandComplete;
 IMG_HANDLE hCallbackData;
}PVRSRV_COMMAND, *PPVRSRV_COMMAND;
#line 258 "services4/include/servicesint.h"
typedef struct _PVRSRV_QUEUE_INFO_
{
 IMG_VOID *pvLinQueueKM;


 IMG_VOID *pvLinQueueUM;


 volatile IMG_SIZE_T ui32ReadOffset;


 volatile IMG_SIZE_T ui32WriteOffset;


 IMG_UINT32 *pui32KickerAddrKM;


 IMG_UINT32 *pui32KickerAddrUM;


 IMG_SIZE_T ui32QueueSize;

 IMG_UINT32 ui32ProcessID;

 IMG_HANDLE hMemBlock[2];

 struct _PVRSRV_QUEUE_INFO_ *psNextKM;
}PVRSRV_QUEUE_INFO;


typedef struct _PVRSRV_HEAP_INFO_KM_
{
 IMG_UINT32 ui32HeapID;
 IMG_DEV_VIRTADDR sDevVAddrBase;

 IMG_HANDLE hDevMemHeap;
 IMG_UINT32 ui32HeapByteSize;
 IMG_UINT32 ui32Attribs;
 IMG_UINT32 ui32XTileStride;
}PVRSRV_HEAP_INFO_KM;





typedef struct _PVRSRV_EVENTOBJECT_KM_
{

 IMG_CHAR szName[(50)];

 IMG_HANDLE hOSEventKM;

} PVRSRV_EVENTOBJECT_KM;






typedef struct _PVRSRV_MISC_INFO_KM_
{
 IMG_UINT32 ui32StateRequest;
 IMG_UINT32 ui32StatePresent;


 IMG_VOID *pvSOCTimerRegisterKM;
 IMG_VOID *pvSOCTimerRegisterUM;
 IMG_HANDLE hSOCTimerRegisterOSMemHandle;
 IMG_HANDLE hSOCTimerRegisterMappingInfo;


 IMG_VOID *pvSOCClockGateRegs;
 IMG_UINT32 ui32SOCClockGateRegsSize;


 IMG_CHAR *pszMemoryStr;
 IMG_UINT32 ui32MemoryStrLen;


 PVRSRV_EVENTOBJECT_KM sGlobalEventObject;
 IMG_HANDLE hOSGlobalEvent;


 IMG_UINT32 aui32DDKVersion[4];


 struct
 {

  IMG_BOOL bDeferOp;


  PVRSRV_MISC_INFO_CPUCACHEOP_TYPE eCacheOpType;


  PVRSRV_KERNEL_MEM_INFO *psKernelMemInfo;


  IMG_VOID *pvBaseVAddr;


  IMG_UINT32 ui32Length;
 } sCacheOpCtl;


 struct
 {

  PVRSRV_KERNEL_MEM_INFO *psKernelMemInfo;


  IMG_UINT32 ui32RefCount;
 } sGetRefCountCtl;
} PVRSRV_MISC_INFO_KM;



typedef PVRSRV_ERROR (*PFN_INSERT_CMD) (PVRSRV_QUEUE_INFO*,
          PVRSRV_COMMAND**,
          IMG_UINT32,
          IMG_UINT16,
          IMG_UINT32,
          PVRSRV_KERNEL_SYNC_INFO*[],
          IMG_UINT32,
          PVRSRV_KERNEL_SYNC_INFO*[],
          IMG_UINT32);

typedef PVRSRV_ERROR (*PFN_SUBMIT_CMD) (PVRSRV_QUEUE_INFO*, PVRSRV_COMMAND*, IMG_BOOL);
#line 396 "services4/include/servicesint.h"
typedef struct PVRSRV_DEVICECLASS_BUFFER_TAG
{
 PFN_GET_BUFFER_ADDR pfnGetBufferAddr;
 IMG_HANDLE hDevMemContext;
 IMG_HANDLE hExtDevice;
 IMG_HANDLE hExtBuffer;
 PVRSRV_KERNEL_SYNC_INFO *psKernelSyncInfo;
 IMG_UINT32 ui32MemMapRefCount;
} PVRSRV_DEVICECLASS_BUFFER;





typedef struct PVRSRV_CLIENT_DEVICECLASS_INFO_TAG
{



 IMG_HANDLE hDeviceKM;

 IMG_HANDLE hServices;
} PVRSRV_CLIENT_DEVICECLASS_INFO;


typedef enum
{
 PVRSRV_FREE_CALLBACK_ORIGIN_ALLOCATOR,
 PVRSRV_FREE_CALLBACK_ORIGIN_IMPORTER,
 PVRSRV_FREE_CALLBACK_ORIGIN_EXTERNAL,
}
PVRSRV_FREE_CALLBACK_ORIGIN;



PVRSRV_ERROR FreeMemCallBackCommon(PVRSRV_KERNEL_MEM_INFO *psMemInfo,
                                   IMG_UINT32 ui32Param,
                                   PVRSRV_FREE_CALLBACK_ORIGIN eCallbackOrigin);



PVRSRV_ERROR PVRSRVQueueCommand(IMG_HANDLE hQueueInfo,
        PVRSRV_COMMAND *psCommand);
#line 457 "services4/include/servicesint.h"
 PVRSRV_ERROR
PVRSRVAllocSharedSysMem(const PVRSRV_CONNECTION *psConnection,
      IMG_UINT32 ui32Flags,
      IMG_SIZE_T ui32Size,
      PVRSRV_CLIENT_MEM_INFO **ppsClientMemInfo);
#line 474 "services4/include/servicesint.h"
 PVRSRV_ERROR
PVRSRVFreeSharedSysMem(const PVRSRV_CONNECTION *psConnection,
        PVRSRV_CLIENT_MEM_INFO *psClientMemInfo);
#line 498 "services4/include/servicesint.h"
 PVRSRV_ERROR
PVRSRVUnrefSharedSysMem(const PVRSRV_CONNECTION *psConnection,
                        PVRSRV_CLIENT_MEM_INFO *psClientMemInfo);
#line 514 "services4/include/servicesint.h"
 PVRSRV_ERROR
PVRSRVMapMemInfoMem(const PVRSRV_CONNECTION *psConnection,



                    IMG_HANDLE hKernelMemInfo,

                    PVRSRV_CLIENT_MEM_INFO **ppsClientMemInfo);
#line 38 "services4/include/sgx_mkif_km.h" 2
#line 1 "include4/sgxapi_km.h" 1
#line 39 "services4/include/sgx_mkif_km.h" 2
#line 60 "services4/include/sgx_mkif_km.h"
typedef struct _SGXMKIF_COMMAND_
{
 IMG_UINT32 ui32ServiceAddress;
 IMG_UINT32 ui32CacheControl;
 IMG_UINT32 ui32Data[6];
} SGXMKIF_COMMAND;






typedef struct _PVRSRV_SGX_KERNEL_CCB_
{
 SGXMKIF_COMMAND asCommands[256];
} PVRSRV_SGX_KERNEL_CCB;






typedef struct _PVRSRV_SGX_CCB_CTL_
{
 IMG_UINT32 ui32WriteOffset;
 IMG_UINT32 ui32ReadOffset;
} PVRSRV_SGX_CCB_CTL;






typedef struct _SGXMKIF_HOST_CTL_
{





 volatile IMG_UINT32 ui32InitStatus;
 volatile IMG_UINT32 ui32PowerStatus;
 volatile IMG_UINT32 ui32CleanupStatus;




 IMG_UINT32 ui32uKernelDetectedLockups;
 IMG_UINT32 ui32HostDetectedLockups;
 IMG_UINT32 ui32HWRecoverySampleRate;

 IMG_UINT32 ui32uKernelTimerClock;
 IMG_UINT32 ui32ActivePowManSampleRate;
 IMG_UINT32 ui32InterruptFlags;
 IMG_UINT32 ui32InterruptClearFlags;
 IMG_UINT32 ui32BPSetClearSignal;

 IMG_UINT32 ui32NumActivePowerEvents;

 IMG_UINT32 ui32TimeWraps;
 IMG_UINT32 ui32HostClock;
 IMG_UINT32 ui32AssertFail;





 IMG_UINT32 ui32PerfGroup;






 IMG_UINT32 ui32OpenCLDelayCount;
} SGXMKIF_HOST_CTL;
#line 149 "services4/include/sgx_mkif_km.h"
typedef struct _SGXMKIF_CMDTA_SHARED_
{
 IMG_UINT32 ui32CtrlFlags;

 IMG_UINT32 ui32NumTAStatusVals;
 IMG_UINT32 ui32Num3DStatusVals;


 IMG_UINT32 ui32TATQSyncWriteOpsPendingVal;
 IMG_DEV_VIRTADDR sTATQSyncWriteOpsCompleteDevVAddr;
 IMG_UINT32 ui32TATQSyncReadOpsPendingVal;
 IMG_DEV_VIRTADDR sTATQSyncReadOpsCompleteDevVAddr;


 IMG_UINT32 ui323DTQSyncWriteOpsPendingVal;
 IMG_DEV_VIRTADDR s3DTQSyncWriteOpsCompleteDevVAddr;
 IMG_UINT32 ui323DTQSyncReadOpsPendingVal;
 IMG_DEV_VIRTADDR s3DTQSyncReadOpsCompleteDevVAddr;
#line 179 "services4/include/sgx_mkif_km.h"
 IMG_UINT32 ui32NumSrcSyncs;
 PVRSRV_DEVICE_SYNC_OBJECT asSrcSyncs[8];



 PVRSRV_DEVICE_SYNC_OBJECT sTA3DDependency;

 CTL_STATUS sCtlTAStatusInfo[32];
 CTL_STATUS sCtl3DStatusInfo[4];

} SGXMKIF_CMDTA_SHARED;
#line 219 "services4/include/sgx_mkif_km.h"
typedef struct _SGXMKIF_TRANSFERCMD_SHARED_
{


  IMG_UINT32 ui32NumSrcSyncs;
  PVRSRV_DEVICE_SYNC_OBJECT asSrcSyncs[8];


  IMG_UINT32 ui32NumDstSyncs;
  PVRSRV_DEVICE_SYNC_OBJECT asDstSyncs[1];

 IMG_UINT32 ui32TASyncWriteOpsPendingVal;
 IMG_DEV_VIRTADDR sTASyncWriteOpsCompleteDevVAddr;
 IMG_UINT32 ui32TASyncReadOpsPendingVal;
 IMG_DEV_VIRTADDR sTASyncReadOpsCompleteDevVAddr;


 IMG_UINT32 ui323DSyncWriteOpsPendingVal;
 IMG_DEV_VIRTADDR s3DSyncWriteOpsCompleteDevVAddr;
 IMG_UINT32 ui323DSyncReadOpsPendingVal;
 IMG_DEV_VIRTADDR s3DSyncReadOpsCompleteDevVAddr;

 IMG_UINT32 ui32NumStatusVals;
 CTL_STATUS sCtlStatusInfo[2 + 2];
} SGXMKIF_TRANSFERCMD_SHARED, *PSGXMKIF_TRANSFERCMD_SHARED;
#line 264 "services4/include/sgx_mkif_km.h"
typedef struct _SGXMKIF_HWDEVICE_SYNC_LIST_
{
 IMG_DEV_VIRTADDR sAccessDevAddr;
 IMG_UINT32 ui32NumSyncObjects;

 PVRSRV_DEVICE_SYNC_OBJECT asSyncData[1];
} SGXMKIF_HWDEVICE_SYNC_LIST, *PSGXMKIF_HWDEVICE_SYNC_LIST;
#line 363 "services4/include/sgx_mkif_km.h"
typedef struct _SGX_MISCINFO_STRUCT_SIZES_
{




 IMG_UINT32 ui32Sizeof_CMDTA;
 IMG_UINT32 ui32Sizeof_CMDTA_SHARED;
 IMG_UINT32 ui32Sizeof_TRANSFERCMD;
 IMG_UINT32 ui32Sizeof_TRANSFERCMD_SHARED;
 IMG_UINT32 ui32Sizeof_3DREGISTERS;
 IMG_UINT32 ui32Sizeof_HWPBDESC;
 IMG_UINT32 ui32Sizeof_HWRENDERCONTEXT;
 IMG_UINT32 ui32Sizeof_HWRENDERDETAILS;
 IMG_UINT32 ui32Sizeof_HWRTDATA;
 IMG_UINT32 ui32Sizeof_HWRTDATASET;
 IMG_UINT32 ui32Sizeof_HWTRANSFERCONTEXT;
 IMG_UINT32 ui32Sizeof_HOST_CTL;
 IMG_UINT32 ui32Sizeof_COMMAND;
} SGX_MISCINFO_STRUCT_SIZES;
#line 403 "services4/include/sgx_mkif_km.h"
typedef struct _PVRSRV_SGX_MISCINFO_INFO
{
 IMG_UINT32 ui32MiscInfoFlags;
 PVRSRV_SGX_MISCINFO_FEATURES sSGXFeatures;
 SGX_MISCINFO_STRUCT_SIZES sSGXStructSizes;




} PVRSRV_SGX_MISCINFO_INFO;
#line 428 "services4/include/sgx_mkif_km.h"
typedef struct _SGXMKIF_HWPERF_CB_ENTRY_
{
 IMG_UINT32 ui32FrameNo;
 IMG_UINT32 ui32PID;
 IMG_UINT32 ui32RTData;
 IMG_UINT32 ui32Type;
 IMG_UINT32 ui32Ordinal;
 IMG_UINT32 ui32Info;
 IMG_UINT32 ui32TimeWraps;
 IMG_UINT32 ui32Time;

 IMG_UINT32 ui32Counters[(1)][9];
 IMG_UINT32 ui32MiscCounters[(1)][8];
} SGXMKIF_HWPERF_CB_ENTRY;





typedef struct _SGXMKIF_HWPERF_CB_
{
 IMG_UINT32 ui32Woff;
 IMG_UINT32 ui32Roff;
 IMG_UINT32 ui32Ordinal;
 SGXMKIF_HWPERF_CB_ENTRY psHWPerfCBData[0x100];
} SGXMKIF_HWPERF_CB;
#line 37 "services4/srvinit/devices/sgx/sgx_mkif.h" 2







typedef struct _SGXMK_STATE_
{




 IMG_DEV_VIRTADDR sTransferCCBCmd;

 IMG_UINT32 ui32TACurrentPriority;
 IMG_UINT32 ui32BlockedPriority;
 IMG_UINT32 ui323DCurrentPriority;

 IMG_DEV_VIRTADDR s3DContext;




 IMG_UINT32 ui32ITAFlags;
 IMG_UINT32 ui32IRenderFlags;

 IMG_UINT32 ui32HostRequest;

 IMG_UINT32 ui32ActivePowerCounter;
 IMG_UINT32 ui32ActivePowerFlags;

 IMG_DEV_VIRTADDR sTransferContextHead[3];
 IMG_DEV_VIRTADDR sTransferContextTail[3];

 IMG_DEV_VIRTADDR sPartialRenderContextHead[3];
 IMG_DEV_VIRTADDR sPartialRenderContextTail[3];

 IMG_DEV_VIRTADDR sCompleteRenderContextHead[3];
 IMG_DEV_VIRTADDR sCompleteRenderContextTail[3];
#line 97 "services4/srvinit/devices/sgx/sgx_mkif.h"
 IMG_UINT32 ui32HWPerfFlags;
#line 112 "services4/srvinit/devices/sgx/sgx_mkif.h"
} SGXMK_STATE;






typedef struct _PVRSRV_SGX_EDMPROG_PRIMATTR_
{
 IMG_UINT32 ui32PDSIn0;
 IMG_UINT32 ui32PDSIn1;

 IMG_UINT32 ui32TimeStamp;

} PVRSRV_SGX_EDMPROG_PRIMATTR;
#line 144 "services4/srvinit/devices/sgx/sgx_mkif.h"
typedef struct _PVRSRV_SGX_EDMPROG_SECATTR_
{

 IMG_DEV_VIRTADDR sTA3DCtl;
 IMG_DEV_VIRTADDR sHostCtl;
 IMG_DEV_VIRTADDR sCCBCtl;



 SGXMK_STATE sMKState;


} PVRSRV_SGX_EDMPROG_SECATTR;
#line 289 "services4/srvinit/devices/sgx/sgx_mkif.h"
typedef struct _SGXMK_TA3D_CTL_
{
 PVRSRV_SGX_EDMPROG_SECATTR sMKSecAttr;
#line 303 "services4/srvinit/devices/sgx/sgx_mkif.h"
 IMG_DEV_VIRTADDR sContext0RTData;

 IMG_DEV_VIRTADDR sContext1RTData;

 IMG_DEV_VIRTADDR sKernelCCB;
 IMG_DEV_PHYADDR sKernelPDDevPAddr;
#line 321 "services4/srvinit/devices/sgx/sgx_mkif.h"
 IMG_DEV_VIRTADDR sTACCBCmd;
 IMG_DEV_VIRTADDR sTARTData;
 IMG_DEV_VIRTADDR sTARenderDetails;
 IMG_DEV_VIRTADDR sTARenderContext;
#line 338 "services4/srvinit/devices/sgx/sgx_mkif.h"
 IMG_DEV_VIRTADDR s3DRTData;
 IMG_DEV_VIRTADDR s3DRenderDetails;







 IMG_UINT32 ui32PendingLoopbacks;

 IMG_DEV_VIRTADDR sResManCleanupData;
#line 364 "services4/srvinit/devices/sgx/sgx_mkif.h"
 IMG_UINT16 ui16SavedZLSThreshold;
 IMG_UINT16 ui16Num23055PagesUsed;

 IMG_UINT16 ui16LastMTEPageAllocation;

 IMG_UINT16 ui16LastMTEPageRgn;

 IMG_UINT32 ui32MTETEDeadlockTicks;
#line 381 "services4/srvinit/devices/sgx/sgx_mkif.h"
 IMG_UINT32 ui32NumDLRenders;





 IMG_UINT32 ui32DeadlockPageIncrease;
#line 397 "services4/srvinit/devices/sgx/sgx_mkif.h"
 IMG_UINT32 ui32AbortedMacroTile;
#line 419 "services4/srvinit/devices/sgx/sgx_mkif.h"
 IMG_UINT32 ui32TAFrameNum;
 IMG_UINT32 ui323DFrameNum;
#line 454 "services4/srvinit/devices/sgx/sgx_mkif.h"
 IMG_DEV_VIRTADDR sHWPerfCBDevVAddr;
 IMG_DEV_VIRTADDR sTASigBufferDevVAddr;
 IMG_DEV_VIRTADDR s3DSigBufferDevVAddr;


 IMG_DEV_VIRTADDR sTAHWPBDesc;
 IMG_DEV_VIRTADDR s3DHWPBDesc;
 IMG_DEV_VIRTADDR sHostHWPBDesc;





 IMG_UINT32 ui32TAPID;
 IMG_UINT32 ui323DPID;
#line 478 "services4/srvinit/devices/sgx/sgx_mkif.h"
 IMG_UINT32 ui32IdleCoreRefCount;



 IMG_UINT32 ui32HWRSignaturesInvalid;

 IMG_UINT32 ui32HWRTimerTicksSinceTA;
 IMG_UINT32 ui32HWRTASignature;
 IMG_UINT32 ui32HWRTimerTicksSince3D;
 IMG_UINT32 ui32HWR3DSignature;
#line 496 "services4/srvinit/devices/sgx/sgx_mkif.h"
} SGXMK_TA3D_CTL;
#line 547 "services4/srvinit/devices/sgx/sgx_mkif.h"
enum
{






  PVRSRV_SGX_TASIG_CLIP_SIG1 = 0,
  PVRSRV_SGX_TASIG_MTE_SIG1,
  PVRSRV_SGX_TASIG_MTE_SIG2,

  PVRSRV_SGX_TASIG_TE1,
  PVRSRV_SGX_TASIG_TE2,


  PVRSRV_SGX_TASIG_VDM_MTE,



 PVRSRV_SGX_TASIG_NUM
};






enum
{
#line 596 "services4/srvinit/devices/sgx/sgx_mkif.h"
  PVRSRV_SGX_3DSIG_ISP_FPU = 0,
#line 609 "services4/srvinit/devices/sgx/sgx_mkif.h"
  PVRSRV_SGX_3DSIG_ISP_SIG1,
  PVRSRV_SGX_3DSIG_ISP_SIG2,
  PVRSRV_SGX_3DSIG_ISP_SIG3,
  PVRSRV_SGX_3DSIG_ISP_SIG4,
#line 629 "services4/srvinit/devices/sgx/sgx_mkif.h"
  PVRSRV_SGX_3DSIG_ITR_TAG0,
  PVRSRV_SGX_3DSIG_ITR_TAG1,
#line 643 "services4/srvinit/devices/sgx/sgx_mkif.h"
  PVRSRV_SGX_3DSIG_TF_SIG00,
  PVRSRV_SGX_3DSIG_TF_SIG01,
  PVRSRV_SGX_3DSIG_TF_SIG02,
  PVRSRV_SGX_3DSIG_TF_SIG03,




  PVRSRV_SGX_3DSIG_ITR_USE0,
  PVRSRV_SGX_3DSIG_ITR_USE1,
  PVRSRV_SGX_3DSIG_ITR_USE2,
  PVRSRV_SGX_3DSIG_ITR_USE3,




  PVRSRV_SGX_3DSIG_PIXELBE_SIG01,
  PVRSRV_SGX_3DSIG_PIXELBE_SIG02,







 PVRSRV_SGX_3DSIG_NUM
};
#line 680 "services4/srvinit/devices/sgx/sgx_mkif.h"
typedef struct
{
 IMG_UINT32 ui32NumSignatures;
 IMG_UINT32 ui32NumSamples;
 IMG_UINT32 ui32RegisterOffset[PVRSRV_SGX_TASIG_NUM];
 IMG_UINT32 ui32Signature[0x40][PVRSRV_SGX_TASIG_NUM];
} SGXMKIF_TASIG_BUFFER;

typedef struct
{
 IMG_UINT32 ui32NumSignatures;
 IMG_UINT32 ui32NumSamples;
 IMG_UINT32 ui32RegisterOffset[PVRSRV_SGX_3DSIG_NUM];
 IMG_UINT32 ui32Signature[0x40][PVRSRV_SGX_3DSIG_NUM];
} SGXMKIF_3DSIG_BUFFER;
#line 36 "services4/srvinit/devices/sgx/usedefs.h" 2
#line 1 "services4/include/sgx_mkif_client.h" 1
#line 195 "services4/include/sgx_mkif_client.h"
typedef struct _SGXMKIF_HWPBBLOCK_
{
 IMG_UINT32 ui32PageCount;
 IMG_UINT16 ui16Head;
 IMG_UINT16 ui16Tail;
 IMG_DEV_VIRTADDR sParentHWPBDescDevVAddr;
 IMG_DEV_VIRTADDR sNextHWPBBlockDevVAddr;
} SGXMKIF_HWPBBLOCK, *PSGXMKIF_HWPBBLOCK;


typedef struct _SGXMKIF_HWPBDESC_
{

 IMG_UINT32 ui32PBFlags;


 IMG_UINT32 ui32NumPages;
 IMG_UINT32 ui32FreeListInitialHT;
 IMG_UINT32 ui32FreeListInitialPrev;
 IMG_DEV_VIRTADDR sEVMPageTableDevVAddr;

 IMG_UINT32 ui32AllocPages;

 IMG_UINT32 ui32FreeListHT;
 IMG_UINT32 ui32FreeListPrev;


 IMG_UINT32 uiLocalPages;
 IMG_UINT32 uiGlobalPages;






 IMG_UINT32 ui32TAThreshold;
 IMG_UINT32 ui32ZLSThreshold;
 IMG_UINT32 ui32GlobalThreshold;
 IMG_UINT32 ui32PDSThreshold;

 IMG_DEV_VIRTADDR sListPBBlockDevVAddr;






} SGXMKIF_HWPBDESC, *PSGXMKIF_HWPBDESC;
#line 259 "services4/include/sgx_mkif_client.h"
typedef struct _SGXMKIF_HWPBDESC_UPDATE_
{

 IMG_UINT32 ui32TAThreshold;
 IMG_UINT32 ui32ZLSThreshold;
 IMG_UINT32 ui32GlobalThreshold;
 IMG_UINT32 ui32PDSThreshold;
#line 278 "services4/include/sgx_mkif_client.h"
}SGXMKIF_HWPBDESC_UPDATE;






typedef struct _SGXMKIF_TAREGISTERS_
{
 IMG_UINT32 ui32TEAA;
 IMG_UINT32 ui32TEMTile1;
 IMG_UINT32 ui32TEMTile2;
 IMG_UINT32 ui32TEScreen;
 IMG_UINT32 ui32TEMTileStride;
 IMG_UINT32 ui32TEPSG;
 IMG_UINT32 ui32VDMCtrlStreamBase;
 IMG_UINT32 ui32MTECtrl;
 IMG_UINT32 aui32TEPSGRgnBase[(1)];
 IMG_UINT32 aui32TETPCBase[(1)];
 IMG_UINT32 ui32MTEWCompare;
 IMG_UINT32 ui32MTEWClamp;
 IMG_UINT32 ui32MTEScreen;
 IMG_UINT32 ui32USELDRedirect;
 IMG_UINT32 ui32USESTRange;
 IMG_UINT32 ui32BIFTAReqBase;
#line 325 "services4/include/sgx_mkif_client.h"
 IMG_UINT32 ui32MTEMSCtrl;
} SGXMKIF_TAREGISTERS, *PSGXMKIF_TAREGISTERS;





typedef struct _SGXMKIF_CMDTA_
{
 IMG_UINT32 ui32Size;
 IMG_UINT32 ui32Flags;
 IMG_UINT32 aui32SpecObject[3];
 IMG_UINT32 ui32NumVertexPartitions;
 IMG_UINT32 ui32SPMNumVertexPartitions;
 IMG_UINT32 ui32RenderFlags;
 IMG_UINT32 ui32FrameNum;
 IMG_DEV_VIRTADDR sHWPBDescDevVAddr;
 SGXMKIF_HWPBDESC_UPDATE sHWPBDescUpdate;
 IMG_DEV_VIRTADDR sHWRenderDetailsDevAddr;
 IMG_DEV_VIRTADDR sHWDstSyncListDevAddr;
 IMG_DEV_VIRTADDR sHWRTDataSetDevAddr;
 IMG_DEV_VIRTADDR sHWRTDataDevAddr;
#line 360 "services4/include/sgx_mkif_client.h"
 IMG_DEV_VIRTADDR sVisTestResultsDevAddr;





 IMG_UINT32 ui32Num3DRegs;

 SGXMKIF_CMDTA_SHARED sShared;
 SGXMKIF_TAREGISTERS sTARegs;

 PVRSRV_HWREG s3DRegUpdates[1];
#line 380 "services4/include/sgx_mkif_client.h"
} SGXMKIF_CMDTA,*PSGXMKIF_CMDTA;







typedef struct _SGXMKIF_HWRTDATA_
{
 IMG_DEV_VIRTADDR sHWRenderContextDevAddr;
 IMG_DEV_VIRTADDR sHWRenderDetailsDevAddr;



 IMG_DEV_VIRTADDR sTileRgnLUTDevAddr;




 IMG_UINT32 ui32LastMTIdx;
#line 412 "services4/include/sgx_mkif_client.h"
 IMG_UINT32 ui32NumTileBlocksPerMT;
 IMG_UINT32 ui32MTRegionArraySize;

 IMG_DEV_VIRTADDR sLastRgnLUTDevAddr;
 IMG_DEV_VIRTADDR sRegionArrayDevAddr[(1)];
 IMG_DEV_VIRTADDR sLastRegionDevAddr[(1)];





 IMG_DEV_VIRTADDR sBGObjBaseDevAddr;
 IMG_DEV_VIRTADDR sContextStateDevAddr;
#line 433 "services4/include/sgx_mkif_client.h"
 IMG_DEV_VIRTADDR sContextControlDevAddr[(1)];
 IMG_DEV_VIRTADDR sContextOTPMDevAddr[(1)];
 IMG_DEV_VIRTADDR asTailPtrDevAddr[(1)];
 IMG_UINT32 ui32TailSize;
#line 445 "services4/include/sgx_mkif_client.h"
 IMG_DEV_VIRTADDR sRTStatusDevAddr;
 volatile IMG_UINT32 ui32CommonStatus;
} SGXMKIF_HWRTDATA, *PSGXMKIF_HWRTDATA;
#line 457 "services4/include/sgx_mkif_client.h"
typedef struct _SGXMKIF_HWRTDATASET_
{
 IMG_DEV_VIRTADDR sPendingCountDevAddr;
 IMG_UINT32 ui32CompleteCount;

 IMG_UINT32 ui32MTileWidth;





 IMG_UINT32 ui32NumOutOfMemSignals;
 IMG_UINT32 ui32NumSPMRenders;
#line 481 "services4/include/sgx_mkif_client.h"
 IMG_UINT32 ui32NumRTData;
 SGXMKIF_HWRTDATA asHWRTData[1];

} SGXMKIF_HWRTDATASET, *PSGXMKIF_HWRTDATASET;
#line 496 "services4/include/sgx_mkif_client.h"
typedef struct _SGXMKIF_3DREGISTERS_
{



 IMG_UINT32 ui32BIF3DReqBase;
 IMG_UINT32 ui32BIFZLSReqBase;
 IMG_UINT32 ui32PixelBE;
 IMG_UINT32 ui32ISPIPFMisc;
 IMG_UINT32 ui323DAAMode;



 IMG_UINT32 ui32ISPDBias[1];




 IMG_UINT32 aui32ISPRgnBase[(1)];
#line 527 "services4/include/sgx_mkif_client.h"
 IMG_UINT32 ui32ISPOGLMode;
 IMG_UINT32 ui32ISPPerpendicular;
 IMG_UINT32 ui32ISPCullValue;


 IMG_UINT32 aui32ZLSExtZRgnBase[(1)];

 IMG_UINT32 ui32ISPZLSCtl;
 IMG_UINT32 ui32ISPZLoadBase;
 IMG_UINT32 ui32ISPZStoreBase;
 IMG_UINT32 ui32ISPStencilLoadBase;
 IMG_UINT32 ui32ISPStencilStoreBase;
 IMG_UINT32 ui32ISPBgObjDepth;
 IMG_UINT32 ui32ISPBgObj;
 IMG_UINT32 ui32ISPBgObjTag;



 IMG_UINT32 ui32ISPMultisampleCtl;
 IMG_UINT32 ui32ISPTAGCtrl;
 IMG_UINT32 ui32TSPConfig;
 IMG_UINT32 ui32EDMPixelPDSExec;
 IMG_UINT32 ui32EDMPixelPDSData;
 IMG_UINT32 ui32EDMPixelPDSInfo;




 IMG_UINT32 ui32USEFilter0Left;
 IMG_UINT32 ui32USEFilter0Right;
 IMG_UINT32 ui32USEFilter0Extra;
 IMG_UINT32 ui32USEFilter1Left;
 IMG_UINT32 ui32USEFilter1Right;
 IMG_UINT32 ui32USEFilter1Extra;
 IMG_UINT32 ui32USEFilter2Left;
 IMG_UINT32 ui32USEFilter2Right;
 IMG_UINT32 ui32USEFilter2Extra;
 IMG_UINT32 ui32USEFilterTable;

 IMG_UINT32 ui32USEFilter0Centre;
 IMG_UINT32 ui32USEFilter1Centre;
#line 605 "services4/include/sgx_mkif_client.h"
 IMG_UINT32 ui32ISPDepthsort;

} SGXMKIF_3DREGISTERS, *PSGXMKIF_3DREGISTERS;






typedef struct _SGXMKIF_HWRENDERDETAILS_
{
 SGXMKIF_3DREGISTERS s3DRegs;
 IMG_DEV_VIRTADDR sAccessDevAddr;
 IMG_UINT32 ui32RenderFlags;

 IMG_DEV_VIRTADDR sHWRTDataSetDevAddr;
 IMG_DEV_VIRTADDR sHWRTDataDevAddr;

 IMG_DEV_VIRTADDR sHWDstSyncListDevAddr;


 IMG_UINT32 ui32TQSyncWriteOpsPendingVal;
 IMG_DEV_VIRTADDR sTQSyncWriteOpsCompleteDevVAddr;
 IMG_UINT32 ui32TQSyncReadOpsPendingVal;
 IMG_DEV_VIRTADDR sTQSyncReadOpsCompleteDevVAddr;

 PVRSRV_DEVICE_SYNC_OBJECT sTA3DDependency;
#line 652 "services4/include/sgx_mkif_client.h"
 IMG_UINT32 ui3CurrentMTIdx;





 IMG_DEV_VIRTADDR sVisTestResultsDevAddr;




 IMG_UINT32 ui32TEState[(1)];

 IMG_DEV_VIRTADDR sPrevDevAddr;
 IMG_DEV_VIRTADDR sNextDevAddr;

 IMG_UINT32 aui32SpecObject[3];

 IMG_UINT32 ui32NumPixelPartitions;


 IMG_UINT32 ui32FrameNum;


 IMG_UINT32 ui32Num3DStatusVals;
 CTL_STATUS sCtl3DStatusInfo[4];
#line 688 "services4/include/sgx_mkif_client.h"
 IMG_UINT32 ui32NumSrcSyncs;
 PVRSRV_DEVICE_SYNC_OBJECT asSrcSyncs[8];


} SGXMKIF_HWRENDERDETAILS, *PSGXMKIF_HWRENDERDETAILS;






typedef struct _SGXMKIF_HWCONTEXT_
{
 IMG_UINT32 ui32Flags;
 IMG_UINT32 ui32Priority;
 IMG_DEV_PHYADDR sPDDevPAddr;
} SGXMKIF_HWCONTEXT;
#line 755 "services4/include/sgx_mkif_client.h"
typedef struct _SGXMKIF_HWTRANSFERCONTEXT_
{
 SGXMKIF_HWCONTEXT sCommon;


 IMG_DEV_VIRTADDR sCCBBaseDevAddr;
 IMG_DEV_VIRTADDR sCCBCtlDevAddr;
 IMG_UINT32 ui32Count;

  PVRSRV_DEVICE_SYNC_OBJECT asSrcSyncObjectSnapshot[8];
  PVRSRV_DEVICE_SYNC_OBJECT asDstSyncObjectSnapshot[1];
#line 780 "services4/include/sgx_mkif_client.h"
 IMG_UINT32 ui32PID;

 IMG_DEV_VIRTADDR sPrevDevAddr;
 IMG_DEV_VIRTADDR sNextDevAddr;
} SGXMKIF_HWTRANSFERCONTEXT, *PSGXMKIF_HWTRANSFERCONTEXT;

typedef struct _SGXMKIF_MEMUPDATE_
{
 IMG_DEV_VIRTADDR sUpdateAddr;
 IMG_UINT32 ui32UpdateVal;
} SGXMKIF_MEMUPDATE;




typedef struct _SGXMKIF_TRANSFERCMD_
{

 struct
 {
  IMG_UINT32 ui32ISPBgObjTag;
  IMG_UINT32 ui32ISPBgObj;
  IMG_UINT32 ui32ISPBgObjDepth;
  IMG_UINT32 ui32ISPRender;
  IMG_UINT32 ui32ISPRgnBase;
  IMG_UINT32 ui32ISPIPFMisc;
  IMG_UINT32 ui32Bif3DReqBase;
  IMG_UINT32 ui323DAAMode;
  IMG_UINT32 ui32ISPMultiSampCtl;
  IMG_UINT32 ui32EDMPixelPDSExec;
  IMG_UINT32 ui32EDMPixelPDSData;
  IMG_UINT32 ui32EDMPixelPDSInfo;
  IMG_UINT32 ui32ISPRenderBox1;
  IMG_UINT32 ui32ISPRenderBox2;
  IMG_UINT32 ui32PixelBE;




  IMG_UINT32 ui32PDSExecBase;
#line 861 "services4/include/sgx_mkif_client.h"
  IMG_UINT32 ui32FIRHFilterTable;
  IMG_UINT32 ui32FIRHFilterLeft0;
  IMG_UINT32 ui32FIRHFilterRight0;
  IMG_UINT32 ui32FIRHFilterExtra0;
  IMG_UINT32 ui32FIRHFilterLeft1;
  IMG_UINT32 ui32FIRHFilterRight1;
  IMG_UINT32 ui32FIRHFilterExtra1;
  IMG_UINT32 ui32FIRHFilterLeft2;
  IMG_UINT32 ui32FIRHFilterRight2;
  IMG_UINT32 ui32FIRHFilterExtra2;


  IMG_UINT32 ui32FIRHFilterCentre0;
  IMG_UINT32 ui32FIRHFilterCentre1;


 } sHWRegs;

 IMG_UINT32 ui32Size;

 IMG_UINT32 ui32Flags;

 SGXMKIF_TRANSFERCMD_SHARED sShared;
#line 893 "services4/include/sgx_mkif_client.h"
 IMG_BOOL bLoadFIRCoefficients;

 IMG_UINT32 ui32NumPixelPartitions;

 IMG_UINT32 ui32FenceID;

 IMG_UINT32 ui32NumUpdates;


 SGXMKIF_MEMUPDATE sUpdates[5 + 96];

} SGXMKIF_TRANSFERCMD, *PSGXMKIF_TRANSFERCMD;






typedef struct _SGXMKIF_HWRENDERCONTEXT_
{
 SGXMKIF_HWCONTEXT sCommon;


 IMG_DEV_VIRTADDR sTACCBBaseDevAddr;
 IMG_DEV_VIRTADDR sTACCBCtlDevAddr;
 IMG_UINT32 ui32TACount;

 IMG_DEV_VIRTADDR sHWPBDescDevVAddr;
#line 994 "services4/include/sgx_mkif_client.h"
 IMG_DEV_VIRTADDR sScratchPrimBlock;
#line 1007 "services4/include/sgx_mkif_client.h"
 IMG_DEV_VIRTADDR sHWPartialRendersHead;
 IMG_DEV_VIRTADDR sHWPartialRendersTail;





 IMG_DEV_VIRTADDR sHWCompleteRendersHead;
 IMG_DEV_VIRTADDR sHWCompleteRendersTail;






 IMG_DEV_VIRTADDR sPrevPartialDevAddr;
 IMG_DEV_VIRTADDR sNextPartialDevAddr;

 IMG_DEV_VIRTADDR sPrevCompleteDevAddr;
 IMG_DEV_VIRTADDR sNextCompleteDevAddr;
 IMG_UINT32 ui32PID;
} SGXMKIF_HWRENDERCONTEXT, *PSGXMKIF_HWRENDERCONTEXT;
#line 37 "services4/srvinit/devices/sgx/usedefs.h" 2

#line 1 "services4/srvinit/devices/sgx/sgx_ukernel_status_codes.h" 1
#line 39 "services4/srvinit/devices/sgx/usedefs.h" 2
#line 33 "services4/srvinit/devices/sgx/sgxinit_secondary.pds.asm" 2





data dword INPUT_DOUTD0;
data dword INPUT_DOUTD1;
data dword INPUT_DOUTU0;
data dword INPUT_DOUTU1;
data dword INPUT_DOUTU2;


temp dword temp_ds1 = ds1[48];






tstz p0, ir0;
p0 bra sgxinit_secondary_DMA;


bra sgxinit_secondary_noDMA;

sgxinit_secondary_DMA:

movs doutd, INPUT_DOUTD0, INPUT_DOUTD1;

sgxinit_secondary_noDMA:



mov32 temp_ds1, INPUT_DOUTU2;
movs doutu, INPUT_DOUTU0, INPUT_DOUTU1, temp_ds1;




halt;
