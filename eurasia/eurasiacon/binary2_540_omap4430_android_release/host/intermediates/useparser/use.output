Terminals unused in grammar

   DATAFORMAT
   UNEXPECTED_CHARACTER


State 56 conflicts: 1 shift/reduce
State 57 conflicts: 1 shift/reduce
State 252 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: /* empty */
    2        | program instruction INSTRUCTION_DELIMITER
    3        | program pseudo_instruction INSTRUCTION_DELIMITER
    4        | program INPUT opt_register_list
    5        | program OUTPUT opt_register_list
    6        | program INSTRUCTION_DELIMITER
    7        | program forcealign INSTRUCTION_DELIMITER
    8        | program IDENTIFIER COLON_PLUS_DELIMITER
    9        | program CLOSE_CURLY_BRACKET
   10        | program OPEN_CURLY_BRACKET

   11 opt_register_list: /* empty */
   12                  | opt_register_list register_type NUMBER

   13 pseudo_instruction: SCHEDOFF
   14                   | SCHEDON
   15                   | SKIPINVON
   16                   | SKIPINVOFF
   17                   | REPEAT_FLAG
   18                   | REPEATOFF
   19                   | TARGET TARGET_SPECIFIER
   20                   | TARGET TARGET_SPECIFIER COMMA NUMBER
   21                   | EXPORT IDENTIFIER
   22                   | IMPORT IDENTIFIER
   23                   | MODULEALIGN NUMBER
   24                   | TEMP_REG_DEF temp_reg_names
   25                   | NAMED_REGS_RANGE NUMBER COMMA NUMBER
   26                   | RENAME_REG IDENTIFIER COMMA IDENTIFIER

   27 forcealign: FORCE_ALIGN NUMBER
   28           | FORCE_ALIGN NUMBER COMMA NUMBER
   29           | MISALIGN

   30 instruction: preopcode_flag OPCODE opcode_modifier argument maybe_mask COMMA source_arguments
   31            | PLUS OPCODE opcode_modifier argument maybe_mask COMMA source_arguments
   32            | preopcode_flag LD_OPCODE opcode_modifier argument COMMA ld_argument COMMA source_arguments
   33            | preopcode_flag ST_OPCODE opcode_modifier st_argument COMMA source_arguments
   34            | preopcode_flag ELD_OPCODE opcode_modifier argument COMMA eld_argument COMMA argument COMMA argument
   35            | preopcode_flag BRANCH_OPCODE opcode_modifier label
   36            | preopcode_flag CALL_OPCODE opcode_modifier procedure
   37            | preopcode_flag EFO_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA efo_expression COMMA source_arguments
   38            | IDENTIFIER COLON

   39 $@1: /* empty */

   40 instruction: PROC IDENTIFIER $@1 OPEN_BRACKET temp_reg_names_optional CLOSE_BRACKET
   41            | preopcode_flag LAPC_OPCODE opcode_modifier
   42            | preopcode_flag NOP_OPCODE opcode_modifier
   43            | preopcode_flag LOCKRELEASE_OPCODE opcode_modifier
   44            | preopcode_flag LOCKRELEASE_OPCODE opcode_modifier arg_register
   45            | PTOFF_OPCODE opcode_modifier
   46            | preopcode_flag WDF_OPCODE opcode_modifier arg_register
   47            | preopcode_flag CFI_OPCODE opcode_modifier arg_register COMMA arg_register COMMA arg_register
   48            | preopcode_flag ONEARG_OPCODE opcode_modifier arg_register
   49            | preopcode_flag IDF_OPCODE opcode_modifier arg_register COMMA idf_path
   50            | preopcode_flag EXT_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA argument COMMA argument COMMA argument
   51            | preopcode_flag EXT_OPCODE opcode_modifier argument COMMA argument COMMA argument COMMA argument
   52            | PLUS COISSUE_OPCODE opcode_modifier source_arguments
   53            | PLUS ASOP2_OPCODE opcode_modifier source_arguments
   54            | PLUS ASOP2_OPCODE opcode_modifier COMMA source_arguments
   55            | preopcode_flag FIR_OPCODE opcode_modifier argument maybe_mask COMMA source_arguments
   56            | preopcode_flag FIR_OPCODE opcode_modifier COMMA source_arguments
   57            | preopcode_flag EMITVTX_OPCODE opcode_modifier source_arguments

   58 label: IDENTIFIER
   59      | IDENTIFIER PLUS expr
   60      | IDENTIFIER MINUS expr

   61 procedure: IDENTIFIER

   62 maybe_mask: /* empty */
   63           | MASK

   64 preopcode_flag: /* empty */
   65               | predicate preopcode_flag
   66               | repeat preopcode_flag
   67               | SKIPINV_FLAG preopcode_flag
   68               | NOSCHED_FLAG preopcode_flag
   69               | OPEN_BRACKET preopcode_flag CLOSE_BRACKET
   70               | OPEN_BRACKET preopcode_flag COMMA preopcode_flag CLOSE_BRACKET

   71 predicate: PRED0
   72          | PRED1
   73          | BANG PRED0
   74          | BANG PRED1
   75          | BANG PRED2
   76          | PRED2
   77          | PRED3
   78          | PREDN
   79          | BANG PRED3
   80          | BANG PREDN

   81 repeat: TEMP_REGISTER NUMBER

   82 idf_path: IDF_ST
   83         | IDF_PIXELBE

   84 opcode_modifier: /* empty */
   85                | OPCODE_FLAG1 opcode_modifier
   86                | REPEAT_FLAG opcode_modifier
   87                | OPCODE_FLAG2 opcode_modifier
   88                | OPCODE_FLAG3 opcode_modifier
   89                | C10_FLAG opcode_modifier
   90                | U8_FLAG opcode_modifier
   91                | F16_FLAG opcode_modifier
   92                | TEST_TYPE opcode_modifier
   93                | TEST_CHANSEL opcode_modifier
   94                | ABS opcode_modifier
   95                | TEST_MASK opcode_modifier

   96 source_arguments: argument
   97                 | argument COMMA source_arguments

   98 argument: prearg_mod arg_register arg_modifier
   99         | ABS_NODOT OPEN_BRACKET arg_register CLOSE_BRACKET arg_modifier
  100         | error

  101 prearg_mod: /* empty */
  102           | PLUS
  103           | MINUS
  104           | NOT
  105           | BANG
  106           | NUMBER MINUS

  107 register_type: REGISTER
  108              | TEMP_REGISTER

  109 arg_register: register_type NUMBER
  110             | dest_index_register
  111             | HASH expr
  112             | HASH FLOAT_NUMBER
  113             | HASH MINUS FLOAT_NUMBER
  114             | HASH LABEL_ADDRESS OPEN_BRACKET IDENTIFIER CLOSE_BRACKET
  115             | register_type OPEN_SQBRACKET src_index_register CLOSE_SQBRACKET
  116             | register_type OPEN_SQBRACKET src_index_register PLUS HASH NUMBER CLOSE_SQBRACKET
  117             | register_type OPEN_SQBRACKET src_index_register PLUS expr CLOSE_SQBRACKET
  118             | register_type OPEN_SQBRACKET expr PLUS src_index_register CLOSE_SQBRACKET
  119             | register_type NUMBER OPEN_SQBRACKET src_index_register PLUS expr CLOSE_SQBRACKET
  120             | register_type NUMBER OPEN_SQBRACKET expr PLUS src_index_register CLOSE_SQBRACKET
  121             | register_type OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET
  122             | register_type OPEN_SQBRACKET expr CLOSE_SQBRACKET
  123             | register_type NUMBER OPEN_SQBRACKET src_index_register CLOSE_SQBRACKET
  124             | register_type NUMBER OPEN_SQBRACKET src_index_register PLUS HASH NUMBER CLOSE_SQBRACKET
  125             | PRED0
  126             | PRED1
  127             | PRED2
  128             | PRED3
  129             | PCLINK
  130             | I0
  131             | I1
  132             | DIRECT_IMMEDIATE
  133             | SWIZZLE
  134             | ADDRESS_MODE
  135             | INTSRCSEL
  136             | OPCODE
  137             | SRC0
  138             | SRC1
  139             | SRC2
  140             | IDENTIFIER
  141             | IDENTIFIER OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET
  142             | IDENTIFIER OPEN_SQBRACKET expr CLOSE_SQBRACKET
  143             | SCOPE_NAME IDENTIFIER
  144             | SCOPE_NAME IDENTIFIER OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET

  145 expr: NUMBER
  146     | expr PLUS expr
  147     | expr MINUS expr
  148     | expr TIMES expr
  149     | expr DIVIDE expr
  150     | expr LSHIFT expr
  151     | expr RSHIFT expr
  152     | expr MODULUS expr
  153     | NOT expr
  154     | expr AND expr
  155     | expr OR expr
  156     | expr XOR expr
  157     | OPEN_BRACKET expr CLOSE_BRACKET
  158     | MINUS expr

  159 src_index_register: INDEXLOW
  160                   | INDEXHIGH

  161 dest_index_register: INDEXLOW
  162                    | INDEXHIGH
  163                    | INDEXBOTH

  164 arg_modifier: /* empty */
  165             | ARGUMENT_FLAG arg_modifier
  166             | C10_FLAG arg_modifier
  167             | F16_FLAG arg_modifier
  168             | U8_FLAG arg_modifier
  169             | ABS arg_modifier

  170 ld_argument: OPEN_SQBRACKET arg_register CLOSE_SQBRACKET
  171            | OPEN_SQBRACKET arg_register COMMA ldst_offset_argument CLOSE_SQBRACKET
  172            | OPEN_SQBRACKET arg_register COMMA ldst_offset_argument COMMA arg_register CLOSE_SQBRACKET

  173 eld_argument: OPEN_SQBRACKET arg_register COMMA arg_register CLOSE_SQBRACKET
  174             | OPEN_SQBRACKET arg_register COMMA arg_register COMMA arg_register CLOSE_SQBRACKET

  175 st_argument: OPEN_SQBRACKET arg_register CLOSE_SQBRACKET
  176            | OPEN_SQBRACKET arg_register COMMA ldst_offset_argument CLOSE_SQBRACKET

  177 ldst_offset_argument: arg_register
  178                     | offset_op arg_register
  179                     | arg_register offset_op

  180 offset_op: PLUSPLUS
  181          | MINUSMINUS
  182          | MINUS

  183 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  184               | maybe_bang I0 EQUALS A1 COMMA maybe_bang I1 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr
  185               | maybe_bang I0 EQUALS M0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  186               | maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  187               | maybe_bang I1 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  188               | maybe_bang I1 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr
  189               | maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  190               | maybe_bang I0 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr
  191               | maybe_bang I0 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  192               | maybe_bang I0 EQUALS M0 COMMA efo_addr_expr COMMA efo_mul_expr

  193 efo_addr_expr: A0 EQUALS efo_add_src PLUS maybe_negate_r efo_add_src COMMA A1 EQUALS maybe_negate efo_add_src PLUS efo_add_src

  194 efo_add_src: SRC0
  195            | SRC1
  196            | SRC2
  197            | I0
  198            | I1
  199            | M0
  200            | M1

  201 efo_mul_expr: M0 EQUALS efo_mul_src TIMES efo_mul_src COMMA M1 EQUALS efo_mul_src TIMES efo_mul_src

  202 efo_mul_src: SRC0
  203            | SRC1
  204            | SRC2
  205            | I0
  206            | I1

  207 efo_dest_select: I0
  208                | I1
  209                | A0
  210                | A1

  211 maybe_bang: /* empty */
  212           | BANG

  213 maybe_negate: /* empty */
  214             | MINUS

  215 maybe_negate_r: /* empty */
  216               | MINUS

  217 temp_reg_names_optional: /* empty */
  218                        | temp_reg_names

  219 temp_reg_names: temp_reg_name
  220               | temp_reg_names COMMA temp_reg_name

  221 temp_reg_name: IDENTIFIER
  222              | IDENTIFIER OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET
  223              | IDENTIFIER OPEN_SQBRACKET expr CLOSE_SQBRACKET


Terminals, with rules where they appear

$end (0) 0
error (256) 100
REGISTER (258) 107
OPCODE_FLAG1 (259) 85
OPCODE_FLAG2 (260) 87
OPCODE_FLAG3 (261) 88
ARGUMENT_FLAG (262) 165
MASK (263) 63
NUMBER (264) 12 20 23 25 27 28 81 106 109 116 119 120 121 123 124 141
    144 145 222
TEST_TYPE (265) 92
TEST_CHANSEL (266) 93
TEMP_REGISTER (267) 81 108
REPEAT_FLAG (268) 17 86
TEST_MASK (269) 95
C10_FLAG (270) 89 166
F16_FLAG (271) 91 167
U8_FLAG (272) 90 168
FLOAT_NUMBER (273) 112 113
OPCODE (274) 30 31 136
COISSUE_OPCODE (275) 52
LD_OPCODE (276) 32
ST_OPCODE (277) 33
ELD_OPCODE (278) 34
BRANCH_OPCODE (279) 35
EFO_OPCODE (280) 37
LAPC_OPCODE (281) 41
WDF_OPCODE (282) 46
EXT_OPCODE (283) 50 51
LOCKRELEASE_OPCODE (284) 43 44
IDF_OPCODE (285) 49
FIR_OPCODE (286) 55 56
ASOP2_OPCODE (287) 53 54
ONEARG_OPCODE (288) 48
PTOFF_OPCODE (289) 45
CALL_OPCODE (290) 36
NOP_OPCODE (291) 42
EMITVTX_OPCODE (292) 57
CFI_OPCODE (293) 47
INPUT (294) 4
OUTPUT (295) 5
OPEN_SQBRACKET (296) 115 116 117 118 119 120 121 122 123 124 141 142
    144 170 171 172 173 174 175 176 222 223
CLOSE_SQBRACKET (297) 115 116 117 118 119 120 121 122 123 124 141 142
    144 170 171 172 173 174 175 176 222 223
PLUS (298) 31 52 53 54 59 102 116 117 118 119 120 124 146 193
MINUS (299) 60 103 106 113 147 158 182 214 216
TIMES (300) 148 201
DIVIDE (301) 149
LSHIFT (302) 150
RSHIFT (303) 151
HASH (304) 111 112 113 114 116 121 124 141 144 222
BANG (305) 73 74 75 79 80 105 212
AND (306) 154
OR (307) 155
PLUSPLUS (308) 180
MINUSMINUS (309) 181
EQUALS (310) 37 50 183 184 185 186 187 188 189 190 191 192 193 201
NOT (311) 104 153
XOR (312) 156
OPEN_BRACKET (313) 40 69 70 99 114 157
CLOSE_BRACKET (314) 40 69 70 99 114 157
INSTRUCTION_DELIMITER (315) 2 3 6 7
COMMA (316) 20 25 26 28 30 31 32 33 34 37 47 49 50 51 54 55 56 70 97
    171 172 173 174 176 183 184 185 186 187 188 189 190 191 192 193
    201 220
PRED0 (317) 71 73 125
PRED1 (318) 72 74 126
PRED2 (319) 75 76 127
PRED3 (320) 77 79 128
PREDN (321) 78 80
SCHEDON (322) 14
SCHEDOFF (323) 13
SKIPINVON (324) 15
SKIPINVOFF (325) 16
REPEATOFF (326) 18
FORCE_ALIGN (327) 27 28
MISALIGN (328) 29
IMPORT (329) 22
EXPORT (330) 21
MODULEALIGN (331) 23
I0 (332) 130 183 184 185 186 190 191 192 197 205 207
I1 (333) 131 183 184 185 186 187 188 189 198 206 208
A0 (334) 183 184 186 188 190 193 209
A1 (335) 183 184 187 191 193 210
M0 (336) 185 192 199 201
M1 (337) 185 186 189 200 201
SRC0 (338) 137 194 202
SRC1 (339) 138 195 203
SRC2 (340) 139 196 204
DIRECT_IMMEDIATE (341) 132
ADDRESS_MODE (342) 134
SWIZZLE (343) 133
DATAFORMAT (344)
INTSRCSEL (345) 135
ABS (346) 94 169
ABS_NODOT (347) 99
UNEXPECTED_CHARACTER (348)
INDEXLOW (349) 159 161
INDEXHIGH (350) 160 162
INDEXBOTH (351) 163
PCLINK (352) 129
LABEL_ADDRESS (353) 114
IDF_ST (354) 82
IDF_PIXELBE (355) 83
NOSCHED_FLAG (356) 68
SKIPINV_FLAG (357) 67
TARGET_SPECIFIER (358) 19 20
TARGET (359) 19 20
TEMP_REG_DEF (360) 24
OPEN_CURLY_BRACKET (361) 10
CLOSE_CURLY_BRACKET (362) 9
PROC (363) 40
SCOPE_NAME (364) 143 144
IDENTIFIER (365) 8 21 22 26 38 40 58 59 60 61 114 140 141 142 143 144
    221 222 223
NAMED_REGS_RANGE (366) 25
RENAME_REG (367) 26
COLON (368) 38
COLON_PLUS_DELIMITER (369) 8
MODULUS (370) 152


Nonterminals, with rules where they appear

$accept (116)
    on left: 0
program (117)
    on left: 1 2 3 4 5 6 7 8 9 10, on right: 0 2 3 4 5 6 7 8 9 10
opt_register_list (118)
    on left: 11 12, on right: 4 5 12
pseudo_instruction (119)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26, on right: 3
forcealign (120)
    on left: 27 28 29, on right: 7
instruction (121)
    on left: 30 31 32 33 34 35 36 37 38 40 41 42 43 44 45 46 47 48
    49 50 51 52 53 54 55 56 57, on right: 2
$@1 (122)
    on left: 39, on right: 40
label (123)
    on left: 58 59 60, on right: 35
procedure (124)
    on left: 61, on right: 36
maybe_mask (125)
    on left: 62 63, on right: 30 31 55
preopcode_flag (126)
    on left: 64 65 66 67 68 69 70, on right: 30 32 33 34 35 36 37 41
    42 43 44 46 47 48 49 50 51 55 56 57 65 66 67 68 69 70
predicate (127)
    on left: 71 72 73 74 75 76 77 78 79 80, on right: 65
repeat (128)
    on left: 81, on right: 66
idf_path (129)
    on left: 82 83, on right: 49
opcode_modifier (130)
    on left: 84 85 86 87 88 89 90 91 92 93 94 95, on right: 30 31 32
    33 34 35 36 37 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56
    57 85 86 87 88 89 90 91 92 93 94 95
source_arguments (131)
    on left: 96 97, on right: 30 31 32 33 37 52 53 54 55 56 57 97
argument (132)
    on left: 98 99 100, on right: 30 31 32 34 37 50 51 55 96 97
prearg_mod (133)
    on left: 101 102 103 104 105 106, on right: 98
register_type (134)
    on left: 107 108, on right: 12 109 115 116 117 118 119 120 121
    122 123 124
arg_register (135)
    on left: 109 110 111 112 113 114 115 116 117 118 119 120 121 122
    123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138
    139 140 141 142 143 144, on right: 44 46 47 48 49 98 99 170 171
    172 173 174 175 176 177 178 179
expr (136)
    on left: 145 146 147 148 149 150 151 152 153 154 155 156 157 158,
    on right: 59 60 111 117 118 119 120 122 142 146 147 148 149 150
    151 152 153 154 155 156 157 158 223
src_index_register (137)
    on left: 159 160, on right: 115 116 117 118 119 120 123 124
dest_index_register (138)
    on left: 161 162 163, on right: 110
arg_modifier (139)
    on left: 164 165 166 167 168 169, on right: 98 99 165 166 167 168
    169
ld_argument (140)
    on left: 170 171 172, on right: 32
eld_argument (141)
    on left: 173 174, on right: 34
st_argument (142)
    on left: 175 176, on right: 33
ldst_offset_argument (143)
    on left: 177 178 179, on right: 171 172 176
offset_op (144)
    on left: 180 181 182, on right: 178 179
efo_expression (145)
    on left: 183 184 185 186 187 188 189 190 191 192, on right: 37
efo_addr_expr (146)
    on left: 193, on right: 183 184 185 186 187 188 189 190 191 192
efo_add_src (147)
    on left: 194 195 196 197 198 199 200, on right: 193
efo_mul_expr (148)
    on left: 201, on right: 183 184 185 186 187 188 189 190 191 192
efo_mul_src (149)
    on left: 202 203 204 205 206, on right: 201
efo_dest_select (150)
    on left: 207 208 209 210, on right: 37 50
maybe_bang (151)
    on left: 211 212, on right: 183 184 185 186 187 188 189 190 191
    192
maybe_negate (152)
    on left: 213 214, on right: 193
maybe_negate_r (153)
    on left: 215 216, on right: 193
temp_reg_names_optional (154)
    on left: 217 218, on right: 40
temp_reg_names (155)
    on left: 219 220, on right: 24 218 220
temp_reg_name (156)
    on left: 221 222 223, on right: 219 220


state 0

    0 $accept: . program $end

    $default  reduce using rule 1 (program)

    program  go to state 1


state 1

    0 $accept: program . $end
    2 program: program . instruction INSTRUCTION_DELIMITER
    3        | program . pseudo_instruction INSTRUCTION_DELIMITER
    4        | program . INPUT opt_register_list
    5        | program . OUTPUT opt_register_list
    6        | program . INSTRUCTION_DELIMITER
    7        | program . forcealign INSTRUCTION_DELIMITER
    8        | program . IDENTIFIER COLON_PLUS_DELIMITER
    9        | program . CLOSE_CURLY_BRACKET
   10        | program . OPEN_CURLY_BRACKET

    $end                   shift, and go to state 2
    TEMP_REGISTER          shift, and go to state 3
    REPEAT_FLAG            shift, and go to state 4
    PTOFF_OPCODE           shift, and go to state 5
    INPUT                  shift, and go to state 6
    OUTPUT                 shift, and go to state 7
    PLUS                   shift, and go to state 8
    BANG                   shift, and go to state 9
    OPEN_BRACKET           shift, and go to state 10
    INSTRUCTION_DELIMITER  shift, and go to state 11
    PRED0                  shift, and go to state 12
    PRED1                  shift, and go to state 13
    PRED2                  shift, and go to state 14
    PRED3                  shift, and go to state 15
    PREDN                  shift, and go to state 16
    SCHEDON                shift, and go to state 17
    SCHEDOFF               shift, and go to state 18
    SKIPINVON              shift, and go to state 19
    SKIPINVOFF             shift, and go to state 20
    REPEATOFF              shift, and go to state 21
    FORCE_ALIGN            shift, and go to state 22
    MISALIGN               shift, and go to state 23
    IMPORT                 shift, and go to state 24
    EXPORT                 shift, and go to state 25
    MODULEALIGN            shift, and go to state 26
    NOSCHED_FLAG           shift, and go to state 27
    SKIPINV_FLAG           shift, and go to state 28
    TARGET                 shift, and go to state 29
    TEMP_REG_DEF           shift, and go to state 30
    OPEN_CURLY_BRACKET     shift, and go to state 31
    CLOSE_CURLY_BRACKET    shift, and go to state 32
    PROC                   shift, and go to state 33
    IDENTIFIER             shift, and go to state 34
    NAMED_REGS_RANGE       shift, and go to state 35
    RENAME_REG             shift, and go to state 36

    $default  reduce using rule 64 (preopcode_flag)

    pseudo_instruction  go to state 37
    forcealign          go to state 38
    instruction         go to state 39
    preopcode_flag      go to state 40
    predicate           go to state 41
    repeat              go to state 42


state 2

    0 $accept: program $end .

    $default  accept


state 3

   81 repeat: TEMP_REGISTER . NUMBER

    NUMBER  shift, and go to state 43


state 4

   17 pseudo_instruction: REPEAT_FLAG .

    $default  reduce using rule 17 (pseudo_instruction)


state 5

   45 instruction: PTOFF_OPCODE . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 55


state 6

    4 program: program INPUT . opt_register_list

    $default  reduce using rule 11 (opt_register_list)

    opt_register_list  go to state 56


state 7

    5 program: program OUTPUT . opt_register_list

    $default  reduce using rule 11 (opt_register_list)

    opt_register_list  go to state 57


state 8

   31 instruction: PLUS . OPCODE opcode_modifier argument maybe_mask COMMA source_arguments
   52            | PLUS . COISSUE_OPCODE opcode_modifier source_arguments
   53            | PLUS . ASOP2_OPCODE opcode_modifier source_arguments
   54            | PLUS . ASOP2_OPCODE opcode_modifier COMMA source_arguments

    OPCODE          shift, and go to state 58
    COISSUE_OPCODE  shift, and go to state 59
    ASOP2_OPCODE    shift, and go to state 60


state 9

   73 predicate: BANG . PRED0
   74          | BANG . PRED1
   75          | BANG . PRED2
   79          | BANG . PRED3
   80          | BANG . PREDN

    PRED0  shift, and go to state 61
    PRED1  shift, and go to state 62
    PRED2  shift, and go to state 63
    PRED3  shift, and go to state 64
    PREDN  shift, and go to state 65


state 10

   69 preopcode_flag: OPEN_BRACKET . preopcode_flag CLOSE_BRACKET
   70               | OPEN_BRACKET . preopcode_flag COMMA preopcode_flag CLOSE_BRACKET

    TEMP_REGISTER  shift, and go to state 3
    BANG           shift, and go to state 9
    OPEN_BRACKET   shift, and go to state 10
    PRED0          shift, and go to state 12
    PRED1          shift, and go to state 13
    PRED2          shift, and go to state 14
    PRED3          shift, and go to state 15
    PREDN          shift, and go to state 16
    NOSCHED_FLAG   shift, and go to state 27
    SKIPINV_FLAG   shift, and go to state 28

    $default  reduce using rule 64 (preopcode_flag)

    preopcode_flag  go to state 66
    predicate       go to state 41
    repeat          go to state 42


state 11

    6 program: program INSTRUCTION_DELIMITER .

    $default  reduce using rule 6 (program)


state 12

   71 predicate: PRED0 .

    $default  reduce using rule 71 (predicate)


state 13

   72 predicate: PRED1 .

    $default  reduce using rule 72 (predicate)


state 14

   76 predicate: PRED2 .

    $default  reduce using rule 76 (predicate)


state 15

   77 predicate: PRED3 .

    $default  reduce using rule 77 (predicate)


state 16

   78 predicate: PREDN .

    $default  reduce using rule 78 (predicate)


state 17

   14 pseudo_instruction: SCHEDON .

    $default  reduce using rule 14 (pseudo_instruction)


state 18

   13 pseudo_instruction: SCHEDOFF .

    $default  reduce using rule 13 (pseudo_instruction)


state 19

   15 pseudo_instruction: SKIPINVON .

    $default  reduce using rule 15 (pseudo_instruction)


state 20

   16 pseudo_instruction: SKIPINVOFF .

    $default  reduce using rule 16 (pseudo_instruction)


state 21

   18 pseudo_instruction: REPEATOFF .

    $default  reduce using rule 18 (pseudo_instruction)


state 22

   27 forcealign: FORCE_ALIGN . NUMBER
   28           | FORCE_ALIGN . NUMBER COMMA NUMBER

    NUMBER  shift, and go to state 67


state 23

   29 forcealign: MISALIGN .

    $default  reduce using rule 29 (forcealign)


state 24

   22 pseudo_instruction: IMPORT . IDENTIFIER

    IDENTIFIER  shift, and go to state 68


state 25

   21 pseudo_instruction: EXPORT . IDENTIFIER

    IDENTIFIER  shift, and go to state 69


state 26

   23 pseudo_instruction: MODULEALIGN . NUMBER

    NUMBER  shift, and go to state 70


state 27

   68 preopcode_flag: NOSCHED_FLAG . preopcode_flag

    TEMP_REGISTER  shift, and go to state 3
    BANG           shift, and go to state 9
    OPEN_BRACKET   shift, and go to state 10
    PRED0          shift, and go to state 12
    PRED1          shift, and go to state 13
    PRED2          shift, and go to state 14
    PRED3          shift, and go to state 15
    PREDN          shift, and go to state 16
    NOSCHED_FLAG   shift, and go to state 27
    SKIPINV_FLAG   shift, and go to state 28

    $default  reduce using rule 64 (preopcode_flag)

    preopcode_flag  go to state 71
    predicate       go to state 41
    repeat          go to state 42


state 28

   67 preopcode_flag: SKIPINV_FLAG . preopcode_flag

    TEMP_REGISTER  shift, and go to state 3
    BANG           shift, and go to state 9
    OPEN_BRACKET   shift, and go to state 10
    PRED0          shift, and go to state 12
    PRED1          shift, and go to state 13
    PRED2          shift, and go to state 14
    PRED3          shift, and go to state 15
    PREDN          shift, and go to state 16
    NOSCHED_FLAG   shift, and go to state 27
    SKIPINV_FLAG   shift, and go to state 28

    $default  reduce using rule 64 (preopcode_flag)

    preopcode_flag  go to state 72
    predicate       go to state 41
    repeat          go to state 42


state 29

   19 pseudo_instruction: TARGET . TARGET_SPECIFIER
   20                   | TARGET . TARGET_SPECIFIER COMMA NUMBER

    TARGET_SPECIFIER  shift, and go to state 73


state 30

   24 pseudo_instruction: TEMP_REG_DEF . temp_reg_names

    IDENTIFIER  shift, and go to state 74

    temp_reg_names  go to state 75
    temp_reg_name   go to state 76


state 31

   10 program: program OPEN_CURLY_BRACKET .

    $default  reduce using rule 10 (program)


state 32

    9 program: program CLOSE_CURLY_BRACKET .

    $default  reduce using rule 9 (program)


state 33

   40 instruction: PROC . IDENTIFIER $@1 OPEN_BRACKET temp_reg_names_optional CLOSE_BRACKET

    IDENTIFIER  shift, and go to state 77


state 34

    8 program: program IDENTIFIER . COLON_PLUS_DELIMITER
   38 instruction: IDENTIFIER . COLON

    COLON                 shift, and go to state 78
    COLON_PLUS_DELIMITER  shift, and go to state 79


state 35

   25 pseudo_instruction: NAMED_REGS_RANGE . NUMBER COMMA NUMBER

    NUMBER  shift, and go to state 80


state 36

   26 pseudo_instruction: RENAME_REG . IDENTIFIER COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 81


state 37

    3 program: program pseudo_instruction . INSTRUCTION_DELIMITER

    INSTRUCTION_DELIMITER  shift, and go to state 82


state 38

    7 program: program forcealign . INSTRUCTION_DELIMITER

    INSTRUCTION_DELIMITER  shift, and go to state 83


state 39

    2 program: program instruction . INSTRUCTION_DELIMITER

    INSTRUCTION_DELIMITER  shift, and go to state 84


state 40

   30 instruction: preopcode_flag . OPCODE opcode_modifier argument maybe_mask COMMA source_arguments
   32            | preopcode_flag . LD_OPCODE opcode_modifier argument COMMA ld_argument COMMA source_arguments
   33            | preopcode_flag . ST_OPCODE opcode_modifier st_argument COMMA source_arguments
   34            | preopcode_flag . ELD_OPCODE opcode_modifier argument COMMA eld_argument COMMA argument COMMA argument
   35            | preopcode_flag . BRANCH_OPCODE opcode_modifier label
   36            | preopcode_flag . CALL_OPCODE opcode_modifier procedure
   37            | preopcode_flag . EFO_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA efo_expression COMMA source_arguments
   41            | preopcode_flag . LAPC_OPCODE opcode_modifier
   42            | preopcode_flag . NOP_OPCODE opcode_modifier
   43            | preopcode_flag . LOCKRELEASE_OPCODE opcode_modifier
   44            | preopcode_flag . LOCKRELEASE_OPCODE opcode_modifier arg_register
   46            | preopcode_flag . WDF_OPCODE opcode_modifier arg_register
   47            | preopcode_flag . CFI_OPCODE opcode_modifier arg_register COMMA arg_register COMMA arg_register
   48            | preopcode_flag . ONEARG_OPCODE opcode_modifier arg_register
   49            | preopcode_flag . IDF_OPCODE opcode_modifier arg_register COMMA idf_path
   50            | preopcode_flag . EXT_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA argument COMMA argument COMMA argument
   51            | preopcode_flag . EXT_OPCODE opcode_modifier argument COMMA argument COMMA argument COMMA argument
   55            | preopcode_flag . FIR_OPCODE opcode_modifier argument maybe_mask COMMA source_arguments
   56            | preopcode_flag . FIR_OPCODE opcode_modifier COMMA source_arguments
   57            | preopcode_flag . EMITVTX_OPCODE opcode_modifier source_arguments

    OPCODE              shift, and go to state 85
    LD_OPCODE           shift, and go to state 86
    ST_OPCODE           shift, and go to state 87
    ELD_OPCODE          shift, and go to state 88
    BRANCH_OPCODE       shift, and go to state 89
    EFO_OPCODE          shift, and go to state 90
    LAPC_OPCODE         shift, and go to state 91
    WDF_OPCODE          shift, and go to state 92
    EXT_OPCODE          shift, and go to state 93
    LOCKRELEASE_OPCODE  shift, and go to state 94
    IDF_OPCODE          shift, and go to state 95
    FIR_OPCODE          shift, and go to state 96
    ONEARG_OPCODE       shift, and go to state 97
    CALL_OPCODE         shift, and go to state 98
    NOP_OPCODE          shift, and go to state 99
    EMITVTX_OPCODE      shift, and go to state 100
    CFI_OPCODE          shift, and go to state 101


state 41

   65 preopcode_flag: predicate . preopcode_flag

    TEMP_REGISTER  shift, and go to state 3
    BANG           shift, and go to state 9
    OPEN_BRACKET   shift, and go to state 10
    PRED0          shift, and go to state 12
    PRED1          shift, and go to state 13
    PRED2          shift, and go to state 14
    PRED3          shift, and go to state 15
    PREDN          shift, and go to state 16
    NOSCHED_FLAG   shift, and go to state 27
    SKIPINV_FLAG   shift, and go to state 28

    $default  reduce using rule 64 (preopcode_flag)

    preopcode_flag  go to state 102
    predicate       go to state 41
    repeat          go to state 42


state 42

   66 preopcode_flag: repeat . preopcode_flag

    TEMP_REGISTER  shift, and go to state 3
    BANG           shift, and go to state 9
    OPEN_BRACKET   shift, and go to state 10
    PRED0          shift, and go to state 12
    PRED1          shift, and go to state 13
    PRED2          shift, and go to state 14
    PRED3          shift, and go to state 15
    PREDN          shift, and go to state 16
    NOSCHED_FLAG   shift, and go to state 27
    SKIPINV_FLAG   shift, and go to state 28

    $default  reduce using rule 64 (preopcode_flag)

    preopcode_flag  go to state 103
    predicate       go to state 41
    repeat          go to state 42


state 43

   81 repeat: TEMP_REGISTER NUMBER .

    $default  reduce using rule 81 (repeat)


state 44

   85 opcode_modifier: OPCODE_FLAG1 . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 104


state 45

   87 opcode_modifier: OPCODE_FLAG2 . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 105


state 46

   88 opcode_modifier: OPCODE_FLAG3 . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 106


state 47

   92 opcode_modifier: TEST_TYPE . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 107


state 48

   93 opcode_modifier: TEST_CHANSEL . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 108


state 49

   86 opcode_modifier: REPEAT_FLAG . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 109


state 50

   95 opcode_modifier: TEST_MASK . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 110


state 51

   89 opcode_modifier: C10_FLAG . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 111


state 52

   91 opcode_modifier: F16_FLAG . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 112


state 53

   90 opcode_modifier: U8_FLAG . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 113


state 54

   94 opcode_modifier: ABS . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 114


state 55

   45 instruction: PTOFF_OPCODE opcode_modifier .

    $default  reduce using rule 45 (instruction)


state 56

    4 program: program INPUT opt_register_list .
   12 opt_register_list: opt_register_list . register_type NUMBER

    REGISTER       shift, and go to state 115
    TEMP_REGISTER  shift, and go to state 116

    TEMP_REGISTER  [reduce using rule 4 (program)]
    $default       reduce using rule 4 (program)

    register_type  go to state 117


state 57

    5 program: program OUTPUT opt_register_list .
   12 opt_register_list: opt_register_list . register_type NUMBER

    REGISTER       shift, and go to state 115
    TEMP_REGISTER  shift, and go to state 116

    TEMP_REGISTER  [reduce using rule 5 (program)]
    $default       reduce using rule 5 (program)

    register_type  go to state 117


state 58

   31 instruction: PLUS OPCODE . opcode_modifier argument maybe_mask COMMA source_arguments

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 118


state 59

   52 instruction: PLUS COISSUE_OPCODE . opcode_modifier source_arguments

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 119


state 60

   53 instruction: PLUS ASOP2_OPCODE . opcode_modifier source_arguments
   54            | PLUS ASOP2_OPCODE . opcode_modifier COMMA source_arguments

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 120


state 61

   73 predicate: BANG PRED0 .

    $default  reduce using rule 73 (predicate)


state 62

   74 predicate: BANG PRED1 .

    $default  reduce using rule 74 (predicate)


state 63

   75 predicate: BANG PRED2 .

    $default  reduce using rule 75 (predicate)


state 64

   79 predicate: BANG PRED3 .

    $default  reduce using rule 79 (predicate)


state 65

   80 predicate: BANG PREDN .

    $default  reduce using rule 80 (predicate)


state 66

   69 preopcode_flag: OPEN_BRACKET preopcode_flag . CLOSE_BRACKET
   70               | OPEN_BRACKET preopcode_flag . COMMA preopcode_flag CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 121
    COMMA          shift, and go to state 122


state 67

   27 forcealign: FORCE_ALIGN NUMBER .
   28           | FORCE_ALIGN NUMBER . COMMA NUMBER

    COMMA  shift, and go to state 123

    $default  reduce using rule 27 (forcealign)


state 68

   22 pseudo_instruction: IMPORT IDENTIFIER .

    $default  reduce using rule 22 (pseudo_instruction)


state 69

   21 pseudo_instruction: EXPORT IDENTIFIER .

    $default  reduce using rule 21 (pseudo_instruction)


state 70

   23 pseudo_instruction: MODULEALIGN NUMBER .

    $default  reduce using rule 23 (pseudo_instruction)


state 71

   68 preopcode_flag: NOSCHED_FLAG preopcode_flag .

    $default  reduce using rule 68 (preopcode_flag)


state 72

   67 preopcode_flag: SKIPINV_FLAG preopcode_flag .

    $default  reduce using rule 67 (preopcode_flag)


state 73

   19 pseudo_instruction: TARGET TARGET_SPECIFIER .
   20                   | TARGET TARGET_SPECIFIER . COMMA NUMBER

    COMMA  shift, and go to state 124

    $default  reduce using rule 19 (pseudo_instruction)


state 74

  221 temp_reg_name: IDENTIFIER .
  222              | IDENTIFIER . OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET
  223              | IDENTIFIER . OPEN_SQBRACKET expr CLOSE_SQBRACKET

    OPEN_SQBRACKET  shift, and go to state 125

    $default  reduce using rule 221 (temp_reg_name)


state 75

   24 pseudo_instruction: TEMP_REG_DEF temp_reg_names .
  220 temp_reg_names: temp_reg_names . COMMA temp_reg_name

    COMMA  shift, and go to state 126

    $default  reduce using rule 24 (pseudo_instruction)


state 76

  219 temp_reg_names: temp_reg_name .

    $default  reduce using rule 219 (temp_reg_names)


state 77

   40 instruction: PROC IDENTIFIER . $@1 OPEN_BRACKET temp_reg_names_optional CLOSE_BRACKET

    $default  reduce using rule 39 ($@1)

    $@1  go to state 127


state 78

   38 instruction: IDENTIFIER COLON .

    $default  reduce using rule 38 (instruction)


state 79

    8 program: program IDENTIFIER COLON_PLUS_DELIMITER .

    $default  reduce using rule 8 (program)


state 80

   25 pseudo_instruction: NAMED_REGS_RANGE NUMBER . COMMA NUMBER

    COMMA  shift, and go to state 128


state 81

   26 pseudo_instruction: RENAME_REG IDENTIFIER . COMMA IDENTIFIER

    COMMA  shift, and go to state 129


state 82

    3 program: program pseudo_instruction INSTRUCTION_DELIMITER .

    $default  reduce using rule 3 (program)


state 83

    7 program: program forcealign INSTRUCTION_DELIMITER .

    $default  reduce using rule 7 (program)


state 84

    2 program: program instruction INSTRUCTION_DELIMITER .

    $default  reduce using rule 2 (program)


state 85

   30 instruction: preopcode_flag OPCODE . opcode_modifier argument maybe_mask COMMA source_arguments

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 130


state 86

   32 instruction: preopcode_flag LD_OPCODE . opcode_modifier argument COMMA ld_argument COMMA source_arguments

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 131


state 87

   33 instruction: preopcode_flag ST_OPCODE . opcode_modifier st_argument COMMA source_arguments

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 132


state 88

   34 instruction: preopcode_flag ELD_OPCODE . opcode_modifier argument COMMA eld_argument COMMA argument COMMA argument

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 133


state 89

   35 instruction: preopcode_flag BRANCH_OPCODE . opcode_modifier label

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 134


state 90

   37 instruction: preopcode_flag EFO_OPCODE . opcode_modifier argument EQUALS efo_dest_select COMMA efo_expression COMMA source_arguments

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 135


state 91

   41 instruction: preopcode_flag LAPC_OPCODE . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 136


state 92

   46 instruction: preopcode_flag WDF_OPCODE . opcode_modifier arg_register

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 137


state 93

   50 instruction: preopcode_flag EXT_OPCODE . opcode_modifier argument EQUALS efo_dest_select COMMA argument COMMA argument COMMA argument
   51            | preopcode_flag EXT_OPCODE . opcode_modifier argument COMMA argument COMMA argument COMMA argument

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 138


state 94

   43 instruction: preopcode_flag LOCKRELEASE_OPCODE . opcode_modifier
   44            | preopcode_flag LOCKRELEASE_OPCODE . opcode_modifier arg_register

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 139


state 95

   49 instruction: preopcode_flag IDF_OPCODE . opcode_modifier arg_register COMMA idf_path

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 140


state 96

   55 instruction: preopcode_flag FIR_OPCODE . opcode_modifier argument maybe_mask COMMA source_arguments
   56            | preopcode_flag FIR_OPCODE . opcode_modifier COMMA source_arguments

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 141


state 97

   48 instruction: preopcode_flag ONEARG_OPCODE . opcode_modifier arg_register

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 142


state 98

   36 instruction: preopcode_flag CALL_OPCODE . opcode_modifier procedure

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 143


state 99

   42 instruction: preopcode_flag NOP_OPCODE . opcode_modifier

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 144


state 100

   57 instruction: preopcode_flag EMITVTX_OPCODE . opcode_modifier source_arguments

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 145


state 101

   47 instruction: preopcode_flag CFI_OPCODE . opcode_modifier arg_register COMMA arg_register COMMA arg_register

    OPCODE_FLAG1  shift, and go to state 44
    OPCODE_FLAG2  shift, and go to state 45
    OPCODE_FLAG3  shift, and go to state 46
    TEST_TYPE     shift, and go to state 47
    TEST_CHANSEL  shift, and go to state 48
    REPEAT_FLAG   shift, and go to state 49
    TEST_MASK     shift, and go to state 50
    C10_FLAG      shift, and go to state 51
    F16_FLAG      shift, and go to state 52
    U8_FLAG       shift, and go to state 53
    ABS           shift, and go to state 54

    $default  reduce using rule 84 (opcode_modifier)

    opcode_modifier  go to state 146


state 102

   65 preopcode_flag: predicate preopcode_flag .

    $default  reduce using rule 65 (preopcode_flag)


state 103

   66 preopcode_flag: repeat preopcode_flag .

    $default  reduce using rule 66 (preopcode_flag)


state 104

   85 opcode_modifier: OPCODE_FLAG1 opcode_modifier .

    $default  reduce using rule 85 (opcode_modifier)


state 105

   87 opcode_modifier: OPCODE_FLAG2 opcode_modifier .

    $default  reduce using rule 87 (opcode_modifier)


state 106

   88 opcode_modifier: OPCODE_FLAG3 opcode_modifier .

    $default  reduce using rule 88 (opcode_modifier)


state 107

   92 opcode_modifier: TEST_TYPE opcode_modifier .

    $default  reduce using rule 92 (opcode_modifier)


state 108

   93 opcode_modifier: TEST_CHANSEL opcode_modifier .

    $default  reduce using rule 93 (opcode_modifier)


state 109

   86 opcode_modifier: REPEAT_FLAG opcode_modifier .

    $default  reduce using rule 86 (opcode_modifier)


state 110

   95 opcode_modifier: TEST_MASK opcode_modifier .

    $default  reduce using rule 95 (opcode_modifier)


state 111

   89 opcode_modifier: C10_FLAG opcode_modifier .

    $default  reduce using rule 89 (opcode_modifier)


state 112

   91 opcode_modifier: F16_FLAG opcode_modifier .

    $default  reduce using rule 91 (opcode_modifier)


state 113

   90 opcode_modifier: U8_FLAG opcode_modifier .

    $default  reduce using rule 90 (opcode_modifier)


state 114

   94 opcode_modifier: ABS opcode_modifier .

    $default  reduce using rule 94 (opcode_modifier)


state 115

  107 register_type: REGISTER .

    $default  reduce using rule 107 (register_type)


state 116

  108 register_type: TEMP_REGISTER .

    $default  reduce using rule 108 (register_type)


state 117

   12 opt_register_list: opt_register_list register_type . NUMBER

    NUMBER  shift, and go to state 147


state 118

   31 instruction: PLUS OPCODE opcode_modifier . argument maybe_mask COMMA source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 155
    prearg_mod  go to state 156


state 119

   52 instruction: PLUS COISSUE_OPCODE opcode_modifier . source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    source_arguments  go to state 157
    argument          go to state 158
    prearg_mod        go to state 156


state 120

   53 instruction: PLUS ASOP2_OPCODE opcode_modifier . source_arguments
   54            | PLUS ASOP2_OPCODE opcode_modifier . COMMA source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    COMMA      shift, and go to state 159
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    source_arguments  go to state 160
    argument          go to state 158
    prearg_mod        go to state 156


state 121

   69 preopcode_flag: OPEN_BRACKET preopcode_flag CLOSE_BRACKET .

    $default  reduce using rule 69 (preopcode_flag)


state 122

   70 preopcode_flag: OPEN_BRACKET preopcode_flag COMMA . preopcode_flag CLOSE_BRACKET

    TEMP_REGISTER  shift, and go to state 3
    BANG           shift, and go to state 9
    OPEN_BRACKET   shift, and go to state 10
    PRED0          shift, and go to state 12
    PRED1          shift, and go to state 13
    PRED2          shift, and go to state 14
    PRED3          shift, and go to state 15
    PREDN          shift, and go to state 16
    NOSCHED_FLAG   shift, and go to state 27
    SKIPINV_FLAG   shift, and go to state 28

    $default  reduce using rule 64 (preopcode_flag)

    preopcode_flag  go to state 161
    predicate       go to state 41
    repeat          go to state 42


state 123

   28 forcealign: FORCE_ALIGN NUMBER COMMA . NUMBER

    NUMBER  shift, and go to state 162


state 124

   20 pseudo_instruction: TARGET TARGET_SPECIFIER COMMA . NUMBER

    NUMBER  shift, and go to state 163


state 125

  222 temp_reg_name: IDENTIFIER OPEN_SQBRACKET . HASH NUMBER CLOSE_SQBRACKET
  223              | IDENTIFIER OPEN_SQBRACKET . expr CLOSE_SQBRACKET

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    HASH          shift, and go to state 166
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 169


state 126

  220 temp_reg_names: temp_reg_names COMMA . temp_reg_name

    IDENTIFIER  shift, and go to state 74

    temp_reg_name  go to state 170


state 127

   40 instruction: PROC IDENTIFIER $@1 . OPEN_BRACKET temp_reg_names_optional CLOSE_BRACKET

    OPEN_BRACKET  shift, and go to state 171


state 128

   25 pseudo_instruction: NAMED_REGS_RANGE NUMBER COMMA . NUMBER

    NUMBER  shift, and go to state 172


state 129

   26 pseudo_instruction: RENAME_REG IDENTIFIER COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 173


state 130

   30 instruction: preopcode_flag OPCODE opcode_modifier . argument maybe_mask COMMA source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 174
    prearg_mod  go to state 156


state 131

   32 instruction: preopcode_flag LD_OPCODE opcode_modifier . argument COMMA ld_argument COMMA source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 175
    prearg_mod  go to state 156


state 132

   33 instruction: preopcode_flag ST_OPCODE opcode_modifier . st_argument COMMA source_arguments

    OPEN_SQBRACKET  shift, and go to state 176

    st_argument  go to state 177


state 133

   34 instruction: preopcode_flag ELD_OPCODE opcode_modifier . argument COMMA eld_argument COMMA argument COMMA argument

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 178
    prearg_mod  go to state 156


state 134

   35 instruction: preopcode_flag BRANCH_OPCODE opcode_modifier . label

    IDENTIFIER  shift, and go to state 179

    label  go to state 180


state 135

   37 instruction: preopcode_flag EFO_OPCODE opcode_modifier . argument EQUALS efo_dest_select COMMA efo_expression COMMA source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 181
    prearg_mod  go to state 156


state 136

   41 instruction: preopcode_flag LAPC_OPCODE opcode_modifier .

    $default  reduce using rule 41 (instruction)


state 137

   46 instruction: preopcode_flag WDF_OPCODE opcode_modifier . arg_register

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 204
    dest_index_register  go to state 205


state 138

   50 instruction: preopcode_flag EXT_OPCODE opcode_modifier . argument EQUALS efo_dest_select COMMA argument COMMA argument COMMA argument
   51            | preopcode_flag EXT_OPCODE opcode_modifier . argument COMMA argument COMMA argument COMMA argument

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 206
    prearg_mod  go to state 156


state 139

   43 instruction: preopcode_flag LOCKRELEASE_OPCODE opcode_modifier .
   44            | preopcode_flag LOCKRELEASE_OPCODE opcode_modifier . arg_register

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    $default  reduce using rule 43 (instruction)

    register_type        go to state 203
    arg_register         go to state 207
    dest_index_register  go to state 205


state 140

   49 instruction: preopcode_flag IDF_OPCODE opcode_modifier . arg_register COMMA idf_path

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 208
    dest_index_register  go to state 205


state 141

   55 instruction: preopcode_flag FIR_OPCODE opcode_modifier . argument maybe_mask COMMA source_arguments
   56            | preopcode_flag FIR_OPCODE opcode_modifier . COMMA source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    COMMA      shift, and go to state 209
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 210
    prearg_mod  go to state 156


state 142

   48 instruction: preopcode_flag ONEARG_OPCODE opcode_modifier . arg_register

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 211
    dest_index_register  go to state 205


state 143

   36 instruction: preopcode_flag CALL_OPCODE opcode_modifier . procedure

    IDENTIFIER  shift, and go to state 212

    procedure  go to state 213


state 144

   42 instruction: preopcode_flag NOP_OPCODE opcode_modifier .

    $default  reduce using rule 42 (instruction)


state 145

   57 instruction: preopcode_flag EMITVTX_OPCODE opcode_modifier . source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    source_arguments  go to state 214
    argument          go to state 158
    prearg_mod        go to state 156


state 146

   47 instruction: preopcode_flag CFI_OPCODE opcode_modifier . arg_register COMMA arg_register COMMA arg_register

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 215
    dest_index_register  go to state 205


state 147

   12 opt_register_list: opt_register_list register_type NUMBER .

    $default  reduce using rule 12 (opt_register_list)


state 148

  100 argument: error .

    $default  reduce using rule 100 (argument)


state 149

  106 prearg_mod: NUMBER . MINUS

    MINUS  shift, and go to state 216


state 150

  102 prearg_mod: PLUS .

    $default  reduce using rule 102 (prearg_mod)


state 151

  103 prearg_mod: MINUS .

    $default  reduce using rule 103 (prearg_mod)


state 152

  105 prearg_mod: BANG .

    $default  reduce using rule 105 (prearg_mod)


state 153

  104 prearg_mod: NOT .

    $default  reduce using rule 104 (prearg_mod)


state 154

   99 argument: ABS_NODOT . OPEN_BRACKET arg_register CLOSE_BRACKET arg_modifier

    OPEN_BRACKET  shift, and go to state 217


state 155

   31 instruction: PLUS OPCODE opcode_modifier argument . maybe_mask COMMA source_arguments

    MASK  shift, and go to state 218

    $default  reduce using rule 62 (maybe_mask)

    maybe_mask  go to state 219


state 156

   98 argument: prearg_mod . arg_register arg_modifier

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 220
    dest_index_register  go to state 205


state 157

   52 instruction: PLUS COISSUE_OPCODE opcode_modifier source_arguments .

    $default  reduce using rule 52 (instruction)


state 158

   96 source_arguments: argument .
   97                 | argument . COMMA source_arguments

    COMMA  shift, and go to state 221

    $default  reduce using rule 96 (source_arguments)


state 159

   54 instruction: PLUS ASOP2_OPCODE opcode_modifier COMMA . source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    source_arguments  go to state 222
    argument          go to state 158
    prearg_mod        go to state 156


state 160

   53 instruction: PLUS ASOP2_OPCODE opcode_modifier source_arguments .

    $default  reduce using rule 53 (instruction)


state 161

   70 preopcode_flag: OPEN_BRACKET preopcode_flag COMMA preopcode_flag . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 223


state 162

   28 forcealign: FORCE_ALIGN NUMBER COMMA NUMBER .

    $default  reduce using rule 28 (forcealign)


state 163

   20 pseudo_instruction: TARGET TARGET_SPECIFIER COMMA NUMBER .

    $default  reduce using rule 20 (pseudo_instruction)


state 164

  145 expr: NUMBER .

    $default  reduce using rule 145 (expr)


state 165

  158 expr: MINUS . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 224


state 166

  222 temp_reg_name: IDENTIFIER OPEN_SQBRACKET HASH . NUMBER CLOSE_SQBRACKET

    NUMBER  shift, and go to state 225


state 167

  153 expr: NOT . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 226


state 168

  157 expr: OPEN_BRACKET . expr CLOSE_BRACKET

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 227


state 169

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr
  223 temp_reg_name: IDENTIFIER OPEN_SQBRACKET expr . CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 228
    PLUS             shift, and go to state 229
    MINUS            shift, and go to state 230
    TIMES            shift, and go to state 231
    DIVIDE           shift, and go to state 232
    LSHIFT           shift, and go to state 233
    RSHIFT           shift, and go to state 234
    AND              shift, and go to state 235
    OR               shift, and go to state 236
    XOR              shift, and go to state 237
    MODULUS          shift, and go to state 238


state 170

  220 temp_reg_names: temp_reg_names COMMA temp_reg_name .

    $default  reduce using rule 220 (temp_reg_names)


state 171

   40 instruction: PROC IDENTIFIER $@1 OPEN_BRACKET . temp_reg_names_optional CLOSE_BRACKET

    IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 217 (temp_reg_names_optional)

    temp_reg_names_optional  go to state 239
    temp_reg_names           go to state 240
    temp_reg_name            go to state 76


state 172

   25 pseudo_instruction: NAMED_REGS_RANGE NUMBER COMMA NUMBER .

    $default  reduce using rule 25 (pseudo_instruction)


state 173

   26 pseudo_instruction: RENAME_REG IDENTIFIER COMMA IDENTIFIER .

    $default  reduce using rule 26 (pseudo_instruction)


state 174

   30 instruction: preopcode_flag OPCODE opcode_modifier argument . maybe_mask COMMA source_arguments

    MASK  shift, and go to state 218

    $default  reduce using rule 62 (maybe_mask)

    maybe_mask  go to state 241


state 175

   32 instruction: preopcode_flag LD_OPCODE opcode_modifier argument . COMMA ld_argument COMMA source_arguments

    COMMA  shift, and go to state 242


state 176

  175 st_argument: OPEN_SQBRACKET . arg_register CLOSE_SQBRACKET
  176            | OPEN_SQBRACKET . arg_register COMMA ldst_offset_argument CLOSE_SQBRACKET

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 243
    dest_index_register  go to state 205


state 177

   33 instruction: preopcode_flag ST_OPCODE opcode_modifier st_argument . COMMA source_arguments

    COMMA  shift, and go to state 244


state 178

   34 instruction: preopcode_flag ELD_OPCODE opcode_modifier argument . COMMA eld_argument COMMA argument COMMA argument

    COMMA  shift, and go to state 245


state 179

   58 label: IDENTIFIER .
   59      | IDENTIFIER . PLUS expr
   60      | IDENTIFIER . MINUS expr

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 58 (label)


state 180

   35 instruction: preopcode_flag BRANCH_OPCODE opcode_modifier label .

    $default  reduce using rule 35 (instruction)


state 181

   37 instruction: preopcode_flag EFO_OPCODE opcode_modifier argument . EQUALS efo_dest_select COMMA efo_expression COMMA source_arguments

    EQUALS  shift, and go to state 248


state 182

  136 arg_register: OPCODE .

    $default  reduce using rule 136 (arg_register)


state 183

  111 arg_register: HASH . expr
  112             | HASH . FLOAT_NUMBER
  113             | HASH . MINUS FLOAT_NUMBER
  114             | HASH . LABEL_ADDRESS OPEN_BRACKET IDENTIFIER CLOSE_BRACKET

    NUMBER         shift, and go to state 164
    FLOAT_NUMBER   shift, and go to state 249
    MINUS          shift, and go to state 250
    NOT            shift, and go to state 167
    OPEN_BRACKET   shift, and go to state 168
    LABEL_ADDRESS  shift, and go to state 251

    expr  go to state 252


state 184

  125 arg_register: PRED0 .

    $default  reduce using rule 125 (arg_register)


state 185

  126 arg_register: PRED1 .

    $default  reduce using rule 126 (arg_register)


state 186

  127 arg_register: PRED2 .

    $default  reduce using rule 127 (arg_register)


state 187

  128 arg_register: PRED3 .

    $default  reduce using rule 128 (arg_register)


state 188

  130 arg_register: I0 .

    $default  reduce using rule 130 (arg_register)


state 189

  131 arg_register: I1 .

    $default  reduce using rule 131 (arg_register)


state 190

  137 arg_register: SRC0 .

    $default  reduce using rule 137 (arg_register)


state 191

  138 arg_register: SRC1 .

    $default  reduce using rule 138 (arg_register)


state 192

  139 arg_register: SRC2 .

    $default  reduce using rule 139 (arg_register)


state 193

  132 arg_register: DIRECT_IMMEDIATE .

    $default  reduce using rule 132 (arg_register)


state 194

  134 arg_register: ADDRESS_MODE .

    $default  reduce using rule 134 (arg_register)


state 195

  133 arg_register: SWIZZLE .

    $default  reduce using rule 133 (arg_register)


state 196

  135 arg_register: INTSRCSEL .

    $default  reduce using rule 135 (arg_register)


state 197

  161 dest_index_register: INDEXLOW .

    $default  reduce using rule 161 (dest_index_register)


state 198

  162 dest_index_register: INDEXHIGH .

    $default  reduce using rule 162 (dest_index_register)


state 199

  163 dest_index_register: INDEXBOTH .

    $default  reduce using rule 163 (dest_index_register)


state 200

  129 arg_register: PCLINK .

    $default  reduce using rule 129 (arg_register)


state 201

  143 arg_register: SCOPE_NAME . IDENTIFIER
  144             | SCOPE_NAME . IDENTIFIER OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET

    IDENTIFIER  shift, and go to state 253


state 202

  140 arg_register: IDENTIFIER .
  141             | IDENTIFIER . OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET
  142             | IDENTIFIER . OPEN_SQBRACKET expr CLOSE_SQBRACKET

    OPEN_SQBRACKET  shift, and go to state 254

    $default  reduce using rule 140 (arg_register)


state 203

  109 arg_register: register_type . NUMBER
  115             | register_type . OPEN_SQBRACKET src_index_register CLOSE_SQBRACKET
  116             | register_type . OPEN_SQBRACKET src_index_register PLUS HASH NUMBER CLOSE_SQBRACKET
  117             | register_type . OPEN_SQBRACKET src_index_register PLUS expr CLOSE_SQBRACKET
  118             | register_type . OPEN_SQBRACKET expr PLUS src_index_register CLOSE_SQBRACKET
  119             | register_type . NUMBER OPEN_SQBRACKET src_index_register PLUS expr CLOSE_SQBRACKET
  120             | register_type . NUMBER OPEN_SQBRACKET expr PLUS src_index_register CLOSE_SQBRACKET
  121             | register_type . OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET
  122             | register_type . OPEN_SQBRACKET expr CLOSE_SQBRACKET
  123             | register_type . NUMBER OPEN_SQBRACKET src_index_register CLOSE_SQBRACKET
  124             | register_type . NUMBER OPEN_SQBRACKET src_index_register PLUS HASH NUMBER CLOSE_SQBRACKET

    NUMBER          shift, and go to state 255
    OPEN_SQBRACKET  shift, and go to state 256


state 204

   46 instruction: preopcode_flag WDF_OPCODE opcode_modifier arg_register .

    $default  reduce using rule 46 (instruction)


state 205

  110 arg_register: dest_index_register .

    $default  reduce using rule 110 (arg_register)


state 206

   50 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument . EQUALS efo_dest_select COMMA argument COMMA argument COMMA argument
   51            | preopcode_flag EXT_OPCODE opcode_modifier argument . COMMA argument COMMA argument COMMA argument

    EQUALS  shift, and go to state 257
    COMMA   shift, and go to state 258


state 207

   44 instruction: preopcode_flag LOCKRELEASE_OPCODE opcode_modifier arg_register .

    $default  reduce using rule 44 (instruction)


state 208

   49 instruction: preopcode_flag IDF_OPCODE opcode_modifier arg_register . COMMA idf_path

    COMMA  shift, and go to state 259


state 209

   56 instruction: preopcode_flag FIR_OPCODE opcode_modifier COMMA . source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    source_arguments  go to state 260
    argument          go to state 158
    prearg_mod        go to state 156


state 210

   55 instruction: preopcode_flag FIR_OPCODE opcode_modifier argument . maybe_mask COMMA source_arguments

    MASK  shift, and go to state 218

    $default  reduce using rule 62 (maybe_mask)

    maybe_mask  go to state 261


state 211

   48 instruction: preopcode_flag ONEARG_OPCODE opcode_modifier arg_register .

    $default  reduce using rule 48 (instruction)


state 212

   61 procedure: IDENTIFIER .

    $default  reduce using rule 61 (procedure)


state 213

   36 instruction: preopcode_flag CALL_OPCODE opcode_modifier procedure .

    $default  reduce using rule 36 (instruction)


state 214

   57 instruction: preopcode_flag EMITVTX_OPCODE opcode_modifier source_arguments .

    $default  reduce using rule 57 (instruction)


state 215

   47 instruction: preopcode_flag CFI_OPCODE opcode_modifier arg_register . COMMA arg_register COMMA arg_register

    COMMA  shift, and go to state 262


state 216

  106 prearg_mod: NUMBER MINUS .

    $default  reduce using rule 106 (prearg_mod)


state 217

   99 argument: ABS_NODOT OPEN_BRACKET . arg_register CLOSE_BRACKET arg_modifier

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 263
    dest_index_register  go to state 205


state 218

   63 maybe_mask: MASK .

    $default  reduce using rule 63 (maybe_mask)


state 219

   31 instruction: PLUS OPCODE opcode_modifier argument maybe_mask . COMMA source_arguments

    COMMA  shift, and go to state 264


state 220

   98 argument: prearg_mod arg_register . arg_modifier

    ARGUMENT_FLAG  shift, and go to state 265
    C10_FLAG       shift, and go to state 266
    F16_FLAG       shift, and go to state 267
    U8_FLAG        shift, and go to state 268
    ABS            shift, and go to state 269

    $default  reduce using rule 164 (arg_modifier)

    arg_modifier  go to state 270


state 221

   97 source_arguments: argument COMMA . source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    source_arguments  go to state 271
    argument          go to state 158
    prearg_mod        go to state 156


state 222

   54 instruction: PLUS ASOP2_OPCODE opcode_modifier COMMA source_arguments .

    $default  reduce using rule 54 (instruction)


state 223

   70 preopcode_flag: OPEN_BRACKET preopcode_flag COMMA preopcode_flag CLOSE_BRACKET .

    $default  reduce using rule 70 (preopcode_flag)


state 224

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr
  158     | MINUS expr .

    PLUS     shift, and go to state 229
    TIMES    shift, and go to state 231
    DIVIDE   shift, and go to state 232
    MODULUS  shift, and go to state 238

    $default  reduce using rule 158 (expr)


state 225

  222 temp_reg_name: IDENTIFIER OPEN_SQBRACKET HASH NUMBER . CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 272


state 226

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  153     | NOT expr .
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    MODULUS  shift, and go to state 238

    $default  reduce using rule 153 (expr)


state 227

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr
  157     | OPEN_BRACKET expr . CLOSE_BRACKET

    PLUS           shift, and go to state 229
    MINUS          shift, and go to state 230
    TIMES          shift, and go to state 231
    DIVIDE         shift, and go to state 232
    LSHIFT         shift, and go to state 233
    RSHIFT         shift, and go to state 234
    AND            shift, and go to state 235
    OR             shift, and go to state 236
    XOR            shift, and go to state 237
    CLOSE_BRACKET  shift, and go to state 273
    MODULUS        shift, and go to state 238


state 228

  223 temp_reg_name: IDENTIFIER OPEN_SQBRACKET expr CLOSE_SQBRACKET .

    $default  reduce using rule 223 (temp_reg_name)


state 229

  146 expr: expr PLUS . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 274


state 230

  147 expr: expr MINUS . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 275


state 231

  148 expr: expr TIMES . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 276


state 232

  149 expr: expr DIVIDE . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 277


state 233

  150 expr: expr LSHIFT . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 278


state 234

  151 expr: expr RSHIFT . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 279


state 235

  154 expr: expr AND . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 280


state 236

  155 expr: expr OR . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 281


state 237

  156 expr: expr XOR . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 282


state 238

  152 expr: expr MODULUS . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 283


state 239

   40 instruction: PROC IDENTIFIER $@1 OPEN_BRACKET temp_reg_names_optional . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 284


state 240

  218 temp_reg_names_optional: temp_reg_names .
  220 temp_reg_names: temp_reg_names . COMMA temp_reg_name

    COMMA  shift, and go to state 126

    $default  reduce using rule 218 (temp_reg_names_optional)


state 241

   30 instruction: preopcode_flag OPCODE opcode_modifier argument maybe_mask . COMMA source_arguments

    COMMA  shift, and go to state 285


state 242

   32 instruction: preopcode_flag LD_OPCODE opcode_modifier argument COMMA . ld_argument COMMA source_arguments

    OPEN_SQBRACKET  shift, and go to state 286

    ld_argument  go to state 287


state 243

  175 st_argument: OPEN_SQBRACKET arg_register . CLOSE_SQBRACKET
  176            | OPEN_SQBRACKET arg_register . COMMA ldst_offset_argument CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 288
    COMMA            shift, and go to state 289


state 244

   33 instruction: preopcode_flag ST_OPCODE opcode_modifier st_argument COMMA . source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    source_arguments  go to state 290
    argument          go to state 158
    prearg_mod        go to state 156


state 245

   34 instruction: preopcode_flag ELD_OPCODE opcode_modifier argument COMMA . eld_argument COMMA argument COMMA argument

    OPEN_SQBRACKET  shift, and go to state 291

    eld_argument  go to state 292


state 246

   59 label: IDENTIFIER PLUS . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 293


state 247

   60 label: IDENTIFIER MINUS . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 294


state 248

   37 instruction: preopcode_flag EFO_OPCODE opcode_modifier argument EQUALS . efo_dest_select COMMA efo_expression COMMA source_arguments

    I0  shift, and go to state 295
    I1  shift, and go to state 296
    A0  shift, and go to state 297
    A1  shift, and go to state 298

    efo_dest_select  go to state 299


state 249

  112 arg_register: HASH FLOAT_NUMBER .

    $default  reduce using rule 112 (arg_register)


state 250

  113 arg_register: HASH MINUS . FLOAT_NUMBER
  158 expr: MINUS . expr

    NUMBER        shift, and go to state 164
    FLOAT_NUMBER  shift, and go to state 300
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 224


state 251

  114 arg_register: HASH LABEL_ADDRESS . OPEN_BRACKET IDENTIFIER CLOSE_BRACKET

    OPEN_BRACKET  shift, and go to state 301


state 252

  111 arg_register: HASH expr .
  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    PLUS     shift, and go to state 229
    MINUS    shift, and go to state 230
    TIMES    shift, and go to state 231
    DIVIDE   shift, and go to state 232
    LSHIFT   shift, and go to state 233
    RSHIFT   shift, and go to state 234
    AND      shift, and go to state 235
    OR       shift, and go to state 236
    XOR      shift, and go to state 237
    MODULUS  shift, and go to state 238

    MINUS     [reduce using rule 111 (arg_register)]
    $default  reduce using rule 111 (arg_register)


state 253

  143 arg_register: SCOPE_NAME IDENTIFIER .
  144             | SCOPE_NAME IDENTIFIER . OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET

    OPEN_SQBRACKET  shift, and go to state 302

    $default  reduce using rule 143 (arg_register)


state 254

  141 arg_register: IDENTIFIER OPEN_SQBRACKET . HASH NUMBER CLOSE_SQBRACKET
  142             | IDENTIFIER OPEN_SQBRACKET . expr CLOSE_SQBRACKET

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    HASH          shift, and go to state 303
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 304


state 255

  109 arg_register: register_type NUMBER .
  119             | register_type NUMBER . OPEN_SQBRACKET src_index_register PLUS expr CLOSE_SQBRACKET
  120             | register_type NUMBER . OPEN_SQBRACKET expr PLUS src_index_register CLOSE_SQBRACKET
  123             | register_type NUMBER . OPEN_SQBRACKET src_index_register CLOSE_SQBRACKET
  124             | register_type NUMBER . OPEN_SQBRACKET src_index_register PLUS HASH NUMBER CLOSE_SQBRACKET

    OPEN_SQBRACKET  shift, and go to state 305

    $default  reduce using rule 109 (arg_register)


state 256

  115 arg_register: register_type OPEN_SQBRACKET . src_index_register CLOSE_SQBRACKET
  116             | register_type OPEN_SQBRACKET . src_index_register PLUS HASH NUMBER CLOSE_SQBRACKET
  117             | register_type OPEN_SQBRACKET . src_index_register PLUS expr CLOSE_SQBRACKET
  118             | register_type OPEN_SQBRACKET . expr PLUS src_index_register CLOSE_SQBRACKET
  121             | register_type OPEN_SQBRACKET . HASH NUMBER CLOSE_SQBRACKET
  122             | register_type OPEN_SQBRACKET . expr CLOSE_SQBRACKET

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    HASH          shift, and go to state 306
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168
    INDEXLOW      shift, and go to state 307
    INDEXHIGH     shift, and go to state 308

    expr                go to state 309
    src_index_register  go to state 310


state 257

   50 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument EQUALS . efo_dest_select COMMA argument COMMA argument COMMA argument

    I0  shift, and go to state 295
    I1  shift, and go to state 296
    A0  shift, and go to state 297
    A1  shift, and go to state 298

    efo_dest_select  go to state 311


state 258

   51 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument COMMA . argument COMMA argument COMMA argument

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 312
    prearg_mod  go to state 156


state 259

   49 instruction: preopcode_flag IDF_OPCODE opcode_modifier arg_register COMMA . idf_path

    IDF_ST       shift, and go to state 313
    IDF_PIXELBE  shift, and go to state 314

    idf_path  go to state 315


state 260

   56 instruction: preopcode_flag FIR_OPCODE opcode_modifier COMMA source_arguments .

    $default  reduce using rule 56 (instruction)


state 261

   55 instruction: preopcode_flag FIR_OPCODE opcode_modifier argument maybe_mask . COMMA source_arguments

    COMMA  shift, and go to state 316


state 262

   47 instruction: preopcode_flag CFI_OPCODE opcode_modifier arg_register COMMA . arg_register COMMA arg_register

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 317
    dest_index_register  go to state 205


state 263

   99 argument: ABS_NODOT OPEN_BRACKET arg_register . CLOSE_BRACKET arg_modifier

    CLOSE_BRACKET  shift, and go to state 318


state 264

   31 instruction: PLUS OPCODE opcode_modifier argument maybe_mask COMMA . source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    source_arguments  go to state 319
    argument          go to state 158
    prearg_mod        go to state 156


state 265

  165 arg_modifier: ARGUMENT_FLAG . arg_modifier

    ARGUMENT_FLAG  shift, and go to state 265
    C10_FLAG       shift, and go to state 266
    F16_FLAG       shift, and go to state 267
    U8_FLAG        shift, and go to state 268
    ABS            shift, and go to state 269

    $default  reduce using rule 164 (arg_modifier)

    arg_modifier  go to state 320


state 266

  166 arg_modifier: C10_FLAG . arg_modifier

    ARGUMENT_FLAG  shift, and go to state 265
    C10_FLAG       shift, and go to state 266
    F16_FLAG       shift, and go to state 267
    U8_FLAG        shift, and go to state 268
    ABS            shift, and go to state 269

    $default  reduce using rule 164 (arg_modifier)

    arg_modifier  go to state 321


state 267

  167 arg_modifier: F16_FLAG . arg_modifier

    ARGUMENT_FLAG  shift, and go to state 265
    C10_FLAG       shift, and go to state 266
    F16_FLAG       shift, and go to state 267
    U8_FLAG        shift, and go to state 268
    ABS            shift, and go to state 269

    $default  reduce using rule 164 (arg_modifier)

    arg_modifier  go to state 322


state 268

  168 arg_modifier: U8_FLAG . arg_modifier

    ARGUMENT_FLAG  shift, and go to state 265
    C10_FLAG       shift, and go to state 266
    F16_FLAG       shift, and go to state 267
    U8_FLAG        shift, and go to state 268
    ABS            shift, and go to state 269

    $default  reduce using rule 164 (arg_modifier)

    arg_modifier  go to state 323


state 269

  169 arg_modifier: ABS . arg_modifier

    ARGUMENT_FLAG  shift, and go to state 265
    C10_FLAG       shift, and go to state 266
    F16_FLAG       shift, and go to state 267
    U8_FLAG        shift, and go to state 268
    ABS            shift, and go to state 269

    $default  reduce using rule 164 (arg_modifier)

    arg_modifier  go to state 324


state 270

   98 argument: prearg_mod arg_register arg_modifier .

    $default  reduce using rule 98 (argument)


state 271

   97 source_arguments: argument COMMA source_arguments .

    $default  reduce using rule 97 (source_arguments)


state 272

  222 temp_reg_name: IDENTIFIER OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET .

    $default  reduce using rule 222 (temp_reg_name)


state 273

  157 expr: OPEN_BRACKET expr CLOSE_BRACKET .

    $default  reduce using rule 157 (expr)


state 274

  146 expr: expr . PLUS expr
  146     | expr PLUS expr .
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    TIMES    shift, and go to state 231
    DIVIDE   shift, and go to state 232
    MODULUS  shift, and go to state 238

    $default  reduce using rule 146 (expr)


state 275

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  147     | expr MINUS expr .
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    PLUS     shift, and go to state 229
    TIMES    shift, and go to state 231
    DIVIDE   shift, and go to state 232
    MODULUS  shift, and go to state 238

    $default  reduce using rule 147 (expr)


state 276

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  148     | expr TIMES expr .
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    MODULUS  shift, and go to state 238

    $default  reduce using rule 148 (expr)


state 277

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  149     | expr DIVIDE expr .
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    TIMES    shift, and go to state 231
    MODULUS  shift, and go to state 238

    $default  reduce using rule 149 (expr)


state 278

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  150     | expr LSHIFT expr .
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    PLUS     shift, and go to state 229
    MINUS    shift, and go to state 230
    TIMES    shift, and go to state 231
    DIVIDE   shift, and go to state 232
    MODULUS  shift, and go to state 238

    $default  reduce using rule 150 (expr)


state 279

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  151     | expr RSHIFT expr .
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    PLUS     shift, and go to state 229
    MINUS    shift, and go to state 230
    TIMES    shift, and go to state 231
    DIVIDE   shift, and go to state 232
    LSHIFT   shift, and go to state 233
    MODULUS  shift, and go to state 238

    $default  reduce using rule 151 (expr)


state 280

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  154     | expr AND expr .
  155     | expr . OR expr
  156     | expr . XOR expr

    PLUS     shift, and go to state 229
    MINUS    shift, and go to state 230
    TIMES    shift, and go to state 231
    DIVIDE   shift, and go to state 232
    LSHIFT   shift, and go to state 233
    RSHIFT   shift, and go to state 234
    XOR      shift, and go to state 237
    MODULUS  shift, and go to state 238

    $default  reduce using rule 154 (expr)


state 281

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  155     | expr OR expr .
  156     | expr . XOR expr

    PLUS     shift, and go to state 229
    MINUS    shift, and go to state 230
    TIMES    shift, and go to state 231
    DIVIDE   shift, and go to state 232
    LSHIFT   shift, and go to state 233
    RSHIFT   shift, and go to state 234
    AND      shift, and go to state 235
    XOR      shift, and go to state 237
    MODULUS  shift, and go to state 238

    $default  reduce using rule 155 (expr)


state 282

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr
  156     | expr XOR expr .

    PLUS     shift, and go to state 229
    MINUS    shift, and go to state 230
    TIMES    shift, and go to state 231
    DIVIDE   shift, and go to state 232
    LSHIFT   shift, and go to state 233
    RSHIFT   shift, and go to state 234
    MODULUS  shift, and go to state 238

    $default  reduce using rule 156 (expr)


state 283

  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  152     | expr MODULUS expr .
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    $default  reduce using rule 152 (expr)


state 284

   40 instruction: PROC IDENTIFIER $@1 OPEN_BRACKET temp_reg_names_optional CLOSE_BRACKET .

    $default  reduce using rule 40 (instruction)


state 285

   30 instruction: preopcode_flag OPCODE opcode_modifier argument maybe_mask COMMA . source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    source_arguments  go to state 325
    argument          go to state 158
    prearg_mod        go to state 156


state 286

  170 ld_argument: OPEN_SQBRACKET . arg_register CLOSE_SQBRACKET
  171            | OPEN_SQBRACKET . arg_register COMMA ldst_offset_argument CLOSE_SQBRACKET
  172            | OPEN_SQBRACKET . arg_register COMMA ldst_offset_argument COMMA arg_register CLOSE_SQBRACKET

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 326
    dest_index_register  go to state 205


state 287

   32 instruction: preopcode_flag LD_OPCODE opcode_modifier argument COMMA ld_argument . COMMA source_arguments

    COMMA  shift, and go to state 327


state 288

  175 st_argument: OPEN_SQBRACKET arg_register CLOSE_SQBRACKET .

    $default  reduce using rule 175 (st_argument)


state 289

  176 st_argument: OPEN_SQBRACKET arg_register COMMA . ldst_offset_argument CLOSE_SQBRACKET

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    MINUS             shift, and go to state 328
    HASH              shift, and go to state 183
    PLUSPLUS          shift, and go to state 329
    MINUSMINUS        shift, and go to state 330
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type         go to state 203
    arg_register          go to state 331
    dest_index_register   go to state 205
    ldst_offset_argument  go to state 332
    offset_op             go to state 333


state 290

   33 instruction: preopcode_flag ST_OPCODE opcode_modifier st_argument COMMA source_arguments .

    $default  reduce using rule 33 (instruction)


state 291

  173 eld_argument: OPEN_SQBRACKET . arg_register COMMA arg_register CLOSE_SQBRACKET
  174             | OPEN_SQBRACKET . arg_register COMMA arg_register COMMA arg_register CLOSE_SQBRACKET

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 334
    dest_index_register  go to state 205


state 292

   34 instruction: preopcode_flag ELD_OPCODE opcode_modifier argument COMMA eld_argument . COMMA argument COMMA argument

    COMMA  shift, and go to state 335


state 293

   59 label: IDENTIFIER PLUS expr .
  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    PLUS     shift, and go to state 229
    MINUS    shift, and go to state 230
    TIMES    shift, and go to state 231
    DIVIDE   shift, and go to state 232
    LSHIFT   shift, and go to state 233
    RSHIFT   shift, and go to state 234
    AND      shift, and go to state 235
    OR       shift, and go to state 236
    XOR      shift, and go to state 237
    MODULUS  shift, and go to state 238

    $default  reduce using rule 59 (label)


state 294

   60 label: IDENTIFIER MINUS expr .
  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    PLUS     shift, and go to state 229
    MINUS    shift, and go to state 230
    TIMES    shift, and go to state 231
    DIVIDE   shift, and go to state 232
    LSHIFT   shift, and go to state 233
    RSHIFT   shift, and go to state 234
    AND      shift, and go to state 235
    OR       shift, and go to state 236
    XOR      shift, and go to state 237
    MODULUS  shift, and go to state 238

    $default  reduce using rule 60 (label)


state 295

  207 efo_dest_select: I0 .

    $default  reduce using rule 207 (efo_dest_select)


state 296

  208 efo_dest_select: I1 .

    $default  reduce using rule 208 (efo_dest_select)


state 297

  209 efo_dest_select: A0 .

    $default  reduce using rule 209 (efo_dest_select)


state 298

  210 efo_dest_select: A1 .

    $default  reduce using rule 210 (efo_dest_select)


state 299

   37 instruction: preopcode_flag EFO_OPCODE opcode_modifier argument EQUALS efo_dest_select . COMMA efo_expression COMMA source_arguments

    COMMA  shift, and go to state 336


state 300

  113 arg_register: HASH MINUS FLOAT_NUMBER .

    $default  reduce using rule 113 (arg_register)


state 301

  114 arg_register: HASH LABEL_ADDRESS OPEN_BRACKET . IDENTIFIER CLOSE_BRACKET

    IDENTIFIER  shift, and go to state 337


state 302

  144 arg_register: SCOPE_NAME IDENTIFIER OPEN_SQBRACKET . HASH NUMBER CLOSE_SQBRACKET

    HASH  shift, and go to state 338


state 303

  141 arg_register: IDENTIFIER OPEN_SQBRACKET HASH . NUMBER CLOSE_SQBRACKET

    NUMBER  shift, and go to state 339


state 304

  142 arg_register: IDENTIFIER OPEN_SQBRACKET expr . CLOSE_SQBRACKET
  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    CLOSE_SQBRACKET  shift, and go to state 340
    PLUS             shift, and go to state 229
    MINUS            shift, and go to state 230
    TIMES            shift, and go to state 231
    DIVIDE           shift, and go to state 232
    LSHIFT           shift, and go to state 233
    RSHIFT           shift, and go to state 234
    AND              shift, and go to state 235
    OR               shift, and go to state 236
    XOR              shift, and go to state 237
    MODULUS          shift, and go to state 238


state 305

  119 arg_register: register_type NUMBER OPEN_SQBRACKET . src_index_register PLUS expr CLOSE_SQBRACKET
  120             | register_type NUMBER OPEN_SQBRACKET . expr PLUS src_index_register CLOSE_SQBRACKET
  123             | register_type NUMBER OPEN_SQBRACKET . src_index_register CLOSE_SQBRACKET
  124             | register_type NUMBER OPEN_SQBRACKET . src_index_register PLUS HASH NUMBER CLOSE_SQBRACKET

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168
    INDEXLOW      shift, and go to state 307
    INDEXHIGH     shift, and go to state 308

    expr                go to state 341
    src_index_register  go to state 342


state 306

  121 arg_register: register_type OPEN_SQBRACKET HASH . NUMBER CLOSE_SQBRACKET

    NUMBER  shift, and go to state 343


state 307

  159 src_index_register: INDEXLOW .

    $default  reduce using rule 159 (src_index_register)


state 308

  160 src_index_register: INDEXHIGH .

    $default  reduce using rule 160 (src_index_register)


state 309

  118 arg_register: register_type OPEN_SQBRACKET expr . PLUS src_index_register CLOSE_SQBRACKET
  122             | register_type OPEN_SQBRACKET expr . CLOSE_SQBRACKET
  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    CLOSE_SQBRACKET  shift, and go to state 344
    PLUS             shift, and go to state 345
    MINUS            shift, and go to state 230
    TIMES            shift, and go to state 231
    DIVIDE           shift, and go to state 232
    LSHIFT           shift, and go to state 233
    RSHIFT           shift, and go to state 234
    AND              shift, and go to state 235
    OR               shift, and go to state 236
    XOR              shift, and go to state 237
    MODULUS          shift, and go to state 238


state 310

  115 arg_register: register_type OPEN_SQBRACKET src_index_register . CLOSE_SQBRACKET
  116             | register_type OPEN_SQBRACKET src_index_register . PLUS HASH NUMBER CLOSE_SQBRACKET
  117             | register_type OPEN_SQBRACKET src_index_register . PLUS expr CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 346
    PLUS             shift, and go to state 347


state 311

   50 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument EQUALS efo_dest_select . COMMA argument COMMA argument COMMA argument

    COMMA  shift, and go to state 348


state 312

   51 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument COMMA argument . COMMA argument COMMA argument

    COMMA  shift, and go to state 349


state 313

   82 idf_path: IDF_ST .

    $default  reduce using rule 82 (idf_path)


state 314

   83 idf_path: IDF_PIXELBE .

    $default  reduce using rule 83 (idf_path)


state 315

   49 instruction: preopcode_flag IDF_OPCODE opcode_modifier arg_register COMMA idf_path .

    $default  reduce using rule 49 (instruction)


state 316

   55 instruction: preopcode_flag FIR_OPCODE opcode_modifier argument maybe_mask COMMA . source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    source_arguments  go to state 350
    argument          go to state 158
    prearg_mod        go to state 156


state 317

   47 instruction: preopcode_flag CFI_OPCODE opcode_modifier arg_register COMMA arg_register . COMMA arg_register

    COMMA  shift, and go to state 351


state 318

   99 argument: ABS_NODOT OPEN_BRACKET arg_register CLOSE_BRACKET . arg_modifier

    ARGUMENT_FLAG  shift, and go to state 265
    C10_FLAG       shift, and go to state 266
    F16_FLAG       shift, and go to state 267
    U8_FLAG        shift, and go to state 268
    ABS            shift, and go to state 269

    $default  reduce using rule 164 (arg_modifier)

    arg_modifier  go to state 352


state 319

   31 instruction: PLUS OPCODE opcode_modifier argument maybe_mask COMMA source_arguments .

    $default  reduce using rule 31 (instruction)


state 320

  165 arg_modifier: ARGUMENT_FLAG arg_modifier .

    $default  reduce using rule 165 (arg_modifier)


state 321

  166 arg_modifier: C10_FLAG arg_modifier .

    $default  reduce using rule 166 (arg_modifier)


state 322

  167 arg_modifier: F16_FLAG arg_modifier .

    $default  reduce using rule 167 (arg_modifier)


state 323

  168 arg_modifier: U8_FLAG arg_modifier .

    $default  reduce using rule 168 (arg_modifier)


state 324

  169 arg_modifier: ABS arg_modifier .

    $default  reduce using rule 169 (arg_modifier)


state 325

   30 instruction: preopcode_flag OPCODE opcode_modifier argument maybe_mask COMMA source_arguments .

    $default  reduce using rule 30 (instruction)


state 326

  170 ld_argument: OPEN_SQBRACKET arg_register . CLOSE_SQBRACKET
  171            | OPEN_SQBRACKET arg_register . COMMA ldst_offset_argument CLOSE_SQBRACKET
  172            | OPEN_SQBRACKET arg_register . COMMA ldst_offset_argument COMMA arg_register CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 353
    COMMA            shift, and go to state 354


state 327

   32 instruction: preopcode_flag LD_OPCODE opcode_modifier argument COMMA ld_argument COMMA . source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    source_arguments  go to state 355
    argument          go to state 158
    prearg_mod        go to state 156


state 328

  182 offset_op: MINUS .

    $default  reduce using rule 182 (offset_op)


state 329

  180 offset_op: PLUSPLUS .

    $default  reduce using rule 180 (offset_op)


state 330

  181 offset_op: MINUSMINUS .

    $default  reduce using rule 181 (offset_op)


state 331

  177 ldst_offset_argument: arg_register .
  179                     | arg_register . offset_op

    MINUS       shift, and go to state 328
    PLUSPLUS    shift, and go to state 329
    MINUSMINUS  shift, and go to state 330

    $default  reduce using rule 177 (ldst_offset_argument)

    offset_op  go to state 356


state 332

  176 st_argument: OPEN_SQBRACKET arg_register COMMA ldst_offset_argument . CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 357


state 333

  178 ldst_offset_argument: offset_op . arg_register

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 358
    dest_index_register  go to state 205


state 334

  173 eld_argument: OPEN_SQBRACKET arg_register . COMMA arg_register CLOSE_SQBRACKET
  174             | OPEN_SQBRACKET arg_register . COMMA arg_register COMMA arg_register CLOSE_SQBRACKET

    COMMA  shift, and go to state 359


state 335

   34 instruction: preopcode_flag ELD_OPCODE opcode_modifier argument COMMA eld_argument COMMA . argument COMMA argument

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 360
    prearg_mod  go to state 156


state 336

   37 instruction: preopcode_flag EFO_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA . efo_expression COMMA source_arguments

    BANG  shift, and go to state 361

    $default  reduce using rule 211 (maybe_bang)

    efo_expression  go to state 362
    maybe_bang      go to state 363


state 337

  114 arg_register: HASH LABEL_ADDRESS OPEN_BRACKET IDENTIFIER . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 364


state 338

  144 arg_register: SCOPE_NAME IDENTIFIER OPEN_SQBRACKET HASH . NUMBER CLOSE_SQBRACKET

    NUMBER  shift, and go to state 365


state 339

  141 arg_register: IDENTIFIER OPEN_SQBRACKET HASH NUMBER . CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 366


state 340

  142 arg_register: IDENTIFIER OPEN_SQBRACKET expr CLOSE_SQBRACKET .

    $default  reduce using rule 142 (arg_register)


state 341

  120 arg_register: register_type NUMBER OPEN_SQBRACKET expr . PLUS src_index_register CLOSE_SQBRACKET
  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    PLUS     shift, and go to state 367
    MINUS    shift, and go to state 230
    TIMES    shift, and go to state 231
    DIVIDE   shift, and go to state 232
    LSHIFT   shift, and go to state 233
    RSHIFT   shift, and go to state 234
    AND      shift, and go to state 235
    OR       shift, and go to state 236
    XOR      shift, and go to state 237
    MODULUS  shift, and go to state 238


state 342

  119 arg_register: register_type NUMBER OPEN_SQBRACKET src_index_register . PLUS expr CLOSE_SQBRACKET
  123             | register_type NUMBER OPEN_SQBRACKET src_index_register . CLOSE_SQBRACKET
  124             | register_type NUMBER OPEN_SQBRACKET src_index_register . PLUS HASH NUMBER CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 368
    PLUS             shift, and go to state 369


state 343

  121 arg_register: register_type OPEN_SQBRACKET HASH NUMBER . CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 370


state 344

  122 arg_register: register_type OPEN_SQBRACKET expr CLOSE_SQBRACKET .

    $default  reduce using rule 122 (arg_register)


state 345

  118 arg_register: register_type OPEN_SQBRACKET expr PLUS . src_index_register CLOSE_SQBRACKET
  146 expr: expr PLUS . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168
    INDEXLOW      shift, and go to state 307
    INDEXHIGH     shift, and go to state 308

    expr                go to state 274
    src_index_register  go to state 371


state 346

  115 arg_register: register_type OPEN_SQBRACKET src_index_register CLOSE_SQBRACKET .

    $default  reduce using rule 115 (arg_register)


state 347

  116 arg_register: register_type OPEN_SQBRACKET src_index_register PLUS . HASH NUMBER CLOSE_SQBRACKET
  117             | register_type OPEN_SQBRACKET src_index_register PLUS . expr CLOSE_SQBRACKET

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    HASH          shift, and go to state 372
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 373


state 348

   50 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA . argument COMMA argument COMMA argument

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 374
    prearg_mod  go to state 156


state 349

   51 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument COMMA argument COMMA . argument COMMA argument

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 375
    prearg_mod  go to state 156


state 350

   55 instruction: preopcode_flag FIR_OPCODE opcode_modifier argument maybe_mask COMMA source_arguments .

    $default  reduce using rule 55 (instruction)


state 351

   47 instruction: preopcode_flag CFI_OPCODE opcode_modifier arg_register COMMA arg_register COMMA . arg_register

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 376
    dest_index_register  go to state 205


state 352

   99 argument: ABS_NODOT OPEN_BRACKET arg_register CLOSE_BRACKET arg_modifier .

    $default  reduce using rule 99 (argument)


state 353

  170 ld_argument: OPEN_SQBRACKET arg_register CLOSE_SQBRACKET .

    $default  reduce using rule 170 (ld_argument)


state 354

  171 ld_argument: OPEN_SQBRACKET arg_register COMMA . ldst_offset_argument CLOSE_SQBRACKET
  172            | OPEN_SQBRACKET arg_register COMMA . ldst_offset_argument COMMA arg_register CLOSE_SQBRACKET

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    MINUS             shift, and go to state 328
    HASH              shift, and go to state 183
    PLUSPLUS          shift, and go to state 329
    MINUSMINUS        shift, and go to state 330
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type         go to state 203
    arg_register          go to state 331
    dest_index_register   go to state 205
    ldst_offset_argument  go to state 377
    offset_op             go to state 333


state 355

   32 instruction: preopcode_flag LD_OPCODE opcode_modifier argument COMMA ld_argument COMMA source_arguments .

    $default  reduce using rule 32 (instruction)


state 356

  179 ldst_offset_argument: arg_register offset_op .

    $default  reduce using rule 179 (ldst_offset_argument)


state 357

  176 st_argument: OPEN_SQBRACKET arg_register COMMA ldst_offset_argument CLOSE_SQBRACKET .

    $default  reduce using rule 176 (st_argument)


state 358

  178 ldst_offset_argument: offset_op arg_register .

    $default  reduce using rule 178 (ldst_offset_argument)


state 359

  173 eld_argument: OPEN_SQBRACKET arg_register COMMA . arg_register CLOSE_SQBRACKET
  174             | OPEN_SQBRACKET arg_register COMMA . arg_register COMMA arg_register CLOSE_SQBRACKET

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 378
    dest_index_register  go to state 205


state 360

   34 instruction: preopcode_flag ELD_OPCODE opcode_modifier argument COMMA eld_argument COMMA argument . COMMA argument

    COMMA  shift, and go to state 379


state 361

  212 maybe_bang: BANG .

    $default  reduce using rule 212 (maybe_bang)


state 362

   37 instruction: preopcode_flag EFO_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA efo_expression . COMMA source_arguments

    COMMA  shift, and go to state 380


state 363

  183 efo_expression: maybe_bang . I0 EQUALS A0 COMMA maybe_bang I1 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  184               | maybe_bang . I0 EQUALS A1 COMMA maybe_bang I1 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr
  185               | maybe_bang . I0 EQUALS M0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  186               | maybe_bang . I0 EQUALS A0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  187               | maybe_bang . I1 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  188               | maybe_bang . I1 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr
  189               | maybe_bang . I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  190               | maybe_bang . I0 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr
  191               | maybe_bang . I0 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  192               | maybe_bang . I0 EQUALS M0 COMMA efo_addr_expr COMMA efo_mul_expr

    I0  shift, and go to state 381
    I1  shift, and go to state 382


state 364

  114 arg_register: HASH LABEL_ADDRESS OPEN_BRACKET IDENTIFIER CLOSE_BRACKET .

    $default  reduce using rule 114 (arg_register)


state 365

  144 arg_register: SCOPE_NAME IDENTIFIER OPEN_SQBRACKET HASH NUMBER . CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 383


state 366

  141 arg_register: IDENTIFIER OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET .

    $default  reduce using rule 141 (arg_register)


state 367

  120 arg_register: register_type NUMBER OPEN_SQBRACKET expr PLUS . src_index_register CLOSE_SQBRACKET
  146 expr: expr PLUS . expr

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168
    INDEXLOW      shift, and go to state 307
    INDEXHIGH     shift, and go to state 308

    expr                go to state 274
    src_index_register  go to state 384


state 368

  123 arg_register: register_type NUMBER OPEN_SQBRACKET src_index_register CLOSE_SQBRACKET .

    $default  reduce using rule 123 (arg_register)


state 369

  119 arg_register: register_type NUMBER OPEN_SQBRACKET src_index_register PLUS . expr CLOSE_SQBRACKET
  124             | register_type NUMBER OPEN_SQBRACKET src_index_register PLUS . HASH NUMBER CLOSE_SQBRACKET

    NUMBER        shift, and go to state 164
    MINUS         shift, and go to state 165
    HASH          shift, and go to state 385
    NOT           shift, and go to state 167
    OPEN_BRACKET  shift, and go to state 168

    expr  go to state 386


state 370

  121 arg_register: register_type OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET .

    $default  reduce using rule 121 (arg_register)


state 371

  118 arg_register: register_type OPEN_SQBRACKET expr PLUS src_index_register . CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 387


state 372

  116 arg_register: register_type OPEN_SQBRACKET src_index_register PLUS HASH . NUMBER CLOSE_SQBRACKET

    NUMBER  shift, and go to state 388


state 373

  117 arg_register: register_type OPEN_SQBRACKET src_index_register PLUS expr . CLOSE_SQBRACKET
  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    CLOSE_SQBRACKET  shift, and go to state 389
    PLUS             shift, and go to state 229
    MINUS            shift, and go to state 230
    TIMES            shift, and go to state 231
    DIVIDE           shift, and go to state 232
    LSHIFT           shift, and go to state 233
    RSHIFT           shift, and go to state 234
    AND              shift, and go to state 235
    OR               shift, and go to state 236
    XOR              shift, and go to state 237
    MODULUS          shift, and go to state 238


state 374

   50 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA argument . COMMA argument COMMA argument

    COMMA  shift, and go to state 390


state 375

   51 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument COMMA argument COMMA argument . COMMA argument

    COMMA  shift, and go to state 391


state 376

   47 instruction: preopcode_flag CFI_OPCODE opcode_modifier arg_register COMMA arg_register COMMA arg_register .

    $default  reduce using rule 47 (instruction)


state 377

  171 ld_argument: OPEN_SQBRACKET arg_register COMMA ldst_offset_argument . CLOSE_SQBRACKET
  172            | OPEN_SQBRACKET arg_register COMMA ldst_offset_argument . COMMA arg_register CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 392
    COMMA            shift, and go to state 393


state 378

  173 eld_argument: OPEN_SQBRACKET arg_register COMMA arg_register . CLOSE_SQBRACKET
  174             | OPEN_SQBRACKET arg_register COMMA arg_register . COMMA arg_register CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 394
    COMMA            shift, and go to state 395


state 379

   34 instruction: preopcode_flag ELD_OPCODE opcode_modifier argument COMMA eld_argument COMMA argument COMMA . argument

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 396
    prearg_mod  go to state 156


state 380

   37 instruction: preopcode_flag EFO_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA efo_expression COMMA . source_arguments

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    source_arguments  go to state 397
    argument          go to state 158
    prearg_mod        go to state 156


state 381

  183 efo_expression: maybe_bang I0 . EQUALS A0 COMMA maybe_bang I1 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  184               | maybe_bang I0 . EQUALS A1 COMMA maybe_bang I1 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr
  185               | maybe_bang I0 . EQUALS M0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  186               | maybe_bang I0 . EQUALS A0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  190               | maybe_bang I0 . EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr
  191               | maybe_bang I0 . EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  192               | maybe_bang I0 . EQUALS M0 COMMA efo_addr_expr COMMA efo_mul_expr

    EQUALS  shift, and go to state 398


state 382

  187 efo_expression: maybe_bang I1 . EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  188               | maybe_bang I1 . EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr
  189               | maybe_bang I1 . EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr

    EQUALS  shift, and go to state 399


state 383

  144 arg_register: SCOPE_NAME IDENTIFIER OPEN_SQBRACKET HASH NUMBER CLOSE_SQBRACKET .

    $default  reduce using rule 144 (arg_register)


state 384

  120 arg_register: register_type NUMBER OPEN_SQBRACKET expr PLUS src_index_register . CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 400


state 385

  124 arg_register: register_type NUMBER OPEN_SQBRACKET src_index_register PLUS HASH . NUMBER CLOSE_SQBRACKET

    NUMBER  shift, and go to state 401


state 386

  119 arg_register: register_type NUMBER OPEN_SQBRACKET src_index_register PLUS expr . CLOSE_SQBRACKET
  146 expr: expr . PLUS expr
  147     | expr . MINUS expr
  148     | expr . TIMES expr
  149     | expr . DIVIDE expr
  150     | expr . LSHIFT expr
  151     | expr . RSHIFT expr
  152     | expr . MODULUS expr
  154     | expr . AND expr
  155     | expr . OR expr
  156     | expr . XOR expr

    CLOSE_SQBRACKET  shift, and go to state 402
    PLUS             shift, and go to state 229
    MINUS            shift, and go to state 230
    TIMES            shift, and go to state 231
    DIVIDE           shift, and go to state 232
    LSHIFT           shift, and go to state 233
    RSHIFT           shift, and go to state 234
    AND              shift, and go to state 235
    OR               shift, and go to state 236
    XOR              shift, and go to state 237
    MODULUS          shift, and go to state 238


state 387

  118 arg_register: register_type OPEN_SQBRACKET expr PLUS src_index_register CLOSE_SQBRACKET .

    $default  reduce using rule 118 (arg_register)


state 388

  116 arg_register: register_type OPEN_SQBRACKET src_index_register PLUS HASH NUMBER . CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 403


state 389

  117 arg_register: register_type OPEN_SQBRACKET src_index_register PLUS expr CLOSE_SQBRACKET .

    $default  reduce using rule 117 (arg_register)


state 390

   50 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA argument COMMA . argument COMMA argument

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 404
    prearg_mod  go to state 156


state 391

   51 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument COMMA argument COMMA argument COMMA . argument

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 405
    prearg_mod  go to state 156


state 392

  171 ld_argument: OPEN_SQBRACKET arg_register COMMA ldst_offset_argument CLOSE_SQBRACKET .

    $default  reduce using rule 171 (ld_argument)


state 393

  172 ld_argument: OPEN_SQBRACKET arg_register COMMA ldst_offset_argument COMMA . arg_register CLOSE_SQBRACKET

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 406
    dest_index_register  go to state 205


state 394

  173 eld_argument: OPEN_SQBRACKET arg_register COMMA arg_register CLOSE_SQBRACKET .

    $default  reduce using rule 173 (eld_argument)


state 395

  174 eld_argument: OPEN_SQBRACKET arg_register COMMA arg_register COMMA . arg_register CLOSE_SQBRACKET

    REGISTER          shift, and go to state 115
    TEMP_REGISTER     shift, and go to state 116
    OPCODE            shift, and go to state 182
    HASH              shift, and go to state 183
    PRED0             shift, and go to state 184
    PRED1             shift, and go to state 185
    PRED2             shift, and go to state 186
    PRED3             shift, and go to state 187
    I0                shift, and go to state 188
    I1                shift, and go to state 189
    SRC0              shift, and go to state 190
    SRC1              shift, and go to state 191
    SRC2              shift, and go to state 192
    DIRECT_IMMEDIATE  shift, and go to state 193
    ADDRESS_MODE      shift, and go to state 194
    SWIZZLE           shift, and go to state 195
    INTSRCSEL         shift, and go to state 196
    INDEXLOW          shift, and go to state 197
    INDEXHIGH         shift, and go to state 198
    INDEXBOTH         shift, and go to state 199
    PCLINK            shift, and go to state 200
    SCOPE_NAME        shift, and go to state 201
    IDENTIFIER        shift, and go to state 202

    register_type        go to state 203
    arg_register         go to state 407
    dest_index_register  go to state 205


state 396

   34 instruction: preopcode_flag ELD_OPCODE opcode_modifier argument COMMA eld_argument COMMA argument COMMA argument .

    $default  reduce using rule 34 (instruction)


state 397

   37 instruction: preopcode_flag EFO_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA efo_expression COMMA source_arguments .

    $default  reduce using rule 37 (instruction)


state 398

  183 efo_expression: maybe_bang I0 EQUALS . A0 COMMA maybe_bang I1 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  184               | maybe_bang I0 EQUALS . A1 COMMA maybe_bang I1 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr
  185               | maybe_bang I0 EQUALS . M0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  186               | maybe_bang I0 EQUALS . A0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  190               | maybe_bang I0 EQUALS . A0 COMMA efo_addr_expr COMMA efo_mul_expr
  191               | maybe_bang I0 EQUALS . A1 COMMA efo_addr_expr COMMA efo_mul_expr
  192               | maybe_bang I0 EQUALS . M0 COMMA efo_addr_expr COMMA efo_mul_expr

    A0  shift, and go to state 408
    A1  shift, and go to state 409
    M0  shift, and go to state 410


state 399

  187 efo_expression: maybe_bang I1 EQUALS . A1 COMMA efo_addr_expr COMMA efo_mul_expr
  188               | maybe_bang I1 EQUALS . A0 COMMA efo_addr_expr COMMA efo_mul_expr
  189               | maybe_bang I1 EQUALS . M1 COMMA efo_addr_expr COMMA efo_mul_expr

    A0  shift, and go to state 411
    A1  shift, and go to state 412
    M1  shift, and go to state 413


state 400

  120 arg_register: register_type NUMBER OPEN_SQBRACKET expr PLUS src_index_register CLOSE_SQBRACKET .

    $default  reduce using rule 120 (arg_register)


state 401

  124 arg_register: register_type NUMBER OPEN_SQBRACKET src_index_register PLUS HASH NUMBER . CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 414


state 402

  119 arg_register: register_type NUMBER OPEN_SQBRACKET src_index_register PLUS expr CLOSE_SQBRACKET .

    $default  reduce using rule 119 (arg_register)


state 403

  116 arg_register: register_type OPEN_SQBRACKET src_index_register PLUS HASH NUMBER CLOSE_SQBRACKET .

    $default  reduce using rule 116 (arg_register)


state 404

   50 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA argument COMMA argument . COMMA argument

    COMMA  shift, and go to state 415


state 405

   51 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument COMMA argument COMMA argument COMMA argument .

    $default  reduce using rule 51 (instruction)


state 406

  172 ld_argument: OPEN_SQBRACKET arg_register COMMA ldst_offset_argument COMMA arg_register . CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 416


state 407

  174 eld_argument: OPEN_SQBRACKET arg_register COMMA arg_register COMMA arg_register . CLOSE_SQBRACKET

    CLOSE_SQBRACKET  shift, and go to state 417


state 408

  183 efo_expression: maybe_bang I0 EQUALS A0 . COMMA maybe_bang I1 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  186               | maybe_bang I0 EQUALS A0 . COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  190               | maybe_bang I0 EQUALS A0 . COMMA efo_addr_expr COMMA efo_mul_expr

    COMMA  shift, and go to state 418


state 409

  184 efo_expression: maybe_bang I0 EQUALS A1 . COMMA maybe_bang I1 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr
  191               | maybe_bang I0 EQUALS A1 . COMMA efo_addr_expr COMMA efo_mul_expr

    COMMA  shift, and go to state 419


state 410

  185 efo_expression: maybe_bang I0 EQUALS M0 . COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  192               | maybe_bang I0 EQUALS M0 . COMMA efo_addr_expr COMMA efo_mul_expr

    COMMA  shift, and go to state 420


state 411

  188 efo_expression: maybe_bang I1 EQUALS A0 . COMMA efo_addr_expr COMMA efo_mul_expr

    COMMA  shift, and go to state 421


state 412

  187 efo_expression: maybe_bang I1 EQUALS A1 . COMMA efo_addr_expr COMMA efo_mul_expr

    COMMA  shift, and go to state 422


state 413

  189 efo_expression: maybe_bang I1 EQUALS M1 . COMMA efo_addr_expr COMMA efo_mul_expr

    COMMA  shift, and go to state 423


state 414

  124 arg_register: register_type NUMBER OPEN_SQBRACKET src_index_register PLUS HASH NUMBER CLOSE_SQBRACKET .

    $default  reduce using rule 124 (arg_register)


state 415

   50 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA argument COMMA argument COMMA . argument

    error      shift, and go to state 148
    NUMBER     shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    BANG       shift, and go to state 152
    NOT        shift, and go to state 153
    ABS_NODOT  shift, and go to state 154

    REGISTER          reduce using rule 101 (prearg_mod)
    TEMP_REGISTER     reduce using rule 101 (prearg_mod)
    OPCODE            reduce using rule 101 (prearg_mod)
    HASH              reduce using rule 101 (prearg_mod)
    PRED0             reduce using rule 101 (prearg_mod)
    PRED1             reduce using rule 101 (prearg_mod)
    PRED2             reduce using rule 101 (prearg_mod)
    PRED3             reduce using rule 101 (prearg_mod)
    I0                reduce using rule 101 (prearg_mod)
    I1                reduce using rule 101 (prearg_mod)
    SRC0              reduce using rule 101 (prearg_mod)
    SRC1              reduce using rule 101 (prearg_mod)
    SRC2              reduce using rule 101 (prearg_mod)
    DIRECT_IMMEDIATE  reduce using rule 101 (prearg_mod)
    ADDRESS_MODE      reduce using rule 101 (prearg_mod)
    SWIZZLE           reduce using rule 101 (prearg_mod)
    INTSRCSEL         reduce using rule 101 (prearg_mod)
    INDEXLOW          reduce using rule 101 (prearg_mod)
    INDEXHIGH         reduce using rule 101 (prearg_mod)
    INDEXBOTH         reduce using rule 101 (prearg_mod)
    PCLINK            reduce using rule 101 (prearg_mod)
    SCOPE_NAME        reduce using rule 101 (prearg_mod)
    IDENTIFIER        reduce using rule 101 (prearg_mod)

    argument    go to state 424
    prearg_mod  go to state 156


state 416

  172 ld_argument: OPEN_SQBRACKET arg_register COMMA ldst_offset_argument COMMA arg_register CLOSE_SQBRACKET .

    $default  reduce using rule 172 (ld_argument)


state 417

  174 eld_argument: OPEN_SQBRACKET arg_register COMMA arg_register COMMA arg_register CLOSE_SQBRACKET .

    $default  reduce using rule 174 (eld_argument)


state 418

  183 efo_expression: maybe_bang I0 EQUALS A0 COMMA . maybe_bang I1 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  186               | maybe_bang I0 EQUALS A0 COMMA . maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  190               | maybe_bang I0 EQUALS A0 COMMA . efo_addr_expr COMMA efo_mul_expr

    BANG  shift, and go to state 361
    A0    shift, and go to state 425

    $default  reduce using rule 211 (maybe_bang)

    efo_addr_expr  go to state 426
    maybe_bang     go to state 427


state 419

  184 efo_expression: maybe_bang I0 EQUALS A1 COMMA . maybe_bang I1 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr
  191               | maybe_bang I0 EQUALS A1 COMMA . efo_addr_expr COMMA efo_mul_expr

    BANG  shift, and go to state 361
    A0    shift, and go to state 425

    $default  reduce using rule 211 (maybe_bang)

    efo_addr_expr  go to state 428
    maybe_bang     go to state 429


state 420

  185 efo_expression: maybe_bang I0 EQUALS M0 COMMA . maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr
  192               | maybe_bang I0 EQUALS M0 COMMA . efo_addr_expr COMMA efo_mul_expr

    BANG  shift, and go to state 361
    A0    shift, and go to state 425

    $default  reduce using rule 211 (maybe_bang)

    efo_addr_expr  go to state 430
    maybe_bang     go to state 431


state 421

  188 efo_expression: maybe_bang I1 EQUALS A0 COMMA . efo_addr_expr COMMA efo_mul_expr

    A0  shift, and go to state 425

    efo_addr_expr  go to state 432


state 422

  187 efo_expression: maybe_bang I1 EQUALS A1 COMMA . efo_addr_expr COMMA efo_mul_expr

    A0  shift, and go to state 425

    efo_addr_expr  go to state 433


state 423

  189 efo_expression: maybe_bang I1 EQUALS M1 COMMA . efo_addr_expr COMMA efo_mul_expr

    A0  shift, and go to state 425

    efo_addr_expr  go to state 434


state 424

   50 instruction: preopcode_flag EXT_OPCODE opcode_modifier argument EQUALS efo_dest_select COMMA argument COMMA argument COMMA argument .

    $default  reduce using rule 50 (instruction)


state 425

  193 efo_addr_expr: A0 . EQUALS efo_add_src PLUS maybe_negate_r efo_add_src COMMA A1 EQUALS maybe_negate efo_add_src PLUS efo_add_src

    EQUALS  shift, and go to state 435


state 426

  190 efo_expression: maybe_bang I0 EQUALS A0 COMMA efo_addr_expr . COMMA efo_mul_expr

    COMMA  shift, and go to state 436


state 427

  183 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang . I1 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  186               | maybe_bang I0 EQUALS A0 COMMA maybe_bang . I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr

    I1  shift, and go to state 437


state 428

  191 efo_expression: maybe_bang I0 EQUALS A1 COMMA efo_addr_expr . COMMA efo_mul_expr

    COMMA  shift, and go to state 438


state 429

  184 efo_expression: maybe_bang I0 EQUALS A1 COMMA maybe_bang . I1 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr

    I1  shift, and go to state 439


state 430

  192 efo_expression: maybe_bang I0 EQUALS M0 COMMA efo_addr_expr . COMMA efo_mul_expr

    COMMA  shift, and go to state 440


state 431

  185 efo_expression: maybe_bang I0 EQUALS M0 COMMA maybe_bang . I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr

    I1  shift, and go to state 441


state 432

  188 efo_expression: maybe_bang I1 EQUALS A0 COMMA efo_addr_expr . COMMA efo_mul_expr

    COMMA  shift, and go to state 442


state 433

  187 efo_expression: maybe_bang I1 EQUALS A1 COMMA efo_addr_expr . COMMA efo_mul_expr

    COMMA  shift, and go to state 443


state 434

  189 efo_expression: maybe_bang I1 EQUALS M1 COMMA efo_addr_expr . COMMA efo_mul_expr

    COMMA  shift, and go to state 444


state 435

  193 efo_addr_expr: A0 EQUALS . efo_add_src PLUS maybe_negate_r efo_add_src COMMA A1 EQUALS maybe_negate efo_add_src PLUS efo_add_src

    I0    shift, and go to state 445
    I1    shift, and go to state 446
    M0    shift, and go to state 447
    M1    shift, and go to state 448
    SRC0  shift, and go to state 449
    SRC1  shift, and go to state 450
    SRC2  shift, and go to state 451

    efo_add_src  go to state 452


state 436

  190 efo_expression: maybe_bang I0 EQUALS A0 COMMA efo_addr_expr COMMA . efo_mul_expr

    M0  shift, and go to state 453

    efo_mul_expr  go to state 454


state 437

  183 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 . EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr
  186               | maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 . EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr

    EQUALS  shift, and go to state 455


state 438

  191 efo_expression: maybe_bang I0 EQUALS A1 COMMA efo_addr_expr COMMA . efo_mul_expr

    M0  shift, and go to state 453

    efo_mul_expr  go to state 456


state 439

  184 efo_expression: maybe_bang I0 EQUALS A1 COMMA maybe_bang I1 . EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr

    EQUALS  shift, and go to state 457


state 440

  192 efo_expression: maybe_bang I0 EQUALS M0 COMMA efo_addr_expr COMMA . efo_mul_expr

    M0  shift, and go to state 453

    efo_mul_expr  go to state 458


state 441

  185 efo_expression: maybe_bang I0 EQUALS M0 COMMA maybe_bang I1 . EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr

    EQUALS  shift, and go to state 459


state 442

  188 efo_expression: maybe_bang I1 EQUALS A0 COMMA efo_addr_expr COMMA . efo_mul_expr

    M0  shift, and go to state 453

    efo_mul_expr  go to state 460


state 443

  187 efo_expression: maybe_bang I1 EQUALS A1 COMMA efo_addr_expr COMMA . efo_mul_expr

    M0  shift, and go to state 453

    efo_mul_expr  go to state 461


state 444

  189 efo_expression: maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA . efo_mul_expr

    M0  shift, and go to state 453

    efo_mul_expr  go to state 462


state 445

  197 efo_add_src: I0 .

    $default  reduce using rule 197 (efo_add_src)


state 446

  198 efo_add_src: I1 .

    $default  reduce using rule 198 (efo_add_src)


state 447

  199 efo_add_src: M0 .

    $default  reduce using rule 199 (efo_add_src)


state 448

  200 efo_add_src: M1 .

    $default  reduce using rule 200 (efo_add_src)


state 449

  194 efo_add_src: SRC0 .

    $default  reduce using rule 194 (efo_add_src)


state 450

  195 efo_add_src: SRC1 .

    $default  reduce using rule 195 (efo_add_src)


state 451

  196 efo_add_src: SRC2 .

    $default  reduce using rule 196 (efo_add_src)


state 452

  193 efo_addr_expr: A0 EQUALS efo_add_src . PLUS maybe_negate_r efo_add_src COMMA A1 EQUALS maybe_negate efo_add_src PLUS efo_add_src

    PLUS  shift, and go to state 463


state 453

  201 efo_mul_expr: M0 . EQUALS efo_mul_src TIMES efo_mul_src COMMA M1 EQUALS efo_mul_src TIMES efo_mul_src

    EQUALS  shift, and go to state 464


state 454

  190 efo_expression: maybe_bang I0 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr .

    $default  reduce using rule 190 (efo_expression)


state 455

  183 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS . A1 COMMA efo_addr_expr COMMA efo_mul_expr
  186               | maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS . M1 COMMA efo_addr_expr COMMA efo_mul_expr

    A1  shift, and go to state 465
    M1  shift, and go to state 466


state 456

  191 efo_expression: maybe_bang I0 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr .

    $default  reduce using rule 191 (efo_expression)


state 457

  184 efo_expression: maybe_bang I0 EQUALS A1 COMMA maybe_bang I1 EQUALS . A0 COMMA efo_addr_expr COMMA efo_mul_expr

    A0  shift, and go to state 467


state 458

  192 efo_expression: maybe_bang I0 EQUALS M0 COMMA efo_addr_expr COMMA efo_mul_expr .

    $default  reduce using rule 192 (efo_expression)


state 459

  185 efo_expression: maybe_bang I0 EQUALS M0 COMMA maybe_bang I1 EQUALS . M1 COMMA efo_addr_expr COMMA efo_mul_expr

    M1  shift, and go to state 468


state 460

  188 efo_expression: maybe_bang I1 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr .

    $default  reduce using rule 188 (efo_expression)


state 461

  187 efo_expression: maybe_bang I1 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr .

    $default  reduce using rule 187 (efo_expression)


state 462

  189 efo_expression: maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr .

    $default  reduce using rule 189 (efo_expression)


state 463

  193 efo_addr_expr: A0 EQUALS efo_add_src PLUS . maybe_negate_r efo_add_src COMMA A1 EQUALS maybe_negate efo_add_src PLUS efo_add_src

    MINUS  shift, and go to state 469

    $default  reduce using rule 215 (maybe_negate_r)

    maybe_negate_r  go to state 470


state 464

  201 efo_mul_expr: M0 EQUALS . efo_mul_src TIMES efo_mul_src COMMA M1 EQUALS efo_mul_src TIMES efo_mul_src

    I0    shift, and go to state 471
    I1    shift, and go to state 472
    SRC0  shift, and go to state 473
    SRC1  shift, and go to state 474
    SRC2  shift, and go to state 475

    efo_mul_src  go to state 476


state 465

  183 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS A1 . COMMA efo_addr_expr COMMA efo_mul_expr

    COMMA  shift, and go to state 477


state 466

  186 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS M1 . COMMA efo_addr_expr COMMA efo_mul_expr

    COMMA  shift, and go to state 478


state 467

  184 efo_expression: maybe_bang I0 EQUALS A1 COMMA maybe_bang I1 EQUALS A0 . COMMA efo_addr_expr COMMA efo_mul_expr

    COMMA  shift, and go to state 479


state 468

  185 efo_expression: maybe_bang I0 EQUALS M0 COMMA maybe_bang I1 EQUALS M1 . COMMA efo_addr_expr COMMA efo_mul_expr

    COMMA  shift, and go to state 480


state 469

  216 maybe_negate_r: MINUS .

    $default  reduce using rule 216 (maybe_negate_r)


state 470

  193 efo_addr_expr: A0 EQUALS efo_add_src PLUS maybe_negate_r . efo_add_src COMMA A1 EQUALS maybe_negate efo_add_src PLUS efo_add_src

    I0    shift, and go to state 445
    I1    shift, and go to state 446
    M0    shift, and go to state 447
    M1    shift, and go to state 448
    SRC0  shift, and go to state 449
    SRC1  shift, and go to state 450
    SRC2  shift, and go to state 451

    efo_add_src  go to state 481


state 471

  205 efo_mul_src: I0 .

    $default  reduce using rule 205 (efo_mul_src)


state 472

  206 efo_mul_src: I1 .

    $default  reduce using rule 206 (efo_mul_src)


state 473

  202 efo_mul_src: SRC0 .

    $default  reduce using rule 202 (efo_mul_src)


state 474

  203 efo_mul_src: SRC1 .

    $default  reduce using rule 203 (efo_mul_src)


state 475

  204 efo_mul_src: SRC2 .

    $default  reduce using rule 204 (efo_mul_src)


state 476

  201 efo_mul_expr: M0 EQUALS efo_mul_src . TIMES efo_mul_src COMMA M1 EQUALS efo_mul_src TIMES efo_mul_src

    TIMES  shift, and go to state 482


state 477

  183 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS A1 COMMA . efo_addr_expr COMMA efo_mul_expr

    A0  shift, and go to state 425

    efo_addr_expr  go to state 483


state 478

  186 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS M1 COMMA . efo_addr_expr COMMA efo_mul_expr

    A0  shift, and go to state 425

    efo_addr_expr  go to state 484


state 479

  184 efo_expression: maybe_bang I0 EQUALS A1 COMMA maybe_bang I1 EQUALS A0 COMMA . efo_addr_expr COMMA efo_mul_expr

    A0  shift, and go to state 425

    efo_addr_expr  go to state 485


state 480

  185 efo_expression: maybe_bang I0 EQUALS M0 COMMA maybe_bang I1 EQUALS M1 COMMA . efo_addr_expr COMMA efo_mul_expr

    A0  shift, and go to state 425

    efo_addr_expr  go to state 486


state 481

  193 efo_addr_expr: A0 EQUALS efo_add_src PLUS maybe_negate_r efo_add_src . COMMA A1 EQUALS maybe_negate efo_add_src PLUS efo_add_src

    COMMA  shift, and go to state 487


state 482

  201 efo_mul_expr: M0 EQUALS efo_mul_src TIMES . efo_mul_src COMMA M1 EQUALS efo_mul_src TIMES efo_mul_src

    I0    shift, and go to state 471
    I1    shift, and go to state 472
    SRC0  shift, and go to state 473
    SRC1  shift, and go to state 474
    SRC2  shift, and go to state 475

    efo_mul_src  go to state 488


state 483

  183 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS A1 COMMA efo_addr_expr . COMMA efo_mul_expr

    COMMA  shift, and go to state 489


state 484

  186 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr . COMMA efo_mul_expr

    COMMA  shift, and go to state 490


state 485

  184 efo_expression: maybe_bang I0 EQUALS A1 COMMA maybe_bang I1 EQUALS A0 COMMA efo_addr_expr . COMMA efo_mul_expr

    COMMA  shift, and go to state 491


state 486

  185 efo_expression: maybe_bang I0 EQUALS M0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr . COMMA efo_mul_expr

    COMMA  shift, and go to state 492


state 487

  193 efo_addr_expr: A0 EQUALS efo_add_src PLUS maybe_negate_r efo_add_src COMMA . A1 EQUALS maybe_negate efo_add_src PLUS efo_add_src

    A1  shift, and go to state 493


state 488

  201 efo_mul_expr: M0 EQUALS efo_mul_src TIMES efo_mul_src . COMMA M1 EQUALS efo_mul_src TIMES efo_mul_src

    COMMA  shift, and go to state 494


state 489

  183 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS A1 COMMA efo_addr_expr COMMA . efo_mul_expr

    M0  shift, and go to state 453

    efo_mul_expr  go to state 495


state 490

  186 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA . efo_mul_expr

    M0  shift, and go to state 453

    efo_mul_expr  go to state 496


state 491

  184 efo_expression: maybe_bang I0 EQUALS A1 COMMA maybe_bang I1 EQUALS A0 COMMA efo_addr_expr COMMA . efo_mul_expr

    M0  shift, and go to state 453

    efo_mul_expr  go to state 497


state 492

  185 efo_expression: maybe_bang I0 EQUALS M0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA . efo_mul_expr

    M0  shift, and go to state 453

    efo_mul_expr  go to state 498


state 493

  193 efo_addr_expr: A0 EQUALS efo_add_src PLUS maybe_negate_r efo_add_src COMMA A1 . EQUALS maybe_negate efo_add_src PLUS efo_add_src

    EQUALS  shift, and go to state 499


state 494

  201 efo_mul_expr: M0 EQUALS efo_mul_src TIMES efo_mul_src COMMA . M1 EQUALS efo_mul_src TIMES efo_mul_src

    M1  shift, and go to state 500


state 495

  183 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS A1 COMMA efo_addr_expr COMMA efo_mul_expr .

    $default  reduce using rule 183 (efo_expression)


state 496

  186 efo_expression: maybe_bang I0 EQUALS A0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr .

    $default  reduce using rule 186 (efo_expression)


state 497

  184 efo_expression: maybe_bang I0 EQUALS A1 COMMA maybe_bang I1 EQUALS A0 COMMA efo_addr_expr COMMA efo_mul_expr .

    $default  reduce using rule 184 (efo_expression)


state 498

  185 efo_expression: maybe_bang I0 EQUALS M0 COMMA maybe_bang I1 EQUALS M1 COMMA efo_addr_expr COMMA efo_mul_expr .

    $default  reduce using rule 185 (efo_expression)


state 499

  193 efo_addr_expr: A0 EQUALS efo_add_src PLUS maybe_negate_r efo_add_src COMMA A1 EQUALS . maybe_negate efo_add_src PLUS efo_add_src

    MINUS  shift, and go to state 501

    $default  reduce using rule 213 (maybe_negate)

    maybe_negate  go to state 502


state 500

  201 efo_mul_expr: M0 EQUALS efo_mul_src TIMES efo_mul_src COMMA M1 . EQUALS efo_mul_src TIMES efo_mul_src

    EQUALS  shift, and go to state 503


state 501

  214 maybe_negate: MINUS .

    $default  reduce using rule 214 (maybe_negate)


state 502

  193 efo_addr_expr: A0 EQUALS efo_add_src PLUS maybe_negate_r efo_add_src COMMA A1 EQUALS maybe_negate . efo_add_src PLUS efo_add_src

    I0    shift, and go to state 445
    I1    shift, and go to state 446
    M0    shift, and go to state 447
    M1    shift, and go to state 448
    SRC0  shift, and go to state 449
    SRC1  shift, and go to state 450
    SRC2  shift, and go to state 451

    efo_add_src  go to state 504


state 503

  201 efo_mul_expr: M0 EQUALS efo_mul_src TIMES efo_mul_src COMMA M1 EQUALS . efo_mul_src TIMES efo_mul_src

    I0    shift, and go to state 471
    I1    shift, and go to state 472
    SRC0  shift, and go to state 473
    SRC1  shift, and go to state 474
    SRC2  shift, and go to state 475

    efo_mul_src  go to state 505


state 504

  193 efo_addr_expr: A0 EQUALS efo_add_src PLUS maybe_negate_r efo_add_src COMMA A1 EQUALS maybe_negate efo_add_src . PLUS efo_add_src

    PLUS  shift, and go to state 506


state 505

  201 efo_mul_expr: M0 EQUALS efo_mul_src TIMES efo_mul_src COMMA M1 EQUALS efo_mul_src . TIMES efo_mul_src

    TIMES  shift, and go to state 507


state 506

  193 efo_addr_expr: A0 EQUALS efo_add_src PLUS maybe_negate_r efo_add_src COMMA A1 EQUALS maybe_negate efo_add_src PLUS . efo_add_src

    I0    shift, and go to state 445
    I1    shift, and go to state 446
    M0    shift, and go to state 447
    M1    shift, and go to state 448
    SRC0  shift, and go to state 449
    SRC1  shift, and go to state 450
    SRC2  shift, and go to state 451

    efo_add_src  go to state 508


state 507

  201 efo_mul_expr: M0 EQUALS efo_mul_src TIMES efo_mul_src COMMA M1 EQUALS efo_mul_src TIMES . efo_mul_src

    I0    shift, and go to state 471
    I1    shift, and go to state 472
    SRC0  shift, and go to state 473
    SRC1  shift, and go to state 474
    SRC2  shift, and go to state 475

    efo_mul_src  go to state 509


state 508

  193 efo_addr_expr: A0 EQUALS efo_add_src PLUS maybe_negate_r efo_add_src COMMA A1 EQUALS maybe_negate efo_add_src PLUS efo_add_src .

    $default  reduce using rule 193 (efo_addr_expr)


state 509

  201 efo_mul_expr: M0 EQUALS efo_mul_src TIMES efo_mul_src COMMA M1 EQUALS efo_mul_src TIMES efo_mul_src .

    $default  reduce using rule 201 (efo_mul_expr)
